[
    {
        "url": "https://medium.com/@dvshah13/project-image-recognition-1d316d04cb4c?source=user_profile---------1----------------",
        "title": "Project: Image Recognition \u2013 Deepak Shah \u2013",
        "text": "So I\u2019ve got two projects, I\u2019ve been working on in the deep learning space, image recognition and a chatbot named Peggy. I\u2019m doubly excited because I finally have some time to write about it.\n\nI really wanted to build and work with convolutional neural nets and building something involving image recognition and luckily they go hand in hand. Convolutional nets provide the best solution imo for image recognition because they contain multiple layers of receptive fields. This is crucial because this allows the net to use this technical operation of convolution to search for a particular pattern. And by tweaking the weights and biases against known data, we can impact the effectiveness of this process. The next layers that follow are RELU and pooling which both help to build up the simple patterns discovered by the convolutional layer. CNNs are trained using back propagation so at times we can still have the issues of vanishing gradients. With RELU, the gradient is held more or less constant at every layer of the net. Thus the RELU activation allows the net to properly trained without harmful slowdowns in the early layers. Pooling is then used to dimensionality reduction. CNNs will tile multiple instances of convolutional layers and RELU layers together in a sequence in order to build more and more complex patterns. Thus by introducing pooling layers, we ensure the net focuses on only the most relevant patterns discovered by convolution and RELU. This helps limit both the memory and processing requirements for running a CNN. Together these three layers can discover a host of complex patterns but the net will have no understanding what these patterns mean. So a fully connected layer is attached to the end of the net in order to equip the net with the ability to classify data samples.\n\nWith some basic knowledge of CNNs and harnessing google\u2019s tensorflow libraries, building out an image recognition system started as a dream of mine and soon became a reality. I had two main python scripts, one used to classify the images and one utilizing flask that became a wrapper (UI) for the project. Throughout my studies in deep learning, I cannot emphasize enough how crucial the data and data set you use for training is. A good data set can make or break your model.\n\nI ended up using the image net database of images which you can find here and download in various forms: http://image-net.org/download. ImageNet was an awesome data set but it was lacking in human facial patterns and that\u2019s a project I\u2019m planning to undertake as I continue improving my working model. I\u2019m going to now go through the code and attach some snippets to better explain what is happening at each step. Again I utilized the tensorflow example you can find here: https://www.tensorflow.org/tutorials/image_recognition\n\nTraining on my MacBook proved to not be a great solution as the cpu only power was not making a dent with all the images being fed in. I ended up using amazon and the gpu power on AWS to speed up training and the training iterations to a stage where images weren\u2019t just returning null or completely off base.\n\nAs far as testing goes, the first step involves defining your paths and to start converting the nodes into something readable by the computer and to create labels that can be read as output by us. This is a definite simplification but it is the crux of what occurs initially.\n\nThe next step and most crucial involves running the softmax tensor and it starts making predictions on what the image can be and training and testing to tighten the results and give predictions based on the labels from training. Results definitely increase as you add data, this is an axiom pretty much true for all machine learning models and projects.\n\nThen I built a small wrapper that took in file uploads and processed a jpg uploaded and using jQuery displayed the results.\n\nTensorflow has made the entire process so much easier and you can try different data sets in your training and see the results. I\u2019ve also experimented with theano to see if I could build something there that could match the results with tensorflow but haven\u2019t come close to the accuracy thus far. I\u2019m planning to put the image recognition site with wrapper up live and will send out a link to it so everyone can play around with it as soon as it\u2019s done. That\u2019s it for now. Write again very soon!"
    },
    {
        "url": "https://medium.com/@dvshah13/deep-learning-notes-part-ii-a37c5051005c?source=user_profile---------2----------------",
        "title": "Deep Learning Notes Part II \u2013 Deepak Shah \u2013",
        "text": "One clap, two clap, three clap, forty?\n\nBy clapping more or less, you can signal to us which stories really stand out."
    },
    {
        "url": "https://medium.com/@dvshah13/my-notes-on-deep-learning-72fe8837bacd?source=user_profile---------3----------------",
        "title": "My notes on Deep Learning \u2013 Deepak Shah \u2013",
        "text": "Hey world, sorry for the gap between stories but I had a few coding projects I was working on and completed (I\u2019ve linked them below and will update the readme pages to better explain the aims) but it\u2019s back to the land of Deep Learning! I wanted to add some of my notes, I tried to keep it as simple as I can to give everyone a gentle introduction to deep learning and neural nets!\n\nWhich Deep Net to Use?\n\nWhy are Deep Nets Hard to Train"
    },
    {
        "url": "https://medium.com/@dvshah13/deep-learning-my-journey-chronicled-5fce98ec1c19?source=user_profile---------4----------------",
        "title": "Deep Learning: My Journey Chronicled \u2013 Deepak Shah \u2013",
        "text": "Deep learning, artificial intelligence?! At times, it sounds more science fiction and mystic than a discipline grounded in math and programming. To be fair, my first exposure to artificial intelligence (A.I.) was watching Lt Commander Data as a child on Star Trek: The Next Generation and it\u2019s been a topic that has fascinated me since.\n\nMy first real life experiences with machine learning, the predecessor of deep learning, involved creating models and analyzing predictive data behavior and maximization as a student researcher in economics and biology at the University of Texas at Austin. But now, as I\u2019ve been knee deep in programming, I found the spark is burning bright to immerse myself and learn and re-learn all that I can in deep learning and to start building!\n\nAt first deep learning can seem intimidating, multivariate calculus, advanced statistics, R and python (all the libraries) but if you take it one step at a time and start from the basics, you begin appreciating how amazing the integration of math and programming in this technology is and how it will truly shape our future. I want this to be a series of my notes, observations and struggles of my journey in deep learning and a personal notebook of some of the projects I plan to create."
    },
    {
        "url": "https://medium.com/@dvshah13/fun-with-algos-part-2-145302e56981?source=user_profile---------5----------------",
        "title": "Fun with Algos Part 2 \u2013 Deepak Shah \u2013",
        "text": "Problem #7: Confirm the End \u2014 Check if a string (first argument, str) ends with the given target string (second argument, target).\n\nThe substr() method returns the characters in a string beginning at the specified location through the specified number of characters. If not specified substr operates through the end of the string. Substr() calculates the index of the first matching character from the end of the string if specified location is negative. Adding -target.length makes it negative. Thus we use that to compare to target and return the boolean expression.\n\nProblem #8: Repeat a string repeat a string \u2014 Take a string as a first argument and repeat it by the number in the second argument (str, num). Return an empty string if the number is not a positive number.\n\nFirst you create the variable to store the repeated word. Then I used a while loop to repeat the code as much as needed according to num. Then I added the string to the variable created. Decrease the num by 1 and loop until completion. After the loop completes, return the variable for the repeated word.\n\nProblem #9: Truncate a string \u2014 Truncate a string if it\u2019s longer than the maximum string length (num), return with a \u2026 ending. The \u2026 ending will add to the length. But if the string length (num) is less than or equal to 3 the \u2026 ending won\u2019t add to the string length.\n\nHere, I used an if statement to check if str.length is greater then num and nu is greater than 3, if so you add the \u2018\u2026\u2019 to the string counting them as characters. Then you run the else if, to check other conditions, str.length is greater than num and num is less than or equal to 3, we return string with \u2018\u2026\u2019 ending not to be added to character count. Last outcome returns the string.\n\nProblem #10: Chunky Monkey \u2014 Write a function that splits an array (first arg) into groups the length of size (second arg) and returns them as two dimensional arrays. Use push and slice.\n\nProblem #11: Slasher Flick \u2014 To return the remaining elements of an array after the nth element is chopped from the head.\n\nThis one was fairly straightforward, I used the slice function, which starts slicing from arr[0] to the howMany argument and then returns it. If the howMany is not valid, it returns a blank array.\n\nProblem #12: Mutations \u2014 Return true if the string in the first element contains all the strings in the second element. Ex. [\u201chello\u201d, \u201cHELLO\u201d] returns true, [Alien, line] returns true.\n\nSo to start, I made both arrays lowercase so they can be properly compared. Then I ran a for loop through our test characters to see if any of them are not part of the target array and if so, return false. Otherwise all the characters are present and we return true."
    },
    {
        "url": "https://medium.com/@dvshah13/fun-with-algorithms-beginner-algos-part-1-o-5964c72aa3dd?source=user_profile---------6----------------",
        "title": "Fun with Algorithms! Beginner Algos Part 1 :-O \u2013 Deepak Shah \u2013",
        "text": "I\u2019ve found I\u2019m loving some of the beginning algorithms problems I\u2019ve encountered so far. I\u2019m trying out some the beginner algorithm problems from freeCodeCamp and have really appreciated the challenge. Algos are tough but they help you re-inforce the concepts the js concepts plus the computer science material I\u2019ve learned. I\u2019ve included the problems and solutions I\u2019ve worked on, with some exciting explanations for my code. Haha, I\u2019m curious to see as I advance how I might write this code differently. Bring it on intermediate algos and data structures. Yes, I\u2019m basically a nerd!\n\nProblem #1: Reverse a string \u2014 Take any string and call a function to reverse the string.\n\nExplanation:\n\nThis one was fairly straight forward but I chose to split the string into characters, then reverse the characters, then join them back together and return the string.\n\nProblem #2: Factorialize a number \u2014 Take a factorial and return it\u2019s answer (ex. 5! = 5x4x3x2x1 = 120). And if the number is 1, just return it.\n\nExplanation:\n\nI basically used a for loop to take our input and continue looping until n = 1. And if num is equal to 1, you will just return 1.\n\nProblem #3: Checking for palindromes \u2014 Check to see if a string is a palindrome (word spelled the same way forwards and backwards), be able to ignore punctuation, spaces and case.\n\nExplanation:\n\nI approached this problem by turning the strings to lowercase and using the regex global expression to replace non word characters and underscore. Then I reversed the string using the split, reverse and join to use to compare to string (forward). If they were equal I returned true, else returned false.\n\nProblem #4: Finding the longest word in a string \u2014 Given a string, find the longest word and return the number of characters it has.\n\nCode:\n\n1 function findLongestWord(str) {\n\n2 var indivWords = str.split(\u2018 \u2018);\n\n3 var maxLength = 0;\n\n4 for (var i = 0; i < indivWords.length; i++) {\n\n5 if (indivWords[i].length > maxLength) {\n\n6 maxLength = indivWords[i].length;\n\n7 }\n\n8 }\n\n9 return maxLength;\n\n10 }\n\n11 findLongestWord(\u201cThe quick brown fox jumped over the lazy dog\u201d); //returned 6\n\nExplanation:\n\nSo my logic here was to first take the string and convert it into an array of words. I used the maxLength variable to keep track of the maximum length and started the for loop from 0 to the length of the array of words. I then checked for the longest word by comparing the current word to the previous and then storing the new longest word. At the end of the loop, I just returned the value in numbers of the variable max length.\n\nProblem #5: Title case a sentence \u2014 Return the provided string with the first letter of each word capitalized. Make sure the rest of the word is in lower case. Also make sure and capitalize connecting words like or, the, and.\n\nCode:\n\n1 function titleCase(str);\n\n2 var words = str.toLowerCase().split(\u2018 \u2018);\n\n3 for (var i = 0; i < words.length; i++) {\n\n4 var letters = words[i].split(\u2018\u2019);\n\n5 letters[0] = letters[0].toUpperCase();\n\n6 words[i] = letters.join(\u2018\u2019);\n\n7 }\n\n8 return words.join(\u2018 \u2018);\n\n9 }\n\n10 titleCase(\u201cI\u2019m a little tea pot\u201d); //returned I\u2019m A Little Tea Pot\n\nExplanation:\n\nIn this problem, I started by splitting the string into an array of words. Then used a for loop which goes through each of the words in the array. Then split each word into an array of letters and converted index[0] or the first letter into uppercase. Rejoined the letters back into the word. Then rejoined the words into a string and returned that.\n\nProblem #6: Return the largest number in an array from a sub-array \u2014 Return an array consisting of the largest number from each provided sub-array. The provided array will contain exactly 4 sub-arrays.\n\nCode:\n\n1 function largestOfFour(arr) {\n\n2 var results = [ ];\n\n3 for (var i = 0; i < arr.length; i++) {\n\n4 var largestNumber = 0;\n\n5 for (var n = 0; n < arr[i].length; n++) {\n\n6 if (arr[i][n] > arr[i][n] {\n\n7 largestNumber = arr[i][n];\n\n8 }\n\n9 }\n\n10 results[i] = largestNumber;\n\n11 }\n\n12 return results;\n\n13 }\n\n14 largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]); //returned [5, 27, 39, 1001]\n\nExplanation:\n\nSo I started by creating a variable/empty array to store the results. Then used a for outer loop to iterate through the outer array. Created a variable to hold the largest number that must be in the outer loop. Then created a for inner loop to go through the sub-arrays. Then the if loop checked whether each element of the sub-array is larger then the currently stored largest number. If so, it will update as the largest number. Lastly, after the inner loops runs through, return the largest number from each sub-array into the new array."
    },
    {
        "url": "https://medium.com/@dvshah13/deepaks-coding-adventures-first-post-bfe84df3ecc?source=user_profile---------7----------------",
        "title": "Deepak\u2019s Deep Learning and Coding first post! \u2013 Deepak Shah \u2013",
        "text": "This blog essentially chronicles my journey as a programmer. I have a strong passion for coding and deep learning but even moreso problem solving and building. I hope to use this blog to chronicle my progress in these fields as well as have some fun sections on some of my other interests. Life is meant to be the grestest adventure and my adventures in deep learning and coding are just getting started. So without further ado, let\u2019s get this party started!"
    }
]