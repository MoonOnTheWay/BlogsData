[
    {
        "url": "https://medium.com/@ajaysreeram/guidance-to-start-with-neural-networks-fffd97877610?source=user_profile---------1----------------",
        "title": "Guidance to start with Neural Networks \u2013 Sreeram Ajay \u2013",
        "text": "I don\u2019t want someone interested in neural networks to struggle like me, so I would like to share about my first month learning path, hope it will make your learning simple.\n\nFirst of all, try to finish this online book, which will give strong basics about neural networks. yes it is big, but remember more patience makes your basics more stronger.\n\nNow after getting confidence of what neural network is and how it works, Watch these videos to recall everything you read till now.\n\nFor now, you will have proper understanding about neural network.\n\nTo go forward, read:\n\nthis will give a lot of information about convolution neural networks which are giving lot of surprising outputs in image processing.\n\nyou can also look into below link, It visualizes what your convolution neural network is learning (see this only only after completing above tasks), try to experiment by modifying the models\n\nNow, read about recurrent neural networks (RNN) that are backbone of modern text processing\n\nAfter this, read about the beauty of a new trending block of recurrent neural network ie., LSTM (Long Short Term Memory)\n\nTo go deep into RNN\u2019s read: (It also has a great visualization to understand)\n\nTry to run below code, it is very interesting output from RNN\u2019s written by Karpathy\n\nAfter finishing everything mentioned above, watch this talk (By Naftali Tishby) as many times as you can, Seriously it is has lot of information which is very difficult to understand at once.\n\nNow lets get into something more interesting, GAN(General Adversarial network). It is super awesome concept, here one network evaluates another network.\n\nStart with Vanilla GAN, try to understand the code and watch the output:\n\nKnow about Variational Auto Encoders(VAE), Same like in GAN start with Vanilla VAE:\n\nYou can also read about few more concepts in deep learning:"
    },
    {
        "url": "https://medium.com/@ajaysreeram/be-reactive-with-java-c7a6eb30e4da?source=user_profile---------2----------------",
        "title": "Build a Reactive code \u2013 Sreeram Ajay \u2013",
        "text": "Just imagine the time of you waiting for the bus at bus stop or waiting for the pizza sitting at your favourite pizza shop.\n\nWaiting yes, Waiting makes you feel the worst right. So how bad it is of an application waiting for the reply from an another application.\n\nWell, The only way we find for an application to do multiple things at a time is threading, yes threading works well but we don\u2019t even know why our application getting hanged up suddenly.\n\nYes,If you are using threading you might have faced the problem that \u2018it was working fine till now but suddenly stopped working, you don\u2019t even know why and what had happened to that now\u2019. In most of the cases, It is because improper flow of threading.\n\nOne more problem with threading is Exception. Let me give you an example, when we are dealing with multiple threads, the question is how do you deal with exceptions? if you were to handle an exception in threads and imagine you have 1000\u2019s of threads running and at some point one time 164 threads failed. You know, if you want to know how that feel. Its like running a day care center and half the children immediately starts crying at the same time, what do you do? you just have to call for help, its like I don\u2019t know whats going on everybody is crying right now. So, we as a developers need to concentrate not only on application flow but also on multitasking flow which might finally screw up the product.\n\nWell, to help to get ride of these problems we have something called Reactive programming.\n\nReactive programming is a really nice step forward from functional programming, let me explain why i say that. when it comes to functional programming we really care about two things.\n\nwell when it comes to immutability we wanna be able to avoid constantly mutating stuff, so for example:\n\nthis is imperative programming,well what if we could write this code in a functional way:\n\nIt removes all the accidental complexity that we would normally deal with in our code and also time and effort in the long run itself. So, this would give us an idea about how we could do it.\n\nThe other thing we talk about when it comes to functional programming is, we talk about as Higher-order functions.\n\nHigher order functions are those where we can pass the function to the another function or we could even create function and return function from the function.\n\nIn functional programming we can enjoy function pipeline and lazy evaluation. Reactive programming is a beautiful next step to the functional programming, I feel that reactive programming starts where functional programming leaves us.\n\nwe can approach Reactive programming using different libraries one of them is \u2018ReactiveX\u2019 yes it is reactive and it is available for 10+ languages. RxJava is ReactiveX java library. Lets us see how we can use it.\n\nRxJava has Observables, it is nothing but data flow/data stream, think of observable as a little tank you can open and water begins to flow through it. Think of observable as a little radio that you can turn on and start listening the stream.\n\nEven Iterator can do sequential streaming, but the question is whats the difference between Observable and an Iterator, well the very first difference is in the case of Iterator, they pull the data one at a time. But Observables are different, here they push the data when the data is available."
    },
    {
        "url": "https://medium.com/@ajaysreeram/design-patterns-using-lambdas-in-java-89a6d8d6d004?source=user_profile---------3----------------",
        "title": "Design Patterns using Lambdas in Java \u2013 Sreeram Ajay \u2013",
        "text": "Let us look at one more interesting pattern say Decorator pattern.\n\nWe normally don\u2019t like to use decorator patterns as it looks like:\n\nthis looks pretty heavy weighted, needs a lot of work and lot of objects being created and we kind of loose interest in the mid way. Before discussing about decorator patterns let us discuss about Function for a minute.\n\nthis `inc` is a lambda function that simply increments the given value, let us use this increment function, for that we have to implement a method say \u2018doWork\u2019.\n\nnow if we wanna double the value, we can simply call doWork like this:\n\nYou might ask what if we wanna increment and double it, is it possible to make use of this?\n\n Absolutely yes, we might do something like this:\n\nhere we have a garbage variable, with the name temp, it says that it is a temporary variable, which is not really needed. so how do we eliminate it?\n\nIn this way we can do a nice chaining of objects very easily. Now we can use this features very effectively. let\u2019s take a look at a very nice example of what we can do to maximize the benefit of these kind of operations. To illustrate that let us create a class \u2018Camera\u2019.\n\nin the above code we are not doing anything much, just creating an object and printing it. Now let us modify the class Camera further:\n\nhere we have just created a method setFilters that has var arg filters. But for now to begin with we have a filter that does nothing but returning everything it gets unchanged, and we also have implemented snap method that returns input parameter by applying filter that is indicated.\n\nNow let us update the constructor as it is calling setFilters method, it might need parameters to send to setFilters\n\nWell, if we see setFilters we have arg parameter, if we have list, we can use list.stream and reduce it to single filter, but now we have array not a filter, so we use Stream.of to reduce array to a single filter.\n\nCool!!! this actually does work well, but let us make it more concise:\n\nNow the camera class looks something like this:\n\nSo now we have our code built up nicely, let\u2019s do something nice\u2026 \ud83d\ude0a\n\nAs you can see in second case , it is actually 171 not 120, so we had applied a little transformation here. We can now do multiple operations quickly and conveniently with a small change:\n\nSo we can see how we are bringing in multiple things together. If you notice this is very concise as well, now we can see how easily we can implement a decorator without any chaos or clutter and the noise that we formerly used to."
    },
    {
        "url": "https://medium.com/@ajaysreeram/understanding-genetic-algorithm-5a414c19261e?source=user_profile---------4----------------",
        "title": "Understanding Genetic Algorithm \u2013 Sreeram Ajay \u2013",
        "text": "Don\u2019t worry much about understanding this Algorithm, let us apply it to create one simple Application so that we can understand it better.\n\nThere are finite number of ants starting at some place, their goal is to reach a sweet (target) located at some location. This can be done using Genetic Algorithm with several iterations,\n\ni.e., each time an ant knows some information about the location of sweet from some random ant, it will share that information with its children and dies. In this way every time they get to know more information, they will start moving towards the location. Let us implement the code for this using html5 and JavaScript, canvas will act like space in which both sweet and ants are present.\n\nFirst of all, let us create an Ant:\n\nOops! I am not that good at designing, so for now, let us assume a rectangle as an ant.\n\ndraw_ant will take three arguments in which x,y represents position of an ant in canvas, \u2018a\u2019 represents angle at which ant is looking.\n\nRotate() \u2014 will rotate canvas cursor in a given angle, which is the direction in which the ant is looking.\n\nFill() \u2014 will set color to draw with opacity 0.5 , opacity is taken as 0.5 to observe if one ant is moving over another ant.\n\nRect() \u2014 this will ideally draw rectangle with height 25 and width 5 at (0,0) but it draws at (x, y) with \u2018a\u2019 rotation in canvas as we have already translated to (x, y) and rotated with an angle.\n\nWow! we can now use this function to draw an ant whenever and where ever we like to."
    }
]