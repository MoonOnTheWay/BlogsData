[
    {
        "url": "https://medium.com/pooling/three-cheers-for-sidekicks-f23980e02393?source=---------0",
        "title": "Three cheers for sidekicks. \u2013 pooling \u2013",
        "text": "Little helpers I use everyday that solve the little big problems for me.\n\nSidekicks don\u2019t get all the attention. But at times they make all the difference. For me they are the perfect analogy for small tools. I love simple tools. Combine simple with efficient and elegant and you can be sure I\u2019ll give it a go. This time I am focusing on really simple yet important tools that I use daily.\n\nThey all have a slightly different purpose, are easy to use but have a huge impact on my work.\n\nProductivity is a precious little flower. It takes effort to gain it but is so easily lost. Whenever I start with a task that requires a really intense level of focus that I just can\u2019t reach with Spotify I start the Noisli browser extension. Noisli lets you combine different sound effects like wind and rain and many more until you have set a soundscape that helps you to concentrate. If you have a favourite you can save it for quick access. Nothing beats a pomodoro with the sound of birds chirping in the woods while it is raining for me.\n\nDo you use the \u201cread mode\u201d on your iPhone a lot? Mercury Reader might be just the right thing for you. It removes ads and clutter from websites and only leaves you with text and content-images. It really helps if you are looking for a clean and uncluttered reading-experience.\n\nOf course sometimes procrastination is just a bit harder to beat. Pomodoro timers don\u2019t prevent your mind from wandering around work that has to be done at times. For days like this I use Timewarp. Timewarp is a Chrome extension where you can add pages you want to avoid while working. The coolest thing for me though is that you can also tell Timewarp where to go when you are still trying to check on twitter for example. I really get a lot more stuff done when I have Timewarp in use.\n\nWriting is hard. Good writing is even harder. I am not saying that I am a good writer. But if you ever thought that I don\u2019t suck at writing I have to say it is due to Hemingway. Hemingway tells you if your writing is overly complicated and uncomfortable to read. Give it a go.\n\nDuet is perfect for you if you need an extra monitor without the hassle of getting you know\u2026 an extra monitor. And you certainly wouldn\u2019t carry a second monitor into a cafe I hope. After you have installed the app you can simply connect your iPad as usual and start duet. Et voil\u00e0. And the coolest thing: You can still use touch gestures.\n\nWhen I heard \u201cmobile VPN\u201d I almost lost it! Their own explanation works best here I think.\n\nGo check it out.\n\nThanks for reading this! If you have found really cool little helpers yourself feel free to mention them in the comments. I\u2019d love to check them out. Cheers!"
    },
    {
        "url": "https://medium.com/pooling/its-tool-time-part-2-e16b11185aa3?source=---------1",
        "title": "It\u2019s Tool Time! Part 2. \u2013 pooling \u2013",
        "text": "Observations during our hunt for the \u201cright\u201d prototyping tool.\n\nWhen it comes down to prototyping everyone has different expectations. Some people love to code while others would instantly cringe if they would have to write a single line of CSS. Some people need lower fidelity while others want it to be highly polished and refined. Or they might need both at times depending on the client they are working for.\n\nSo it is hard to tell what tool is the right one for you and your team.\n\nFor some tools you might need special skillsets. Some might lack that one essential feature you need. Others might overwhelm your teammates with complexity. At ion2s we are currently facing the same issue.\n\nThis is part of a series where I share my thoughts on a variety of different prototyping tools that I\u2019ve used so far. Check out part 1 here if you haven\u2019t already.\n\nAtomic is a tool built in Aotearoa (New Zealand) that I have come across a couple of months ago. I use it for my personal projects a lot. Like InVision it is also Webapp-Based and you don\u2019t need to install anything.\n\nStarting is simple. After you logged in you see an overview of your projects (if you already have any). You can set up a new one and then add a new prototype to that project. When you start building your prototype you jump into a kinda-like-photoshop-on-a-diet interface.\n\nOn the left you have the tools you are working with; rectangles, oval-shapes, lines, text-elements e.g. as well as an overview of your pages and layers.\n\nIn the center you see the canvas and the really cool history-slider. On the right you find another panel where you can alter the canvas size and appearance of elements. You can also add some custom CSS if you like. But you should rarely need that. Most CSS like background-color, borders and shadows e.g. will be added by using the GUI."
    },
    {
        "url": "https://medium.com/pooling/build-your-product-not-your-tools-33c34facdb7a?source=---------2",
        "title": "Build your product not your tools! \u2013 pooling \u2013",
        "text": "Build your product not your tools! If you want to build a house, do you start by constructing the excavator?\n\nImagine you want to build a house. You certainly won\u2019t build the required tools for that. You\u2019d rather take some existing tools and and get your hands dirty. This seems to be obvious, doesn\u2019t it?\n\nWhen people start building a new web based product they often do the opposite. They start building their own custom framework or libraries.\n\nIs this a wise decision? Here is my point of view.\n\nThere might be several reasons for building an own framework/library. If your product is actually a framework, then stop reading and continue coding. ;-)\n\nSome developers believe, that they have to craft everything from scratch and with their own bare hands. Otherwise they are poor developers and do not deserve a dime. Come on! That\u2019s bullshit. I think it\u2019s the other way around. A developer can show good skills by choosing an appropriate framework. He/she has to evaluate different frameworks or technologies and give good arguments why a certain framework is a better fit for the given requirements.\n\nAnd there is more. The developer has to understand the philosophy and the concepts of the framework.\n\nIf experimentation and curiosity are the motivation of writing everything from scratch then think twice. Do you want to run an experiment in a production environment with paying customers? And remember you also have to maintain that piece of code.\n\nLet me ask you a question: Would you try an experimental drug?\n\nSome may argue, that deadlines are too tight and that evaluating and learning a new framework is too time consuming. From my point of view this is also an invalid argument. Here are the reasons: If you develop a product without a framework you have to code a lot of stuff, that has been done millions of times. You might have to code ORM, authentication and authorization, validation and much more. This will take you a lot of time, time you\u2019d rather invest in finding and learning your framework.\n\nIn fact frameworks will save you a lot of time. You do not have to build common functionalities. These have been implemented and tested by the community that\u2019s actually responsible for the framework.\n\nIf this really is the case, well then you have to build everything from the get-go. But there are so many existing frameworks and libraries written in so many different languages, based on so many different technologies. Is your product really that special and that much of an edge case that you can not build upon existing solutions?\n\nRemember your initial goal. You want to build a new product, not a framework or library. That\u2019s most important. Convince your boss that it is worth finding appropriate frameworks before starting to code. Here are some more arguments:\n\nSome of the arguments are also applicable for other tools. These are e.g.:\n\nThey all shorten the development process and help to maintain the product in the future.\n\nFrameworks and libraries are not limited to server-side applications. They exist for client-side and testing purposes, too. To name a few of them:\n\nIf you build a product then use one of the fantastic frameworks or libraries on the market. There are frameworks for almost every purpose. They help shortening the time to market and you\u2019ll produce a product of higher quality.\n\nIf you really want to build a framework/library, then do it in your spare-time or as a side project. And there is also the possibility to contribute to existing open source frameworks.\n\nIn one of my current projects we decided to use the Laravel PHP Framework to build the API. In a future blog post I will explain why.\n\nThere are certainly a lot more arguments. Some readers may also disagree with my point of view. Feel free to leave a comment and tell me your opinion."
    },
    {
        "url": "https://medium.com/pooling/how-we-kept-the-project-management-to-a-minimum-4feec025ff3d?source=---------3",
        "title": "How we kept the project management to a minimum. \u2013 pooling \u2013",
        "text": "How we kept the project management to a minimum. Scrum or Kanban? Trello, Redmine, Google Docs? A detailed plan or some shots in the dark?\n\nRight after the idea of pooling was born and moulded into a brief concept I was confronted with the question of how the time for planning etc. could be reduced to an absolute minimum. And how could we estimate the efforts while doing so.\n\nWe did research, and pretty much all the details on the job.\n\nThis gave us the benefit of being able to start right away after our boss gave us the \u201cgo\u201d and not wasting any time with the \u201cifs\u201d and \u201cbuts\u201c and reaching actionable results incredibly fast.\n\nWe took care of the details when they mattered. Which means when we wanted to built them.\n\nWe set up a simple Excel as our production plan. It had a x- and y-axis. The y-axis listed all features we were planning to built, separated into the different parts of the product like API etc. The x-axis showed the order in which we were planning to implement them so we could see the correlation between them.\n\nOur goal wasn\u2019t to estimate any due-dates with this. This wouldn\u2019t have made sense anyway because we have other project obligations besides pooling.io at ion2s.\n\nNo our goal was simply to keep track of the progress and see if any changes in our plan could backfire or stop the progress. But there was another benefit. Due to the roadmap we were able to roughly estimate the time needed to realize the project.\n\nWe did that as a Google Spreadsheet by the way.\n\nThe advantage was crystal clear. Everybody could work on it, we could work asynchronously as well as synchronously and leave comments for others.\n\nAfter we had the allowance for the project plan we started to plan the details. Each week.\n\nOnly for that week. That\u2019s it. Not more.\n\nWe only took the parts of the plan that would fit into the week of our development-team and discussed further details for the first time then. Whether to use this or that UI-Pattern for this certain feature.\n\nBefore that we also decided what tool to use for our plannings. We picked trello because we wanted to have a simple tool that is not overpowered, free and nice to use.\n\nWe used pivotal tracker before, which I personally like. But we wanted to try something different this time and see how far we could come without paying.In pivotal you hit a paywall pretty fast.\n\nWe use redmine in our company as well. But I see it as a ticketing-system and not really a tool for planning. Also we didn\u2019t want to spend time on any customization-efforts. And without that it is a pain in the ass if you are going to work collaboratively. Besides not being the fastest and easiest tool out there.\n\nAs mentioned before we chose trello and sprints. But we neither chose scrum or kanban.\n\nI would rather say that we combined the two and ended up with scumban. Here is a short break down of how we did it.\n\nLong story short. We saved A LOT of time. The team was really happy because they could work autonomously and weren\u2019t micro-managed.\n\nWe still faced phases in our project that forced us to hit the breaks here and there.\n\nOne time we had to make some changes to our initial concept the other day we added something to our plan or we had a new idea that got us excited. Sometimes we did that stuff in a real meeting and other times we just had a brief talk while making coffee. But we had the time to do so thanks to our really lean approach.\n\nThe described approach is the perfect fit for us. We still identify things that we can shorten here and there and that is fine too. But we have to admit that we are basically our own client currently and have no other stakeholders to deal with than ourselves. Sometimes we weren\u2019t as fast as planned due to client work that we still had to manage besides our own endeavours.\n\nIf I were about to manage a product design team for a client we would spend some more time on estimating the overall efforts of course to get a more precise outlook and to identify possible roadblocks or white spots within. But honestly I would still try to keep all that pretty marginal as well to keep things agile. I am aware that our approach might be not ideal for client-work at all but if we will develop another product for ourselves I\u2019d probably handle that matter with a similar approach.\n\nThank you for reading this and if you have any thoughts on that topic feel free to leave a comment."
    },
    {
        "url": "https://medium.com/pooling/its-tool-time-f3be5b4a69cd?source=---------4",
        "title": "It\u2019s Tool Time! \u2013 pooling \u2013",
        "text": "Observations during our hunt for the \u201cright\u201d prototyping tool.\n\nWhat a time to be alive! Dozens of tools out there nowadays fighting for designers attention and affection when it comes to protoyping. A great time to be alive. At ion2s we are also in need of some magic here and there to proof our concepts and ideas to our clients, bosses and ourselves. I love to check out new tools so I\u2019ve tested different products trying to find the right one for us. My personal preferences weren\u2019t part of the equation. I can code for example. But many of my co-designers can\u2019t. Of course I tried to find a tool that would work for each one of us. Every designer has her/his own preferences or way of doing things too. Also they might be bound to certain processes within the company they are working for. So this series\u2019 aim is neither to conclude the one tool out there that you should use. Nor is it intended to tell you what I like or dislike about them in the first place. I rather try to present a guideline for your decisionmaking by showing how they work and what skills your team needs to use their full potential. Our first part of the series deals with InVision. InVision started a couple of years ago and took the design-world by storm. Whether it is their awesome app itself or one of their freebie tools. People love InVision. Inside the webapp you start with choosing the device you are designing for. After that drag your screens into the project; all assets will be added in a matter of seconds.\n\nAnother way would be to install CRAFT. A powerful plugin that allows you to sync your files directly from Sketch or Photoshop. This is a smart feature hence you can\u2019t change the actual layout within the webapp any further than adding a fixed header or footer. So I recommend you to give it a try. Add sections to your project if needed to keep your project nice and tidy and you are ready to go. You can rearrange the screens to your liking and sort them into the right order. (If you haven\u2019t named your exports in a way that will determine the order already ; don\u2019t know if it\u2019s a thing. That\u2019s how I do it. ) You can now add hotspots to every screen. Every Hotspot can be assigned with a pre-styled transition and a destination. You can select a gesture as well if you are designing for mobile. These gestures include all common actions like tap, double-tap and so on. You shouldn\u2019t miss a thing. Adding hotspots is easy. And so is creating self-initiated transitions from one page to another. (For screens that should appear or disappear automatically \u2014 think of notifications for example)\n\nAs expected you can share your work easily. Your Co-Workers can comment on your work easily as well and the onboarding leaves barely any questions. Should there be any questions left on how to exactly achieve a certain behaviour check out this page. For me InVision works perfectly and is a fun tool to use for prototypes that do not try to emulate too complex features. So who is it for? Because InVision works with all kinds of image-formats as well as Photoshop- and Sketch-files you don\u2019t have to be a designer to use it. Developers e.g. can simply export their screens out of any tool they might use for wireframes and upload them into their project. So InVision is suitable for all levels of fidelity and you need zero lines of code to craft a nice and simple prototype. However the lack of layers within InVision leads me to think that it works the strongest with CRAFT Sync. Otherwise you will have to re-upload your screen for every minor tweak. But that should be okay too. And people might even appreciate it since it adds to the simplicity of InVision. If you need more complex custom transitions though you\u2019ll have to use GIFs. Which means: If your projects are in demand of more \u2018sophisticated\u2019 effects you should have someone in your team capable of handling the timeline in After Effects or Photoshop. UPDATE: The folks at InVision have some news concerning more complex animation. Read on here. Also if you need \u2018real\u2019 form-inputs in your prototype InVision is not the right choice for you. InVision is a great tool for everyone who is in need of a not overly complex tool to create a simple non-responsive Prototype. You need zero lines of code to make it work. It is basically as simple as creating a PowerPoint-presentation. Sharing your work is easy as well. It has it\u2019s limitations. A program for the creation of your designs is still needed since you can\u2019t create them inside InVision. The integration of your designs whether as an image or straight from Sketch or PS works like a charm though. You might also need someone to create GIFs to simulate fancier non-standard transitions. If you try to convince people that your prototype is actually NOT a prototype but the real thing you should consider another tool from one of my follow up post on that topic. I hope that was helpful to some of you. In case I have missed something or have gotten something wrong, feel free to holler at me."
    },
    {
        "url": "https://medium.com/pooling/ditching-adobe-sketch-and-figma-altogether-b9f3d2087d9d?source=---------5",
        "title": "Ditching Adobe, Sketch and Figma altogether? \u2013 pooling \u2013",
        "text": "My experiences with designing in code.\n\nA topic that regularly comes up and also sparks some controversy here and there is the question \u201cshould designers code\u201d? Or is this or that tool the answer to all designers desires.\n\nMy opinion: people should work the way it suits them best and so we are not going to argue here and provide our \u2018definitive\u2019 answer to this topic. I simply want to share my experiences while trying out designing in the browser on a real project.\n\nI was kind of scared at first because I am more familiar with the sketches and photoshop first approach. I have tried this on private projects before but never in a \u2018professional\u2019 project. I still wanted to try this and luckily ion2s gave me green light. So after some initial sketches that were made weeks ago to talk about the interfaces and the information we wanted to display \u2014 I barely use wireframing-tools \u2014 I jumped straight into Atom.\n\nDon\u2019t do this without Grunt or Gulp and without browser sync. You\u2019ll be sorry otherwise. The key for this to work is speed. If you have to refresh the page every time you write a new value into your sass or css it will be a pain in the ass.\n\nYou can find a really nice tutorial on how to setup that stuff HERE.\n\nWhat I really liked about this is that in HTML the \u201cblank canvas\u201d isn\u2019t all that intriguing compared to Photoshop. You just start to write the basic structure. I personally like to hammer down the structure before writing a single line of css. So I just did that. As far as we knew what was going to be on the page.\n\nThis leads us to another thing: It was really really cool to see how our product evolved with every sprint. And how it kind of happened organically. Because we\u2019ve built something that already was usable and realized \u201cwoah \u2014 we need this too\u201d or \u201cwe totally forgot about that\u201d.\n\nThat goes along with the credo of eating your own dogfood. If we had built something that just wasn\u2019t working the way we intended it to, we noticed immediately. So our plannings influenced our work and our work influenced our plannings which felt really nice.\n\nOne big benefit was that we have never designed something that would cause problems. You can build it or not. There is no middleground. And you can experiment a lot and fast. Throw in another button style, include rules for their :hover- and :focus-states and there you go. And you actually see if it works or just would have been a nice photoshop-comp. \n\nResponsive-behaviour. It\u2019s there or it is not. I learned that a lot of things that potentially cause problems later on happen to come up earlier when you just start building it instead of arranging layers in your favourite design-tool.\n\nAnother gain was that I realized that it is a really good indication of an overly complex design when your code starts to get too bloated. If it is really hard to build maybe it simply is not that good.\n\nOf course not everything went THAT well and I have hit some problems here and there.\n\nDue to the fact that we were developing in weekly sprints the time for decisions was sometimes a bit too narrow trying to get everything done on schedule. On the other hand there were situations where I was kind of lost in details, hacking and wasting time focusing on coding problems more than on the design aspect of something. And downscoping a sprint still feels like a bit of a failure to me personally (i know \u2014 silly).\n\nAnother downside was that experimenting with different styles here and there lead to some inconsistencies we still have to fix before we\u2019ll go live.These might be some caveats that you\u2019ll have to keep in mind. Everything comes with a price I guess but I still wanted to mention this. \n\nAnd there were some situations where we used tools like Atomic (which is great btw) for rapid prototyping simply because it was faster to emulate a certain behaviour than to code it if we just wanted to try something different.\n\nMy overall conclusion is that designing in the browser is definitely worth a try if you haven\u2019t already. I remember how limited I have felt outside of Photoshop at first. \n\nThe more often I jumped straight into coding the more I realized a shift in my thinking.\n\nThinking in code rather than layers while designing started to open my eyes towards possibilities that I couldn\u2019t have shown in photoshop anyway and ultimately making me a stronger designer.\n\nThank you for reading this and if you have any questions or remarks feel free to hit me up."
    },
    {
        "url": "https://medium.com/pooling/why-its-crucial-to-focus-on-your-product-s-boring-features-first-98ace5e1be55?source=---------6",
        "title": "Why it\u2019s crucial to focus on your product\u2019s boring features first",
        "text": "Do you remember the moment when you had a great idea for a new product? Most likely you were excited about the idea and thousands of features started to pop into your mind. Maybe you talked to a friend or potential co-founder about your product idea and he started to feel the same excitement. You probably looked exactly like the kids in the image \u2014 discussing the coolest features while the product grew and grew. And there you have it. Without knowing it you and your partner find yourself tangled up in the scope creep trap.\n\nI was once involved in a startup that was totally excited about their product and the millions of (different) possibilities. For quite a few years we tried to reach our goal and build this product. But we never made it. We got lost in complex features. We started developing Feature A but ditched it mid-development so we could start with even sexier Feature B. Next we threw most of the code away and started over.\n\nLater we started developing Feature D but during development Feature B was rethought, then kicked and to make things worse Feature D which had dependencies to Feature B was also obsolete. Long story short: We never finished.\n\nCurrently my team and I are working on a new idea called pooling.io. Since we have gained more experience in several business as well as private projects we got better in avoiding scope creep. So this is how we started with pooling.io:\n\nWe defined our essentials and the core of our product and all necessary functionalities that are required to make it work. The result of developing the essentials is a MVP (minimal viable product).\n\nTo be honest, focussing on the essentials is tough, especially when you are excited about cool and smart features that might change the world. However focussing on the essentials is the most important part though it is really really boring. We know that.\n\nHere is an example: Imagine you want to build a new product for stock photos. You are super excited about this idea. You have smart features in mind that will kill all the existing competitors in the market. (Of course ;))\n\nIn this example the essential features seem obvious.\n\nThese essentials are the base of your new product and you need them to finally build your super smart feature that\u2019ll blow everyone away. But these features are not very sexy. They are nothing new or \u2018disrupt\u2019 anything. They have been done millions of times. Of course you want to change your focus towards the more exciting features when you read the list of essentials. But wait \u2026 Look at it again.First of all you should reorder the list because there are certain dependencies:\n\nWhat you have now is a list of logical steps towards your goal. By following this path you\u2019ll gain motivation because you know that you\u2019re heading towards the cool feature.\n\nAnd there is another secret in this list. Because basic features like signup & sign-in are so common there are a lot of ready to use solutions.\n\nPlanning your essentials first has crucial benefits.\n\nThe sooner you get the basics or \u2018boring\u2019 features out of the way the earlier you can dig into the more interesting stuff.\n\nLet me know what you experienced concerning scope creep and losing focus."
    }
]