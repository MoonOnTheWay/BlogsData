[
    {
        "url": "https://medium.com/bcgdv-engineering/getting-started-with-ethereum-as-a-developer-af20d78c49f?source=user_profile---------1----------------",
        "title": "Getting started with Ethereum as a developer \u2013 BCG Digital Ventures Engineering \u2013",
        "text": "As a developer, one of the first obstacles to overcome when starting a new platform is to understand the framework and how your projects are structured. This is followed by understanding how to deploy code and secure code in a test or production environment.\n\nThe goal of this article is to get your started as a developer on Ethereum. We will aim to familiarise you with the tools required to setup your development environment and to deploy a smart contract on Ethereum. You don\u2019t need to have an understanding of Solidity or how to write a smart contract at this point. That is a topic for another day. We will show you how to:\n\nBefore we get started, let\u2019s get an introduction to the terminology and the tools we are going to use.\n\nTruffle \u2014 refers to the Truffle Framework \u2014 this is the most popular framework for getting started with Ethereum development. It will make your life a lot easier by handling, compiling, linking, deployment and binary management. It also handles automated testing of your smart contracts among other things.\n\nIn order to create and deploy your smart contract, you need to have a blockchain to deploy and test your contract on. Here you have 4 options here:\n\nWe are going to cover the second and third points in this post. Future posts will cover connecting and deploying to a public testnet and to production, so keep an eye out.\n\nHowever, it is recommended that you first, test in a simulated testnet, then in a private testnet, before going to a public testnet and then finally into production. There are a few reasons for this:\n\nValidate that you have installed truffle properly by running on your console or command line. If you see an error something went wrong.\n\nThat\u2019s it! You should have everything you need to get started as a smart contract developer.\n\nBefore we start we should take a moment to discuss the advantages and drawbacks of using the Truffle Framework. Drawbacks include not knowing what\u2019s going on. Using Truffle is simple, it completely obfuscates what it takes to compile and deploy a contract from you. This may not work for some projects and will force you to have to learn the compile and deploy process yourself. Advantages include, not needing to know what\u2019s going on \ud83d\ude00, checking dependencies before deploying and Truffle automatically remembers where the last deployment was made to.\n\nChoose a folder for your new project. Choose a directory and path without any spaces in it. A space in the path will probably not cause any issues, but some scripts can have difficulty with it.\n\ncreates a truffle project that points to a blockchain on your computer. This project comes with a sample contract and some tests. If you wanted an empty project, you could run .\n\nAfter running the project generated should look something like this:\n\nIf you look inside you\u2019ll see where a your project currently thinks an ethereum node to deploy to resides.\n\nThere is only one environment configured called which points to on port . You can create paths to other environments here if you want.\n\nAll the smart contract(s) reside under the contracts directory. Compiling and deploying the contracts is very straight forward.\n\nwill work, however, will error out since there is no blockchain running on localhost at present.\n\nAs mentioned earlier there are 3 main ways you can do this. Whichever way you choose the actual compile and deploy process will not change and you will still use to deploy to the chain. You can just configure the environment you want to deploy in and then deploy to the environment using it\u2019s name . For example, our file reads:\n\nYou can deploy to the environment using .\n\nThis is by far the simplest way to get started.\n\nOpen a console separate from the one you have been working on so far and run the command . The flag makes your testrpc run in deterministic mode. This means that all mnemonic generated along with all the test wallets and private keys will be the same each time. You can try running with and without the flag to see this behaviour.\n\nOnce testrpc is running go back to your project directory and run . You should see the console running output a bunch of text showing that the contract was successfully deployed. Once the deployment is successful, you can confirm that your contract is working by running which will execute the automated tests in your sample project.\n\nOnce you have done this the next step is to test your contracts in your own private testnet.\n\nBut before we setup our own private testnet, let\u2019s talk about the benefits and drawback of using Truffle.\n\nNote: if you\u2019re using a Debian based Linux distribution, make it Ubuntu. I tried to setup Geth on Linux Mint and kept coming up against issues. Go1.7 is recommended, however, I was able to get things up and running with Go1.6, I would recommend taking the extra step to setup Go1.7 just to invite good tides.\n\nBefore we setup our own private testnet, we should create a genesis file. A genesis file is the starting block for your chain. As such, it contains the initial allocation and the configuration for your chain. A genesis file is not required and you can always use a predefined one which is provided if you run with the option. More on in a bit. For now, lets assume you want to use your own file.\n\nExplaining the contents of the genesis.json file\n\n\u2014 this is the difficulty of the cryptographic function, set this to a low number to get the block to mine fast, set it to a larger number for a more realistic or slow mining result.\n\n\u2014 this is the maximum possible cost of mining a block. Set this to a high number for testing or development purposes.\n\n\u2014 this is the ID of the chain. In practice setting this can help provide simple validation and provide protection from playback attacks (simply put, this is when an unauthorized acts as the original sender).\n\n\u2014 the second major release of Ethereum was named \u201cHomestead\u201d. The first release was called \u201cFrontier\u201d. Zero-value here means that you are using Homestead.\n\n\u2014 as the name implies, this is the initial allocation of Ethereum (the cryptocurrency) to wallets. The 40-character hex string is the wallet address and the is the amount of ether allocated to each of the wallets.\n\nAs mentioned, the genesis file is not required and you can always use a predefined one which is provided if you run with the option.\n\nIt may be a good idea to familiarise yourself with the genesis file as the preallocated genesis file may not work for you, or just because you want more control over your project. Also, you probably want your initial wallets setup before you initialise your blockchain.\n\nIt\u2019s also worth noting that as mentioned in this Ethereum blog post there is a python tool available for generating your own genesis.json file.\n\nThe initial genesis file will have to have nothing under the section because we haven\u2019t created any accounts yet. We\u2019ll have to initialise the blockchain, then create a new account on it and then run the initialisation command again. The file I\u2019ll be using is the one below.\n\nWe have now created a chain and created an account.\n\nNote that the balance amount is in quotes .\n\nYou should now have a new chain with pre-allocation to the account mentioned above. You should now check what accounts exist on your chain and assign a default one:\n\nWe will now launch the geth console with proper configuration, assign the account shown above as our default account and check our Ethereum balance.\n\nWe have now successfully created a blockchain, created an account on the blockchain and assigned it a million Ethereum.\n\nIf you want to know more about the flags on the command, take a look at this page. Just a word of caution that the commands shown on that page are outdated and may not work. will make this blockchain a private one and the only way to for other nodes to connect to you is for them to add you manually.\n\nIf you\u2019re running the console, your node will automatically connect to nodes with the same genesis file and networkId. If you follow the same setup instructions on another machine or even in an other directory you should be able to create a second node.\n\nSince your nodes are not discoverable, you need to define your static nodes. Static nodes are nodes that you always want to connect to. Your node will also automatically re-establish connection with these nodes if the connection is ever terminated.\n\nStatic nodes contain information such as IP address/domain and port to connect on as well as the public key of the node to connect to. You need to create file and add the enode URI to it. You can find your encode URI in the geth console after launching it:\n\nExit the console and then, create a file \u2014 a sample file is shown below. Make sure to replace shown above with the IP address or domain name of your machine.\n\nMake sure to add the URI for all the nodes you want to connect to. This includes your own node. Copy this file to every node in your private network. Now when you run the console your nodes should connect.\n\nSince this is not a simulated environment, you will need to enable mining on your nodes, otherwise any contracts your deploy or Ethereum you exchange will stay in a pending state.\n\nNow that we have our own private testnet setup. We can compile our smart contract and deploy to it. With the console running, navigate to your smart contract project directory. First, check the file to make sure you have an environment configured pointing to your private testnet and then compile and deploy with truffle\n\nThat it! You now have a private testnet setup to test your smart contracts.\n\nGive us a \ud83d\udc4f\ud83d\udc4f\ud83d\udc4f if you enjoyed this post it will motivate us to put out more great content.\n\nYou made it to the end! You\u2019re awesome! We should hang out more often! To learn how to build great app and dApps, follow BCG Digital Ventures Engineering, BCG Digital Ventures and the author of this post, Ali Muzaffar."
    },
    {
        "url": "https://medium.com/bcgdv-engineering/to-build-a-quality-app-you-must-consider-these-8-points-c1ea9befc791?source=user_profile---------2----------------",
        "title": "To build a quality app, you must consider these 8 points",
        "text": "There are 8 areas in app development that I have found are often ignored by designers and developers. This may be because they would rather go with an implementation of convenience, or because they are \u201cmicro-interactions\u201d and just not sexy enough for anyone to waste any brain power on when you are pressed for time or you have short deadlines. Some of these may not come across as a surprise to you. This is because Google has been telling us for a while now to not ignore these areas. What is interesting though, is that as I began to list them, I realised that a lot of these areas are related. I may even go so far as to say that these are some of my peeves when it comes to app development.\n\nWithout any more delay, the areas are:\n\nSure, while there is data to show on the screen, the screen looks great. But, what should we do on the screen when:\n\nI think it\u2019s fair to say that I have never had this specified to me without having to chase someone up. The question here is, when some action is taken on a screen that requires loading of a whole new screen. Should I transition to the new screen, then load the new data, or should I load the data first, presumably showing some loading indicator and then when the data loads, then transition?\n\nThis question is related to #1 because if you transition before loading data, then what should appear on the next screen while the data loads? That screen will presumably be empty.\n\nThere is a new school of thought that says that you should \u201coptimistically\u201d or \u201cpredictively\u201d load data in the background in anticipation that the user may click on a link. If you can do this, it solves the issue altogether, however, if you take this approach, beware that you will smash your users data allowance. Perhaps a better idea would be to check if the user is on Wifi, then load the data in the background before the user clicks. In this scenario, you\u2019re back to the empty state problem and what if the data hasn\u2019t finished loading in the background? Where should it be loaded? This takes us nicely to our next point.\n\nTo be fair, this is often specified, but since designers can\u2019t really predict where all I\u2019ll need loading indicators, the information is far from perfect. Nothing is worse than platform default loading indicators as they often don\u2019t fit the UI and design pattern of your app. Android tried to address this by allowing your widgets and drawables to be tinted, so if you use an indeterminate progress indicator, it can be tinted to the same colours as those used in your app.\n\nThere is also the question of whether a loading indicator should be inline or blocking (more on this in point #5). This really does matter at times and can make the difference between a great user experience and an average one.\n\nI still remember the first time someone asked me to make sure the loading indicator was on the screen for at least a second before hiding it and to make sure that I wait for at least a second before showing it\u2026 mind blown! It was such a simple micro-interaction, but it made the user experience immediately better. You see, a loading indicator is often shown because the user interacted with the screen in some way. API calls on Wifi can be resolved in 200\u20131000ms easily depending on the amount of data to be transferred. This means, from a users perspective, the loading indicator can seem to flicker on then off. It gets worse when people chain API calls in their app, you can see this flicker several times on a screen. Loading indicators show up when a user interacts with the screen, when a user clicks something, it\u2019s roughly 1\u20131.5 seconds before the user expects something to happen on the screen, so, unless you know that the dataset is large and will take a while to load, showing the progress indicator immediately is overkill. Users interacting with the screen takes me to my next point. To be fair, this implementation can be complex when you think about it. It\u2019s easy to hide a progress indicator in your API callback and then transition to an other screen. It\u2019s a lot harder to hide the progress indicator, wait for some period of time if 1 second has not passed, or wait for 1 more second to make your life easier before using the loaded data to transition to an other screen.\n\nThese days in Android, when a user taps something, the ripple effect on the item clicked is almost expected on Android, or atleast some form of feedback is a must no matter what platform you are on. Yet, I still see buttons and link that show no indication that they were tapped on, or are being held down. This makes the user immediately anxious. If something doesn\u2019t happen on the screen immediately, the user assumes that this is a fat finger problem and taps again. This results in the second issue, what does the disabled state look like for buttons and links? When the user taps on something, to prevent a double tap issue, you want to do one of 2 things. Either show a blocking progress indicator which is an anti-pattern and strongly discouraged. Or you want to disable the button to prevent the user taping a second time. If you choose to disable the button/link/area, you don\u2019t have to change the UI of the thing tapped, but you should definitely think about whether that is needed. If you do disable a button, you also have to keep in mind that you\u2019ll need to enable the button again if an error occurs, or if the user navigates to an other screen, then returns to the first one. You know what happens when a user taps an text entry field? A soft-keyboard comes up. And this brings us to our next point.\n\nI can\u2019t emphasise this point enough. When the soft keyboard comes up, should your screen resize or should it pan? If the screen resizes, will content that previously did not need to scroll, now need to scroll? Is the content on the screen readable when the size of the screen is extremely small? Should the ActionBar/Toolbar still be visible? Because the Toolbar then takes up a lot of space on the screen. There are a whole number of issues that can come up when the screen size shrinks and the issues can be unique to your app or the screen. For example, the Medium app, while editing, keeps the formatting options on top of the keyboard. It would be a terrible user experience if they didn\u2019t. The only tip I have here is that if the keyboard can come up on a screen, test it on as many different screen sizes as you can. Pay special attention to any buttons that need to be clicked or navigated to after the fields are filled out. You know what people do in text input fields? Type a lot, this brings us to our next point.\n\nThis is a solved issue on the web. I don\u2019t think anyone would dare put up a webapp without limiting the size of the text input fields. However, on mobile, while developers are good about limiting what can be input into a field, they rarely limit the number of characters that can be typed in free text input field. Don\u2019t get me wrong, mobile devs will often limit fields like pin entry, username, password etc. However, something like \u201cleave a comment\u201d is often ignored. This often is not damaging as api\u2019s tend to perform sanity checks. This applies not only to the number of characters that can be typed, but also to the how many lines an input field is allow to grow before you have to scroll the text in it. It can be argued that this is often left out because developers are not told what the limits should be. You know what happens when a user inputs a lot more text than you expect? You have to display it.\n\nOften, we get these pretty designs, everything fits perfectly, and then you have this one field that has text either much, much longer than anything in your designs, or much, much shorter. With longer text, should we wrap to multiple lines? How many lines do we want before we truncate? Do you want a soft or a hard truncate? Do you want a \u201cmore\u201d option to show the rest of the text. If your text is centred, does your text look like it\u2019s centred properly? If we wrap lines in centred text, is the whole thing centre aligned or left aligned. How does the rest of the screen flow in all of these conditions?\n\nWhile the problem with long text is obvious, problems caused by short texts are often not. Having text shorter than expected can make a screen look empty. It can cause other elements on the screen to shift, or if you are scaling text to fit, cause gigantic size text. If you have a wrap content link or button, it can mean that the text or button is hard to click.\n\nThese are just an example of some of the things that I wish people would think more about when designing or developing an app. Do you have a peeve when it comes to app design? Share it in the comments.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/bcgdv-engineering/how-to-publish-a-kotlin-android-library-to-jcenter-1f1875633ece?source=user_profile---------3----------------",
        "title": "How to publish a Kotlin-Android library to jCenter \u2013 BCG Digital Ventures Engineering \u2013",
        "text": "There seems to be a lack of information out there about how to publish an Android library written in Kotlin to jCenter. If you search on how to publish an Android library to jCenter, you may have come across this post that claims to have a solution. While that solution probably worked at some point, it currently does not work. However, it does provide an important hint we can use to fix my favourite way to publish a library.\n\nMy personal favourite post on how to publish a library in Android is an article on inthecheesefactory.com. If your library is written in Kotlin, this solution keeps coming up with an error. This post is about what changes you need to make, in order to get this solution to work. I\u2019m sure this solution worked once, however, it seems to be old and no longer works.\n\nThe main error you get when you try to use the method outlined by inthecheesefactory, is that the JavaDoc is not generated and this causes the script to abort.\n\nIn at the top add the plugin after the plugin.\n\nThen, configure dokka (still under ).\n\nFinally, inthecheesefactory.com gives you the following 2 files to include.\n\nYou need to download and edit the file the first block of code should look like this:\n\nYou need to make the changes below.\n\nBasically, we are telling it use the javadoc task depends on dokka. The javadoc task doesn\u2019t do anything other than trigger dokka which is configured under .\n\nYou need to place the edited file under your directory and then your apply should look something like this:\n\nThat should be it! You should now be able to build and deploy your library to bintray.\n\nI haven\u2019t put my whole code up, I\u2019m hoping to contact inthecheesefactory and have them update their blog and their code. If this works or does not, I\u2019ll report back here. Like the article so that you are sure not to miss out on android updated.\n\nAnd, finally, In order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/bcgdv-engineering/when-using-react-js-webpack-dev-server-does-not-bundle-c2d340b0a3e8?source=user_profile---------4----------------",
        "title": "When using react.js webpack-dev-server does not bundle",
        "text": "When using react.js, do you run and find that when you change your files, webpack-dev-server does not automatically rebundle your project? Instead you find yourself having to run along with in order for changes to your files to be visible?\n\nThis seems to be a rather common issue, it even has a bug filed against webpack-dev-server for this issue and the conversation on that bug report started in 2014 and is still going on to this day.\n\nFor the maintainers part, they have repeatedly mentioned on this thread that:\n\nHowever people don\u2019t seem to get what this means and the thread goes on and on with people reporting a similar issue. If you find yourself on this page because you have a similar problem, read on and hopefully I\u2019ll be able to explain this one.\n\nThere are a few ways to start a react project. Two popular ways of creating a react project is:\n\nI\u2019m going to help you start a react project and reproduce this problem just so you understand when and why does this happen.\n\nNote: Before we start, the commands below are very *nix system focused. This is for my convenience but you should be able to use a UI editor to make a lot of the changes.\n\nYou can accept all the default values when you get the various prompts.\n\nNow that we have installed and configured babel, we need to tell webpack to use babel-loader while bundling the files. Edit webpack.config.js and add a module section to it.\n\nAnd lets create our first react component, which we will use to output \u201cHello, world\u201d to our page.\n\nNext, lets create an file that we will use to display our react project. We will put this under our directory.\n\nYour project structure should look something like below:\n\nLets bundle the app using webpack so we can run it.\n\nThis works great! Except, our react app is not being served up from a web-server. There are many reasons why this can be problematic. In order to run it from a web-server, we will install webpack-dev-server. To run this using the webpack-dev-server, first we will install webpack-dev-server.\n\nNow, you can either update your package.json file to use webpack or run it from the command line. I\u2019ll run it from the command line because I just want to demonstrate the issue.\n\nIf we visit you will see a \u201cHello, World!\u201d message. The problem though is, that if you open and make any changes to it, you\u2019ll notice that the webpack-dev-server detects the changes, bundles and restarts, however, you don\u2019t see the changes when you refresh the page.\n\nSide note: if you don\u2019t want to run the complex commands above, you can configure your package.json file to run these for you.\n\nNow, you can run these with or or .\n\nAs I already mentioned, this has to be with the structure of your project not being setup properly for webpack. You see, in project that are rolled themselves, there often is a hard coded link to bundle.js in a webpage. If you look at the timestamp on bundle.js, you\u2019ll notice that bundle.js is not being updated. However, webpack-dev-server is doing something, so what is it?\n\nAs the maintainers on the bug report mentioned above kept saying. Webpack-dev-server serves up the project from in-memory and not from disk. This means that webpac-dev-server has a copy of everything in memory, including the updated file and that\u2019s where it\u2019s serving up the page from. So, if there is an updated copy in memory, why doesn\u2019t this work?\n\nIn order to diagnose this issue, visit: and you\u2019ll see the project structure according to webpack-dev-server.\n\nIf your setup is like mine, you\u2019ll notice that your package structure is rather flat, and your bundle.js file reside in the root directory and not in the directory like we had configured in . You can go back to index.html and change the script tag to include from and you\u2019ll see that things start to work as expected when you start the webpack-dev-server. So, the issue is clear, the project structure that webpack understands, is not what we had configured, or thought we had configured!\n\nBut wait, the issue is not closed just yet. We can\u2019t leave the script tag pointing to either because when you bundle for production, our is placed in the directory and not in the same directory as . So, this is fixed in dev, but it\u2019s broken in production! Not a good idea!\n\nIn order to fix the issue, we have to restructure our project. One of the things I absolutely hate about the current structure of the project is that we have to tell webpack-dev-server to service up the directory instead of just the directory. I hate this because anyone who types as the path in the URL can potentially see our source. So, I\u2019m going to move inside the directory and move in to directory and then in my file, point to .\n\nSo now, our project structure is as follows:\n\nand looks like this:\n\nI file. We have to point our file to the directory. Note, don\u2019t change the output path, instead prepend \u201cjs\u201d to \u201cbundle.js\u201d. What I\u2019ve noticed is that the output directory acts as the base directory for the webpack-dev-server. This is different from the path that we pass the which is meant to tell webpack-dev-server where our static assets are located.\n\nThen, finally in we have to tell that our content base is the public directory.\n\nNow, if you restart the webpack-dev-server, you\u2019ll notice that the project structure is different. For good measure, bundle using webpack first:\n\nNow, when you visit you should see a structure closer to what you expect.\n\nNow, go back to and you should see \u201cHello, World!\u201d. This is being rendered from . If you keep localhost:8080 open and edit index.jsx, you should notice that the webpage automatically reloads to reflect the changes (works in Chrome and Firefox). Keeping your browser open, run this command (if you are in a Linux box) and you should see the webpages automatically update.\n\nThat it! The problem from the start was nothing but the project structure. Hope this helps someone.\n\nThe project in its broken and fixed form is hosted on my GitHub. You should be able to check it out and run it with:\n\nYay! you made it to the end! We should hang out! feel free to follow me on Medium, LinkedIn, Google+ or Twitter."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/what-does-a-great-movie-and-a-great-app-have-in-common-colour-palette-b30c836a8367?source=user_profile---------5----------------",
        "title": "What does a great movie and a great app have in common? \u2014 Colour Palette",
        "text": "There are a lot of different styles when it comes to choosing a colour palette for a movie. I\u2019m going to limit our discussion to just a few ways cinematographers and directors use colour palettes and hopefully show how this is analogous to building web or mobile apps.\n\nBuilding a palette involves selecting a limited range of colours from colour spectrum. If you have a hard time believing that colour can be use to add to a narrative, then consider this screen grab from American Beauty (1999).\n\nNotice how colour red, is being used to as a separator between the characters. The rest of the muted pallet give a feeling of distance and coldness at the dining table. If you have seen the movie, you know all these emotions exist consciously, but in this scene Sam Mendes (director for American Beauty) and Conrad Hall (Cinematographer) do an amazing job of portraying the family\u2019s dynamic using colour.\n\nThis is not unlike what websites and apps do. Have you noticed how so many retailers use black and variations of black in their websites or apps? The colour black is associated with elegance, power, mystery, and wealth. This is so ingrained in our heads that fashion brands take advantage of it all the time. Just to give you a few examples:\n\nAll the above are just a few examples of brands that use the colour black as the primary colour. This is akin to a \u201cselected saturation\u201d palette in movies where everything is in black and white except for a focal object that gets the most vivid of colour. An example of such a movie is \u201cPleasantville\u201d (1998).\n\nDirector Gary Ross and cinematographer John Lindley draw your attention to the character in full colour, the colour portrays the emotions of the character while everything else is given less priority on screen. This is no unlike what you will see if you open a fashion retailers site. Take a look at the screen grab from theiconic.com.au.\n\nEverything is in black and white except the models. Also notice here that the models have an orange glow to them. This is used to portray warmth. It\u2019s winter in the Down Unda\u2019 and they know you are looking to stay warm. In movies, an example of this would be one of a limited palette. In \u201cDo the right thing\u201d (1989) everything appears to be red, orange and dusty to contribute to the feeling of a heatwave.\n\nTake a look at this screen grab from the Gilt shopping app. Its summer in the Northern hemisphere so all the colours convey a warmth.\n\nThere is plenty of black there to make us feel like what we are looking at is high-class and desirable, the highlights use the colour yellow/orange. This is no accident and is not a random choice either. Yellow is associated with clarity, warmth and optimism where as orange is friendly, cheerful and confident. Ever wonder why the \u201cbuy now\u201d or \u201cadd to cart\u201d or \u201cPay with Paypal\u201d buttons are almost always yellow? They are meant to make you feel good about your decision. Colour scheme can be used to great effect to influence how you should think or feel about an object or character. For example, green is envy, red is caution. You may see examples of this in retails apps, ever wonder why sale banners so often have red in them? It\u2019s meant to make you feel nervous about missing out.\n\nMaterial design encourages you to have a primary colour, secondary colour which is usually a darker or more saturated version of the primary colour and a contrasting colour which is meant to draw attention to or highlight things. So, realistically, you have 2 colours in this scheme. To me, this is an example of a \u201ccomplementary\u201d colour scheme. This is where you pick a colour and pair it with it\u2019s opposite. Surprisingly, even though this may look \u201cugly\u201d it actually meant to make things look compelling!\n\nAction movies use this to great effect with the hideous orange-teal look.\n\nPeople actually complain a lot about this colour scheme because it seems to make things look fake. Yet it endures. Take a look at this screen grab from Transformers. The orange is very obvious, but there are highlights or teal.\n\nNow, if you are looking at the palette above and thinking, \u201cThat colour palette could never work\u201d or, \u201cThat colour palette is ugly and any app that uses it is likely to win the Darwin award for taking itself out of circulation\u201d\u2026 well, to you I say\u2026 Amazon!\n\nIf you\u2019re like me (and one hopes you\u2019re not), you just had an \u201coh shit\u201d moment, where you\u2019ve just gone from thinking that something is ugly and there is no way you can find it compelling, to thinking\u2026 \u201cHow badly am I being manipulated?\u201d.\n\nI hope you enjoyed this article. This article was inspired by an amazing YouTube video \u201c10 Best Uses of Color of All Time\u201d by CineFix. The video is linked below and I strongly encourage you to watch it.\n\nAs always, in order to build great apps, read more of my articles."
    },
    {
        "url": "https://medium.com/bcgdv-engineering/building-a-full-stack-web-app-in-kotlin-af8e8fe1f5dc?source=user_profile---------6----------------",
        "title": "Building a full-stack web-app in Kotlin \u2013 BCG Digital Ventures Engineering \u2013",
        "text": "Since Kotlin is now an officially supported language for Android, it only stands to reason that people will start to adopt Kotlin faster than Angelina Jolie can adopt children from Africa. Most of us are aware of the fact that we can just drop in Kotlin in to any Java/J2EE project in a rather frictionless manner. However, as was made clear at the Google I/O session on Kotlin, Kotlin can be interpret down to JavaScript and Objective-C as well. This means, you can have an API, web-app, Android app, iOS app and use nothing but Kotlin to get there. For someone wanting to learn Kotlin, what more exciting opportunity can there be! This is trial by \ud83d\udd25! Not a fan of trial by fire? Fear not young Padawan, The Doctor is in to help you live long and prosper through the journey, and make sure that whatever happens, you don\u2019t cross the streams \ud83d\udc7b (Have I offended all the geeks yet? \ud83e\udd13) There is a lot to cover here, so as I mentioned in the intro, we will only be covering building API\u2019s and browser-side scripting using Kotlin. There is a lot written/recorded on building apps in Android using Kotlin so I don\u2019t feel the need to beat the dead donkey on building Android apps in Kotlin. At the outset, I would like to point out that I\u2019m going to keep this dead simple. As such, my project structure may be slightly different from the Kotlin examples that you may find out floating around on the internet. First, we set a few expectations: We\u2019ll be using Gradle to build our project. You can\u2019t use the kotlin plugin and the kotlin2js plugin in the same module so we will create a \u201cfull-stack\u201d project and add a \u201cbackend\u201d and \u201cfrontend\u201d module to this. the advantage of this approach is that you can put all your common code in the \u201cfull-stack\u201d project, though, this is not the way most example online structure their code. We\u2019re setting up micro-service style API. So expect it to be self contained, minimalistic. In this instance, Kotlin has a project called ktor that provides integration with Netty and Jetty as an embedded server. We\u2019ll be using ktor with Netty, keep in mind that ktor uses coroutines and may not be production ready. Please don\u2019t expect this code to be optimised and production ready. It\u2019s just serves as an example for what is possible with Kotlin. I\u2019m not going to use webpack-dev server or anything of the sort to monitor changes to files, so you\u2019ll have to build manually after every change. This will get your used to whats happening, you can automate as you see fit after this. I will be using IntelliJ IDEA CE. Setup your Kotlin full-stack project as shown below. We are going to be using Gradle to select that on the left hand side and on the right hand side add support for Java and Kotlin (Java). The purpose of the full-stack project is to house the common code if we have any, so JavaScript support is not needed. Your GroupId is basically the package name you want to give the project. Your ArtifactId is like the project name. I like to check \u201cUse auto-import\u201d and \u201cCreate directories for empty content roots automatically\u201d. This is a stylistic choice, you can leave the default options in and continue if you like. Select the actual project name and the path. When you click finish, you\u2019ll see a project as shown below. Now, we are now going to add a back-end and a front-end module. Right click on the project name and add a new module as shown. First, we will setup the backend module. The setup is very similar to the process we went through for the full-stack project. You can select Java and Kotlin in the frameworks and libraries you want to support, or just Kotlin if you like. You can right click and open the images in a new tab, I\u2019ve put all 3 inline to save space.\n\nAt the end of this process, you should have a project with a structure as shown. We\u2019ll setup a Kotlin file which will contain our micro-service. If you look at the readme for ktor you\u2019ll see an example provided of how to do this. The screenshot below shows a message you will get when you first modify your build.gradle file. I would normally just accept this suggestion. We are going to add a dependency on ktor and Gson for our project. I\u2019ve highlighted the changes that I have made to the backend modules build.gradle file. If you need to copy paste, you can get the file from my github repo. I tried naming the ktorVersion as ktor_version and for some reason this doesn\u2019t work. Don\u2019t know why, I just accept it and moved on. The code for my micro-service We will have a simple micro-service which will will accept as a path parameter a number and return a JsonArray on that size. Right click on your backend modules src/main/kotlin directory and select to start a new kotlin file. What name you give it does not matter at this point. I called my file Main.kt. The code for Main.kt is as follows: When you run this server, the embeddedServer which is Netty, will run on port 8080 using Kotlin coroutines. It will listen for a GET on /api/ping and an optional count path parameter. It will then create an Array of Entry objects, the number of objects depends on the count passed in. Entry a data class which is shorthand for a Java Bean. Entry is defined at the bottom, it\u2019s just a class with one \u201cmessage\u201d String in it). We use Gson to convert the Array to JSON and return it. Note: The Access-Control-Allow-Origin header is required at this stage because on our local machine the front-end will run on a different http server and will have a different port, hence the browser will complain about cross domain attacks. To bypass this issue, we add the header. After copy pasting this code into Main.kt, you can right-click on Main.kt and select Run \u2018Main.kt\u2019. If you now visit http://localhost:8080/api/ping you should see the result. You can add the optional path parameter if you like http://localhost:8080/api/ping/3. There you have it, you have a simple micro-service setup! We have already created the front-end module. We now have to configure our front-end build.gradle file to output the JavaScript files in the correct location and setup our webpage. We first setup the webpage, because this will give us an idea of where IntelliJ builds the project. The HTML page will be create under the front-end > src > main > resources directory. Call it index.html. You can set it up however you like. you can see my code for index.html below. The reason it\u2019s important to setup the webpage first is that we want to see what happens when you tell IntelliJ IDEA to build the front-end module. If you click on the front-end module go to Build > Build Module\u2026 you\u2019ll see that IntelliJ outputs the resources director under the Project directory at the same level at the modules. It\u2019s the red directory called out/. We want to output our JavaScript in the same directory, preferably at the path we\u2019ve specified in the <script> tags above. Now that you know where your resources end up when the project is built, this next step will make more sense, we want to configure Kotlin2JS to output our JavaScript in the same directory and we go this by configuring our front-end modules build.gradle file (look at the last 4 lines). If you need to copy paste this, you can get the code from my GitHub repo. Now, we need to write some Kotlin to generate JavaScript. I will admit that this part felt a little odd to me. For some reason, my mind can make the logical jump to using Kotlin as an alternative to Java using Java APIs and so, I some how expected to be able to use Java APIs for writing JavaScript. This turned out to not be the case at all. Instead, writing Kotlin for the browser felt very much like writing JavaScript, which had some sort of Java mashup. Right-click on your front-end > src > main > kotlin directory and create a new Kotlin file called main.kt. Note that main.kt is all lowercase, that\u2019s how you know it\u2019s a JavaScript file and not a Java class file. You can give it a different name, I realise this may be confusing for a lot of people. If you do give it a different name, you\u2019ll have to modify the script tags in your HTML, more on this later. We are now going to write some code, to take a number from the webpage and use that to call our API and write the output to the webpage. This will require us to bind DOM elements, listen for events and even make an async AJAX call to our own API. I like to think the code below is self-explanatory. But I\u2019ll try to explain some of it. The main challenge I had in writing this was that I felt the API was not very well documented and of course, there was a lack of example. Hence this article. import org.w3c.dom.Element\n\nimport org.w3c.dom.HTMLInputElement\n\nimport org.w3c.dom.HTMLTextAreaElement\n\nimport org.w3c.dom.events.Event\n\nimport org.w3c.dom.get\n\nimport org.w3c.xhr.XMLHttpRequest\n\nimport kotlin.browser.document\n\nimport kotlin.browser.window\n\nimport kotlin.js.Json\n\n\n\nfun main(args: Array<String>) {\n\n window.onload = {\n\n fetch(\"1\")\n\n //Example of how to add stylesheets dynamically\n\n //add stylesheet if we have any\n\n val head = document.getElementsByTagName(\"head\")\n\n head[0]?.appendChild(createStylesheetLink(\"style.css\"))\n\n //bind elements\n\n val input = document.getElementById(\"count_id\") as HTMLInputElement\n\n val button = document.getElementById(\"button_id\")\n\n //bind click listener on button\n\n button?.addEventListener(\"click\", fun(event: Event) {\n\n fetch(input.value)\n\n })\n\n }\n\n}\n\n\n\nfun fetch(count: String): Unit {\n\n val url = \"http://localhost:8080/api/ping/$count\"\n\n val req = XMLHttpRequest()\n\n req.onloadend = fun(event: Event){\n\n val text = req.responseText\n\n println(text)\n\n val objArray = JSON.parse<Array<Json>>(text)\n\n val textarea = document.getElementById(\"textarea_id\") as HTMLTextAreaElement\n\n textarea.value = \"\"\n\n objArray.forEach {\n\n val message = it[\"message\"]\n\n textarea.value += \"$message\n\n\"\n\n }\n\n }\n\n req.open(\"GET\", url, true)\n\n req.send()\n\n}\n\n\n\nfun createStylesheetLink(filePath: String): Element {\n\n val style = document.createElement(\"link\")\n\n style.setAttribute(\"rel\", \"stylesheet\")\n\n style.setAttribute(\"href\", filePath)\n\n return style\n\n}\n\n\n\nexternal fun alert(message: Any?): Unit Take a look at this line: Whats the difference between JSON and Json? JSON is a concrete class that has methods to manipulate JSON objects and strings. Json is an external interface meaning that we are telling Kotlin that this is an JavaScript Json object. This may be a bad explanation. What happens when you built your front-end project now? In the <project dir>/out/production/kotlinfrontend/ you should see the project structure that we expect. You can see that the JavaScript file name is kotlinfrontend_main.js. This is because my front-end module was called kotlinfrontend and my kotlin file was called main.kt. If you give your kotlin javascript file a different name, you should update the <script> tag in your HTML file. Running the project as a whole We have our APIs setup and we know how to run them. Run your API\u2019s by right clicking on backend/\u2026/Main.kt and selecting `Run \u2018MainKt\u2019`. Then, right-click on the index.html file in the out directory and open it in a browser. If all has gone according to plan you should see the page load and \u201c0: Hello, world!\u201d output to the TextArea. You can now try changing the value in the Input area to see if you project works.\n\nYou will notice that style.css is missing. This is obviously because we never create it in our project structure. I just wanted to include an example of how you would dynamically create an element or add a stylesheet if you wanted. There is also Aza-Kotlin-CSS which makes it so that you can handle all your CSS in Kotlin as well and don\u2019t even have to bother with annoying actual CSS. If you should writing the HTML was a drag\u2026 well, there are limitation, but you can still handling building a lot of your DOM in Kotlin using the Kotlinx.html library it makes manipulating the DOM simple. Just look at this example: window.setInterval({\n\n val myDiv = document.create.div(\"panel\") {\n\n p { \n\n +\"Here is \"\n\n a(\"http://kotlinlang.org\") { +\"official Kotlin site\" } \n\n }\n\n }\n\n\n\n document.getElementById(\"container\")!!.appendChild(myDiv)\n\n\n\n document.getElementById(\"container\")!!.append {\n\n div {\n\n +\"added it\"\n\n }\n\n }\n\n}, 1000L) Checkout Kotlins working with JavaScript documentation for more and for information on how to use jQuery with it. I\u2019m sure a lot of people will want to do that. Update: Notes on using Gradle to build So this code mysteriously stopped working the next day and the output directory for the resources changed from the \u201cout\u201d directory to the \u201cbuild\u201d directory. Not sure what happened there. However, there is an other issue that we face when building with Gradle. In my kotlinfrontend/build.gradle you may have noticed a line: It may have struck you as odd that was not out as part of our build process. Instead, we had something like . Well, that\u2019s because we were building 1 JS file. If you use gradle, it will put all your JavaScript in one JS file whose name you supply above. Also, you\u2019ll notice that will be missing because this file is bundled in a jar as part of the build process. The fix for this is simple: Copy the static resources to a directory of your choice in your gradle build. Unzip the jar and extract the js files we want. I decided to simplify the process by coping all front-end projects files to a web directory. The changes to my file are below. The only way this affects the code in this project is that you have to make a slight change in your to point to instead of and your web directory will be instead of compileKotlin2Js.kotlinOptions.sourceMap = true\n\ncompileKotlin2Js.kotlinOptions.outputFile = \"${projectDir}/web/js/app.js\"\n\ncompileKotlin2Js.kotlinOptions.suppressWarnings = true\n\ncompileKotlin2Js.kotlinOptions.verbose = true\n\n\n\nbuild.doLast {\n\n//Copy kotlin library files to the web directory \n\n// Copy kotlin.js and kotlin-meta.js from jar into web directory\n\n configurations.compile.each { File file ->\n\n copy {\n\n includeEmptyDirs = false\n\n\n\n from zipTree(file.absolutePath)\n\n into \"${projectDir}/web/js/lib\"\n\n include { fileTreeElement ->\n\n def path = fileTreeElement.path\n\n path.endsWith(\".js\") && (path.startsWith(\"META-INF/resources/\") || !path.startsWith(\"META-INF/\"))\n\n }\n\n }\n\n } //Copy static resources to the web directory\n\n copy {\n\n includeEmptyDirs = false\n\n from \"${buildDir}/resources/main\"\n\n into \"${projectDir}/web\"\n\n }\n\n}\n\n//Delete the web director as part of the clean command\n\nclean.doFirst {\n\n delete \"${projectDir}/web\"\n\n\n\n} The other benefit of this process now is that if you don\u2019t want to execute builds from the command line every time your make a change to your files, you can use gradle continuous builds to watch the files for you and run build when the files change. From the command line, simply run: Now, every time you make a change to a Kotlin JS file or a static HTML, CSS file, you should just be able to refresh your browser. What I have above is the result of a lot of effort. I really don\u2019t understand why people think using one language over the other is \u201cfun\u201d but this exercise for me was decidedly not \u201cfun\u201d it was extremely frustrating where I constantly had to struggle with a lack of examples on how to even make a simple AJAX call without using jQuery. Most example of using Kotlin for JavaScript were simple examples that made no AJAX calls and did not JSON parsing and figuring all of that out, especially when to use JSON or Json was extremely frustrating. Also, there was constant confusing between what was native to Kotlin, such as Array, what was native to JavaScript and what was native to Java. In Kotlin (JavaScript) the example below shows what I mean, the first works, the second doesn\u2019t. This is likely because of my lack of knowledge of Kotlin. I do know that Array is basically like a Java primitive array but you can see how you can end up using List, or ArrayList there and just be frustrated as to why it doesn\u2019t work. //Works as expected, has all element properties\n\ndocument.getElementById(\"count_id\") as HTMLInputElement\n\n//Does not work at all\n\ndocument.getElementById(\"count_id\") Just casting here made all the difference, the issue for me here was that I had to discover the API, I wasn\u2019t able to Google up just what I should be doing there, and just figuring out that I needed to be able to cast the element to it\u2019s exact type to be able to get any sort of useful functionality out of it was frustrating. Without it, there was very little functionality available. Yes, maybe kotlinx.html would have helped here. You can find all the source for this project on my GitHub. In order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/what-does-a-great-movie-and-a-great-app-have-in-common-transitions-2b6df9c4826e?source=user_profile---------7----------------",
        "title": "What does a great movie and a great app have in common? \u2014 Transitions",
        "text": "Developers have a hard time wearing a users hat. We know how much work animations and transitions are, and as such, we are often doing a cost versus benefit analysis in our head when it comes to animations and transitions. We can be forgiven for concluding that transitions don\u2019t add much to the usability of the app.\n\nIf you think of apps as simple tools to get a task done, then yes, transitions and animations may not add much to your app. However, we have come a long way since the late 2000\u2019s and app development is now more about guiding your apps narrative. This can perhaps be best describe through an analogy with the movies.\n\nMost transitions in a movie are rather straight forward, a bunch of stuff happens, then in the next frame, we see something completely different and something different is happening. We have either jumped ahead or back in time, jumped to events happening some where else, or jumped to an other act in the story.\n\nTake a look at this scene from Furious 6. At around the 3 minute 35 second second mark, we see a few of the actors driving cars, then we cut to an other scene inside a tank. There is little to nothing joining the two frames except the background music. This is a cut in the same scene and hence doesn\u2019t look too bad. Often between different scenes you\u2019ll see something similar as well (sorry, finding clips of more than 1 scene on YouTube is hard).\n\nThis is an example of a transition and it works! Furious 6 is a great movie, nothing wrong with this. What I want you to note is that nothing else carries from one cut to the other except the background music. However, compare this to the Agent Smith Interrogation scene from The Matrix.\n\nAt around the 4 minute 30 second mark, we see Neo screaming as Agent Smith inserts a bug in his belly button. Neo is screaming because his mouth has just sealed shut and there is something crawling into his belly button. Then we see Neo wake up, still screaming. This is an example of a transition known as an L-cut. The audio carries over to the next shot. But, there is also a bit of a match-cut, which is when the composition of the scene is similar between two scenes and there is also an element of the smash cut which is when the cut is quite abrupt. Neo was lying down screaming trying to get loose. In the next scene we see Neo sit up on his bed (i.e. he was lying down, hence match-cut), we find him in his room (smash cut) and he is still screaming (L-cut).\n\nThe combination of the match, smash and L-cut carries the story forward quite well. We are not sure if Neo was dreaming, or if what we saw in the last scene was real. The L-cut is specifically designed to create a seamless transition and the effect of using all these cuts together is obvious. The way the scene is cut alone conveys a lot of meaning to the user. This is similar to the kind of benefit animation and transitions offer in your app. Just like the movies which have a lot of cuts and transition types:\n\nThere are many forms of animations and transitions between screens in app design and development as well. On Android there are a few ways to animate elements on the screen:\n\nUsing the above, you can perform animations and transitions such as fade, resize, pan, translation, zoom, rotation, path and colour morphing, the list goes on and on.\n\nUsing the correct transition can help your user understand the context and hierarchy of your app and your screen. It can show that two screens are related or the content on the two screen is related as with shared element transitions. This along with trying to make your apps interaction feel natural is what material design tries to achieve. I recommend you watch the video on Material motion below and the Session on Material design motion from Google I/O 2016.\n\nThis post was in part inspired by the YouTube video below. If you love The Matrix or just want to learn what a difference great scene transitions make, I highly recommend it.\n\nI have take a bit of a break from writing recently so I thought I would get back to it with a light hearted number about transitions. I hope this article was an entertaining read. There are other elements of great movie making that apps have in common, such as colour, on-boarding (capturing audience attention) and character development (making sure people understand the context of the tasks). Hopefully I\u2019ll cover them in the future.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/did-you-get-one-of-these-google-play-developer-policy-violation-emails-6c529ceb082d?source=user_profile---------8----------------",
        "title": "Did you get one of these Google Play Developer Policy Violation Emails?",
        "text": "If you app collects User Data in any way, you\u2019ll get this email. If your app does something malicious on the devices or violates their Device and Network Abuse policy, you\u2019ll get this email. If your email says you have violated their Device and Network Abuse policy or Malicious Behaviour policy, this article cannot help you. This article targets indie developers or small businesses who published their apps that use \u201cdangerous permissions\u201d and did not include a privacy policy in their app or on Google Play. Dangerous permissions are also the features that require run-time permission.\n\nI\u2019ve gotten a few of these emails in the past month. Whats frustrating about these emails is that I\u2019ve gotten them over demo apps that I published which are open source; have their code published on GitHub; and the code is even linked from the Google Play listing of the app. Ignoring the fact that Google Play actually have a category for demo apps, getting emails like this is extremely frustrating because I built these demos in my spare time and I don\u2019t necessarily have the time to go around updating all my apps and adding a link to a privacy policy in them. Then, there is the problem of what the heck a privacy policy is.\n\nAlas, master Google demands a privacy policy or else they will remove your app. What is a poor developer to do but comply. After a lot of Googling, I came across PrivacyPolicyTemplate.net. I was able to generate a fairly simply and readable Privacy Policy using it. However, it seems PrivacyPolicyTemplate.net caters for website rather than apps, so I had to modify the privacy policy to suit my needs.\n\nThe privacy policy is also very open ended, which I didn\u2019t like. My demo apps do not collect any information from the user, all the information from the user is kept on the app and I in no way receive it. This is something I want to explicitly point however. However, there is the issue of using Google Play Services and crash reporting tools which whether you like it or not, can collect information from the device.\n\nI\u2019ve shared my modified Privacy Policy below and I\u2019ve added a few notes in bold about things that need your attention:\n\nSorry, I realise that there is a lot bold in there and this probably means a lot more work for you than you were expecting. If you find the above hard to read, I have hosted the text above on gist.\n\nFor my apps, I upload the html file to GitHub. Then I used RawGit to generate a URL for the file which would display the file as an HTML file. Then, simply in my app, I added a link to the settings, menu item, wherever that opens this link.\n\nI also have to log in to the Google Play Developer Console, go to \u201cStore listing\u201d and at the bottom of the page, paste the URL from RawGit.\n\nThat should do it! Now you just have to build and deploy your app on Google Play.\n\nIf you have a lot of apps you need to do this for, just use PHP or something to customise this template at run-time by passing in parameters like app name and list of information gathered.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/what-is-android-os-fileuriexposedexception-and-what-you-can-do-about-it-70b9eb17c6d0?source=user_profile---------9----------------",
        "title": "What is android.os.FileUriExposedException and what you can do about it",
        "text": "If you have an app that shares files with other apps using a Uri, you may have encountered this error on API 24+.\n\nThis error occurs when you try to share a file:// Uri in an Intent broadcast to share data with other apps. Using file:// Uri\u2019s are discouraged in this scenario because it makes some assumptions about the destination app. For one thing, we assume that the destination app has READ_EXTERNAL_PERMISSION which may not be the case. If the destination app does not have READ_EXTERNAL_PERMISSION, this may result in unexpected behaviour at best or at worst, result in a crash.\n\nAs of Android N, in order to work around this issue, you need to use the FileProvider API.\n\nThere are 3 main steps here.\n\nThat should do it!\n\nYou don\u2019t have to do this in all instances. This seems to cause an issue when using setDataAndType() in Intent as show above (Don\u2019t know of any other instances where this exception has come up). In my tests using Uri.fromFile(file) is still working when an Intent is built for sending an email. So, the code below keeps working even through the Uri is a file:// Uri. I\u2019m assuming this continues to work because there is an implicit understanding that any email app will expect a file:// Uri in it\u2019s Intent extra Intent.EXTRA_STREAM and should have READ_EXTERNAL_PERMISSION.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/bcgdv-engineering/changing-text-size-and-color-in-shared-element-activity-transition-a31d932b7600?source=user_profile---------10----------------",
        "title": "Changing text size and color in Shared Element Activity Transition",
        "text": "Animating the textSize property is an easy solution but, not the correct one. Yes, if you want to perform an Activity transition while changing text size and color, you can probably change the text size and color properties directly as shown by Alex Lockwood here. While this works, and serves as a great example of how to create custom transitions, this also thrashes your font cache. Don\u2019t take my word for it here is a video from Google I/O where that exact sentiment is echoed. If you want to learn how to animate text size, that video is a great starting point, it explains the general concept, and also provides some code. The relevant part should start at 14:35 mark, that\u2019s where they talk about creating custom animations and use animating text size as an example. At about 16:20, they mention why you shouldn\u2019t just change the text size attribute. Animating font size will thrash your font cache!\n\nThis is a question I\u2019m not fully qualified to answer. This is a topic that I don\u2019t fully understand. The short answer is, other than taking up memory for various font sizes, this can affect the speed at which text is rendered in your app. If you\u2019re an OpenGL developer this may make intuitive sense to you, if you want to read more on this topic, there is a great post by Romain Guy on how android renders fonts here.\n\nI will admit that this is a common mistake. I have come across a lot of code that animates text size. I even have various open source widgets that animate text size and they are all being re-written because I\u2019ve made the mistake of animating text size instead of converting text to a bitmap and animating the bitmaps.\n\nI\u2019ve written custom transitions before, but even as such, there is not enough in the video to give me an idea of how to do a great job of writing the code that animates text size and color (and some other properties), well. Luckily you don\u2019t have to write this yourself! Nick Butcher has done a lot of the heavy lifting for us in Plaid. The best way to up your game as a developer is to read code by other developers!\n\nNow, I know all of you are really busy, so I\u2019ve taken the time to quickly outline what you need from Plaid to create your own text size, color etc Activity transition animation. In order to get started, you\u2019ll need the following classes/files:\n\nThere are more files (such as the transitions xml files), however, there is a lot going on in them and it may just be easier to define our own transition animation. If you drop all those files in to your project, you will (hopefully) have no errors.\n\nThe project, for me, does not compile unless I modify this file a little. In the master branch velocity, minDuration and maxDuration do not have format specified. If you have the same issue, update these as follows:\n\nReflowText handles custom fonts for you, however, you have to tell it which custom font you are using. In the project that I link below, I use Calligraphy and only have the one custom font. However, if you have multiple custom fonts you\u2019ll have to figure out how to specify in the TextView which custom font is being used.\n\nYou can use FontTextView from Plaid and specify your custom font that way, or you can use Calligraphy. If you use Calligraphy, it\u2019s up to you to find a way to pass font information around. You\u2019ll need to make changes in 2 places ReflowText$ReflowableTextView.getFontName() and ReflowText.createLayout() roughly line 448. My advice if you use Calligraphy is to pass this information in tag.\n\nWe can get away with using only enter animation, however, I\u2019ll provide both enter and exit animation files below as this produces a smoother experience.\n\nThe files below go in app/main/res/transition\n\nNote 1: I kept classes from Plaid in their original package structure because I don\u2019t know what the \u201clicensing\u201d implications of using these classes is, so, credit is still with plaid.\n\nNote 2: Specifying targetId is optional if you don\u2019t specify targetId, the transition will be applied to all views that are being animated.\n\nWith all of the above setup. We are ready to animate our text. In order to do this, we have a few steps.\n\nFirst, before we launch an activity, we have to capture information about our TextView. We do this like so:\n\nSecondly, in the new activity, we map our views to the data captured.\n\nIf you run your project now, your text should animate smoothly!\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://android.jlelse.eu/the-blurry-frosted-background-is-a-common-pattern-on-ios-where-they-have-simply-controls-to-cbd0c5843e5f?source=user_profile---------11----------------",
        "title": "Android Devs, make your Toolbar and View backgrounds frosty",
        "text": "The blurry, frosted background is a common pattern on iOS where they have simply controls to achieve this. On Android however, this ends up being a lot of effort. On the up side, if you do bother to handle this yourself, you can achieve better results than you can using the default controls on iOS.\n\nBefore I begin, yes, there are libraries out there that will do this for you. If that\u2019s all you\u2019re interested in and don\u2019t want to super power of being able to do this yourself. Just scroll down to \u201cA note on libraries that can do this\u201d section.\n\nWe are going to cover 2 basic design patterns when implementing frosted backgrounds.\n\nThe \u201cFrosty\u201d or \u201cFrosted glass\u201d effect is achieved by first blurring the picture and then lightening the image. This much will remain constant, however the 2 designs use slightly different approaches to achieve the end look. In Part 1, we will cover how to implement the frosted Toolbar look. Then, in Part 2, we will cover how show a frosted background that floats in the center of the screen (almost like a CardView).\n\nTo implement the frost toolbar, there are 3 basic steps:\n\nFor me personally, of the 3 steps, the hardest one was to setup your layouts so that it would be possible to achieve this look. Unfortunately, I decided to start with the Scrolling Activity template which I feel only complicated things for me. At any rate, here are the steps.\n\nWe will need 2 ImageViews, one to hold your background image, the second to hold a blurred copy. Our layout looks like this:\n\nimgBg is where the original image is going to be held, while imgBgBlur is where I will hold the blurred copy of the image.\n\nIn the layout above, we are going to capture the entire LinearLayout inside the NestedScrollView. Then we are going to Blur it using RenderScript and then lighten the Bitmap. Its worth noting that you can you don\u2019t have to use RenderScript to blur the image, you can use any number of fast blurring algorithm on the internet. I used RenderScript because it can take better advantage of multi-core processors and runs a lot faster than Java code. You can read more here. I also used RenderScript because some of the Java code for blurring was not playing well on older versions of Android and RenderScript should be backward compatible up to Android 2.3.\n\nFirst, in your apps build.gradle file, add support for RenderScript.\n\nNow in our Activity we can capture the View we want to blur. Since we are going to draw the View on to a Bitmap using Canvas, we can also apply a lightening filter at the same time. Now that we have captured our View in a Bitmap and lightened it, we can blur it using RenderScript.\n\nIs a call to a helper function to blur the image\u2026 in case you didn\u2019t pick up on it, this is the function call:\n\nI created this helper method to use RenderScript to blur a bitmap because it\u2019s reusable code. The code looks like this:\n\nSince we are using the CollapsingToolbarLayout, we will need to detect when our Toolbar collapses. When the Toolbar collapses, we want to position our blurred image behind our NestedScrollView and move it at the same time as the NestedScrollView.\n\nIn the code above, once we detect that the Toolbar has collapsed, we make the blurred ImageView visible. Then in our OnScrollChangeListener, we use setTop() to set the top position of the blurred ImageView relative to it\u2019s parent (which should be the same as our NestedScrollView). The result, is shown below.\n\nThe video compression seems to have made it a little hard to see the effect properly. However, you can head over to GitHub and build the app from source yourself.\n\nTo implement a frosted background on Views, the steps are pretty much the same as for the toolbar effect.\n\nInside a Frame or Relative layout, we are going to position an ImageView which will hold our background image. There will be a ScrollView which covers the background image and will hold all of our Views that can have a frosted background.\n\nWe already covered a this is the previous section. The steps here aren\u2019t any different, cache a blurred and lightened copy of the background View so you don\u2019t have to repeatedly perform this expensive operations.\n\nWe want to capture the background View from the X, Y position of the target view to the X + width and y + height. We are also going to scale our captured background down to about half it\u2019s size. This is going to increase the blurring effect as well as increase scrolling performance by reducing our memory footprint.\n\nAs a fair warning, if your Views are going to Scroll or appear below the screen, the code about will get a little more complex. You can see this the full code in GitHub in the CardViewActivity.\n\nI have created a helper method to do this, which you can see below.\n\nSoon afterwards I realized that AppCompat v4 has a RoundedBitmapDrawable that could replace all the code below with one simple step. One thing I would like to do to improve performance here is to use the RoundedBitmapDrawable instead.\n\nI\u2019m not sure if this will improve performance; however, it does simplify code and makes the corner radius more predictable. Previously when we create a bitmap with circular corners ourselves, we had to account for the fact that the bitmap was half the original size and would be scaled once it was set as the background image.\n\nNo real trick here, you update your background onScroll and that\u2019s all there is to it.\n\nThe results are as shown below:\n\nWhile most of the code I have shared above should be enough to get your started. It is worth noting that in order to keep yourself from thrashing your RAM, you should use a Bitmap pool at least when capturing the background View to blur and lighten. For the scrolling Views with the frosty backgrounds, I couldn\u2019t find a way to use a Bitmap pool when creating a new Bitmap by cropping a section of a larger image. Being able to do this would save us a lot of GC overhead (not saying that its not possible) so, I\u2019ll update this post (or create a new one) when I figure out how to do this.\n\nAlso worth noting that, I use RenderScript\u2019s RenderIntrinsicBlur to blur images. My understanding is that it this is the fastest algorithm that RenderScript has to to offer for blurring, however there are others algorithms that may be more suited depending on your needs. The Dali library has code for multiple blur algorithm implementations using RenderScript. There is also a good post by its author on StackOverflow explaining the performance of each blurring algorithm.\n\nKeep in mind that it\u2019s probably a good idea to keep the areas your are blurring and your blurred bitmap as small as possible. Holding a large (blurred) bitmaps in memory like I have done above, is probably a bad idea. An other lesson I learned was to make sure that your background image is as small as possible (best quality for the best fit), because having a large image in the background will affect your scrolling performance no matter now efficient you make the code. I noticed that when my images were 1080p and below 1MB in size, scrolling was smooth, when I slapped in 4 or 5MP images, even though they were being cropped by the ImageView, scrolling was terrible! If you are stuck with a huge image, you can use BitmapRegionDecode to get only a portion of the image you want to use as your background image or look at \u201cLoad Scaled Down Version Into Memory\u201d section of the Android Developers guide to load scaled down versions of Bitmaps.\n\nBitmap pools can be tricky to implement, however, if you need to blur images, or the background of Views, you can use libraries for Android that are dedicated to blurring Views and images. This way, you can outsource the headache to someone who (hopefully) knows what they are doing.\n\nThere are libraries out there that can do the blurred / frosty effect for you. Two such libraries are Dali by Patrick Favre-Bulle and Blurry by wasabeef. These libraries can blur Views for you, load them into another View, keep them updated if the background changes and even apply a color filter on the blurred images. The plus side here is also that you don\u2019t have to manage memory yourself. The downside is, that they can\u2019t do everything (obviously) and, there is something really cool about being able to do this yourself! \ud83d\ude0e\n\nYou can find the code on my GitHub page in a repo called FrostyBackgroundTestApp."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/coordinatorlayout-is-the-most-useful-viewgroup-youre-not-using-93589fe9048c?source=user_profile---------12----------------",
        "title": "CoordinatorLayout is the most useful ViewGroup you\u2019re not using!",
        "text": "CoordinatorLayout is immediately recognisable to most Android developers. It\u2019s a ViewGroup that we wrap our layout in, in order to move the FloatingActionBar out of the SnackBar\u2019s way or to enable the collapsing toolbar using the AppBarLayout.\n\nCoordinatorLayout pattern is so common that it\u2019s literally part of the \u201cBasic Activity\u201d template in Android Studio. If you haven\u2019t bothered to investigate the CoordinatorLayout any further, you\u2019re missing out! Understanding how CoordinatorLayout works and how it\u2019s children can implement their behaviour can help you create meaningful interactions and encapsulate your code inside individual Views (instead of slapping everything inside your activity or helper classes).\n\nPut simply, children inside a CoordinatorLayout can register dependencies and be notified when these dependencies have been met (or unmet). At the very least, all children of a CoordinatorLayout are informed when the layout changes.\n\nThe abstract class that all behaviours must implement is:\n\nYou can extend the class above, or extend an existing behaviour class like FloatingActionButton.Behavior or SwipeDismissBehavior.\n\nYou can define anything your View is dependant on, in the method below:\n\nThis method is used to determine whether the supplied child view has another specific sibling view as a layout dependency. By default, the method returns false, which means that this method will be called at least once in response to a layout request.\n\nIf it returns true for a given child and dependency view pair, the parent CoordinatorLayout will:\n\n- Always lay out this child after the dependent child is laid out, regardless of child order.\n\n- Call onDependentViewChanged when the dependency view\u2019s layout or position changes.\n\nYou can define the behaviour in the following method:\n\nHere you need to determine how your dependency has changed. One example of how to use this class comes from the FloatingActionButton.Behavior class:\n\nI recommend you trace through this code to see how to use the Behavior class.\n\nWhen I started this post, I intended to write the code to show how various material design behaviours can be coded using CoordinatorLayout. However, while researching this, I stumbled upon a great post by Sa\u00fal Molinero called Mastering the CoordinatorLayout. He does such a good job of explaining how it can be used to implement all sorts of behaviours that it\u2019s pointless for me to try to explain any further. I recommend you head over there and read it! There is also a great (and simple) example of how to implement custom behaviour using CoordinatorLayout over at the Base Lab Blog.\n\nSince the bulk of the work here was done by Sa\u00fal Molinero and Base Lab, I thought I should point out that other than mastering the use of the CoordinatorLayout as intended by the libraries, you don\u2019t have to limit your use cases to the Toolbar, FAB or SnackBar. You don\u2019t even have to necessarily wrap your whole activity layout in a CoordinatorLayout. You could use it to coordinate localised elements on your screen, inside your fragment.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://android.jlelse.eu/android-devs-do-your-layouts-look-squashed-on-newer-devices-or-spread-out-on-older-ones-b6d0216d44a2?source=user_profile---------13----------------",
        "title": "Android Devs: Do your layouts look squashed on newer devices or spread out on older ones?",
        "text": "Do your layouts look squashed on newer devices? Or perhaps they look too spread out on older devices. Here\u2019s why!\n\nI\u2019ve never owned a Nexus 6 (too expensive? I don\u2019t make Apple fan scratch!). Last year I started a project before the Nexus 5X came out, I did my development using Nexus 5 and Galaxy Nexus as the target devices. The thinking was that going forward, most devices would at least be 1080p, but just in case smaller screen devices stick to 720p, I should test on both.\n\nWhen I finally got my hands on a Nexus 5X, I noticed that all my buttons looks squashed! I\u2019ve always followed the (now) age old recommendation of using at least 48dp width and height for a touchable areas size, so I was surprised to find that my buttons look squashed. Not just that, my layouts looked crowded in a general where the TextViews seemed too close to one and other and the floating labels looked like they were too close to the EditTexts.\n\nI\u2019ve created a sample project to demonstrate this, and trust me, it looks much more crowded on the phone than it does here. What going on here? Even the status bar and navigation bar is shorter! Since, both of the devices are on Android 7, the change of the status bar height from 25dp to 24dp in Android M does not explain this. Plus, the divider in our layout on the Nexus 5X is a lot more than 1dp higher.\n\nNow, some of you out there are calling me a rookie or n00b because you already know what\u2019s going on. To you I say, good for you! The rest of you, the answer is below.\n\nSuspecting that I or a team member may have changed something to cause this problem, I started checking my layout folders, dimension files and even styles. Everything seemed like it was in order. I started thumbing through my git history to see if something could have been changed to cause this issue. Nothing!\n\nGoogle searches did not turn up anything (hence this article), but then, I remembered something in the back of my head. A year or so ago, Android Developers published a blog post titled \u201cGetting Your Apps Ready for Nexus 6 and Nexus 9\u201d. I had glanced over this article last year, but I guess nothing stuck in my brain. I went over it again, the article mostly covered which density buckets to use for images and which layout folders to use to target these devices. This is nice to know, but doesn\u2019t explain why my layouts look squashed or crowded.\n\nThe article did impart another bit of knowledge that answered the question of why my layouts looked squashed.\n\nI will admit that I glanced over this bit repeatedly before it stuck in my head. Take a look at the Device Metrics page on design.google.com. Scroll down to where Nexus 5X and Nexus 5 are mentioned. You will notice the following:\n\nWhile the screen size in pixels is the same, the screen size in density independent pixels is very different! Roughly speaking, in terms of density independent pixels, Nexus 5x, 6 and 6P have a 15% larger screen! There are some phones like the LG G3 that are even larger!\n\nThis makes my layouts look squashed for obvious reasons, but \u201csquashed\u201d implied that the layout issue exists vertically and not horizontally, why? The short answer is, the problem also exists horizontally, but it\u2019s less noticeable. Text is normally is in scale-able pixels and doesn\u2019t really seem to suffer as noticeably. Otherwise, most of our widths are configured to match_parent, wrap_content or be a relative weight; which means it\u2019s harder to notice.\n\nPut an other way, since screens are measure diagonally, Nexus 5X is 3.8% bigger than the Nexus 5 (Nexus 5 is 5\" screen, Nexus 5X is 5.2\" screen), however, since the grids in DIP are 360 x 640 dp for Nexus 5 versus 411 x 731 dp for Nexus 5X, the Nexus 5X\u2019s screen in terms of DIP\u2019s diagonally is 12.4% bigger (look Maa! I needed Pythagoras in real life after all!).\n\nIf your app uses the extra width without accounting for older devices, you\u2019ll have an issue in your layout. The same can happen with the height. This can be problematic with the new ConstraintsLayout, if you take full advantage of the 411dp width, older devices with 360dp width won\u2019t render properly. If you take full advantage of the 731 dp height, without taking scrolling into consideration for your screen or design, you\u2019ll have a problem. The same can happen if you design for smaller DIP grids, you could have extra space when you don\u2019t expect it. The lesson here is, just because screens have the same resolution, don\u2019t assume they have the same grid in terms of DIP.\n\nWhen combing through my app and comparing screens side-by-side between a Nexus 5 and Nexus 5X, I noticed that the issue existed in every layout. However, it\u2019s not really noticeable in most cases and doesn\u2019t \u201clook bad\u201d. So much so that most designers I work with, didn\u2019t notice the issue on most screens.\n\nSo, is this really a problem? Depends on your design and layout.\n\nThis depends on how you code. There is an argument to be made for generic dimension values, versus functional ones. Personally, I use generic dimension values and functional ones, so for me, the answer was fairly easy.\n\nFor context, my layout is:\n\nBelow is my values/dimens.xml file:\n\nI know that the newer Nexus devices are 411dp x 731dp so, I created a new values folder and a new dimensions file values-sw410dp/dimens.xml and updated my generic values increasing them by 15%\n\nThe result was much closer:\n\nHonestly, the answer depends on whether you\u2019re just updating an existing project to support / fix layouts on the newer devices or if you\u2019re redesigning your app from scratch.\n\nIf you\u2019re updating or fixing layouts for an existing app? Then by all means, feel free do this*. I would recommend that you don\u2019t use odd numbers and fractions like I did above, but rather align your dimensions to the closest factor of 4 or 8dp. The above was just an example.\n\n*Note: I\u2019m not advocating this as the or as the only solution by any means, the solution largely depends on your code and your requirements. The aim of this article was to make you aware of a possible issue and offer a quick solution.\n\nI also scaled the text to get the two devices to align as closely as possible. Honestly, you don\u2019t have to do this. But again, depends on your design and/or layout. Android is pretty good about making sure that text size remains readable as long as you\u2019re using scale-able pixels but some times, the text size is as much about positioning elements around the text, as much as it is about making sure the text is readable.\n\nIf you\u2019re designing and developing from scratch, I would design my app to look best on each kind of device. Or just decide up front if you want to scale up for newer devices or scale down for older devices.\n\nIn order to keep building great apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/understanding-vectordrawable-pathdata-commands-in-android-d56a6054610e?source=user_profile---------14----------------",
        "title": "Understanding VectorDrawable pathData commands in Android",
        "text": "Open any VectorDrawable XML file and you are greeted with some cryptic commands in the pathData attribute.\n\nThose who works with Paths on a regular basis may be able to interpret this command and tell you what shape it makes. For the rest of us, it can be a bit of a mystery.\n\nA VectorDrawable is an XML representation of a Vector. Unlike popular image formats like Bitmap, JPEG, GIF and PNG, Vectors do not lose quality as they are scaled up or down. This makes bundling of images with different densities unnecessary, hence saving you a lot of APK bloat. In effect, VectorDrawables contains path commands on (how to draw lines and arcs) and just like Path commands when working with Canvas, drawing and rendering VectorDrawables is time and memory consuming process which is why VectorDrawable\u2019s are best used for simple flat graphics.\n\nIf you wish to animate a VectorDrawable, as is all the rage these days, one of the requirements is that the VectorDrawable you are animating from and to should share the same number of commands. Also, it helps to know how each of these commands will cause the graphic to move/change in order to animate the image. To this end, having an understanding of what these path commands mean can help greatly.\n\nLet me just start by saying that no matter how much you study path commands, unless you\u2019re a genius, there will be a limit to what you can understand. Vector graphic programs don\u2019t exactly have clean and human readable code as a high priority. After vector graphics files like SVGs are piped through Android Studios VectorDrawable generator, they become a lot cleaner and easier to read, however, I\u2019ve found that a lot of the commands can still be a lot more complex that what you may need. Then to understand circles and arcs just requires you to have a lot of imagination or some serious mathematics prowess.\n\nBasic path commands are comprised of alphabet followed by one or more numbers. The numbers are often comma separated but don\u2019t have to be. E.g.\n\nThe alphabet can be upper or lowercase. Uppercase means absolute position, lowercase means relative position.\n\nM or m (X,Y)+\n\nmoveto: Move cursor to position, uppercase is absolute, lowercase is relative\n\nmoveto commands are followed by X,Y coordinates. There can be more than one set of coordinates following an M command, these are treated as implicit lineto commands.\n\nZ or z\n\nclosepath: Draws a line from the current position of the cursor to the start position of the path. Does not have any parameters.\n\nL or l (X,Y)+\n\nlineto: Draws a line from the current position to the position specified by X,Y. Uppercase means absolute coordinates, lowercase means relative coordinates. You can have more than one set of coordinates following a lineto command. If you want specify more than one set of coordinates, it means that you\u2019re creating a polyline (shape consisting of multiple string lines).\n\nH or h (X)+\n\nHorizontal lineto draws a horizontal line from the current cursor position to the position specified by X. If there are multiple X coordinates following the command, this is treated as a polyline. The Y coordinate remains unchanged. Uppercase H is absolute coordinates, lowercase h is relative coordinates.\n\nV or v (Y)+\n\nVertical lineto draws a vertical line from the current cursor position to the position specified by Y. If there are multiple Y coordinates following the command, this is treated as a polyline. The X coordinate remains unchanged. Uppercase V is absolute coordinates, lowercase v is relative coordinates.\n\nWith this much in mind, lets interpret the command we had above:\n\nM100,100: Move cursor to absolute coordinates X=100 Y=100px.\n\nL300,100: Draw a line to X=300 Y=100 (starting position was 100,100).\n\nL200,300: Draw a line to X=200 Y=300 (starting position was 300,100).\n\nz: Close path, straight line from current position to 100,100. When you close the path is when the shape is filled with the fill colour specified. You can leave this out if you shape doesn\u2019t need to close, like in a check mark or a cross.\n\nIf we sketch it out, you\u2019ll notice that the shape is an upside down triangle!\n\nIf we put this inside a simple VectorDrawable XML we can see the result:\n\nStarting with just this much, you can do a lot. I created an animated tick drawable using just this much information.\n\nHere my canvas size is 24dp x 24dp so I initially position my cursor at 6, 11 which is the starting point of the check, I move relative to 6, 11 down by 3.5, 4 and then up relative to the new position 8, -7 to complete our checkmark. Since I initially do not want my checkmark to appear, I set all the lineto commands to 0,0 then in my first animation, I animate the first line from a relative position 0,0 to a relative position of 3.5, 4. Note, these coordinates would not work as well if I used absolute positions.\n\nThe next thing to learn is how to make arcs, however here things begin to get complicated and I\u2019m going to defer to W3.orgs documentation on Paths. I recommend you read it and try to understand it if you ever need to draw arcs or circles by hand. This is something I\u2019ve honestly not had a lot of luck with. My goal here was to show you how understanding the commands can help you created simple vector graphics by hand and animate them.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/is-retrofit-faster-than-volley-the-answer-may-surprise-you-4379bc589d7c?source=user_profile---------15----------------",
        "title": "Is Retrofit faster than Volley? The answer may surprise you!",
        "text": "As a matter of fact, Volley is often talked down among developers. Some developers are of the opinion that Google has yet again built, told everyone to use it and abandoned it. Heck, I have read/heard as much from a lot of developers I respect. I can tell you first hand, this is not true and Volley is being maintained.\n\nWhen it comes to libraries in Android development, seems like fanboy-ism is alive and well. Jake Wharton and Square Inc. libraries loom large! This should not be surprisingly to any Android developer. As a matter of fact, if you look at the GitHub awards for Java, it becomes clear that Square and Jake Wharton have arguably done at least as much for Android development as Google, if not more!\n\nI won\u2019t lie to you, I prefer Volley over Retrofit. I do however have my reasons for this preference; I know the code for Volley well, it suits my coding/project structure style and you get image handling and lots of other things for free. Retrofit on the other hand (feel free to correct me on this) is more about code abstraction on top of a HTTP client which for Retrofit is OkHttp. Retrofit aims to make it easier to consume RESTful web services where as the goal of Volley is to handle all your networking needs for Android specifically.\n\nShould you then use Volley or Retrofit? I really tried hard to come up with a rule of thumb, but it\u2019s not easy. For one thing, Volley can run of legacy Apache, HttpUrlConnection, Apache-4 or OkHttp. Where are Retrofit really only runs of OkHttp. Right there it becomes clear that comparing Volley and Retrofit is probably not a good idea. In recent months, I\u2019ve been concentrating on more reusable code and I\u2019ve found Retrofit to be a better model to work with. Don\u2019t be mistaken, Volley and Retrofit are 2 very different beasts and comparing them really isn\u2019t fair. What I can say is this:\n\nThe list goes on.\n\nMy recommendation is that if you app has very simple networking requirements, use ION it handle network calls, images and it\u2019s very simply to include in your project. If you app requires consumption of RESTful services and you don\u2019t want to get hung up in Volley configurations, go with Retrofit. If you need to abstract your code, go with Retrofit. As you probably realise by now, Volley really isn\u2019t winning here. My \u201crule of thumb\u201d (which I just came up with) makes it seems like Retrofit is the winner in most scenarios. However, if you code is likely to make a lot of duplicate calls and supports screen orientation change and you don\u2019t mind the complexity of configuring Volley, I would recommend going with Volley. Personally, if you have the time, try them both out and find out what suits you more.\n\nNow on to the matter at hand\u2026 which is faster?\n\nLooks like there is some truth to the fact that Retrofit is faster! Though Volley with OkHttp3 performed just as well.\n\nAs I mentioned before, comparing Volley and Retrofit is really an apples and oranges scenario in my opinion. The two libraries have different functions but since they deal with networking, you\u2019re realistically only going to use one of them. My best advice is to understand your requirements as best you can and choose the library that works best for you.\n\nPlease check out some of my articles on Medium. And feel free to follow me on Google+, Twitter or LinkedIn."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/securing-sharedpreferences-in-android-a21883a9cbf8?source=user_profile---------16----------------",
        "title": "Securing SharedPreferences in Android \u2013 Ali Muzaffar \u2013",
        "text": "If you need to save data in SharedPreferences in an encrypted form, you could choose to implement the encryption yourself or rely on a library. A quick Google search will turn up a great project called SecurePreferences. However, SecurePreferences requires a password to encrypt your text. Even if you implement AES encryption yourself, there is often the need for a \u201csecret\u201d. If this password or \u201csecret\u201d is hard-coded into your app or uses some system value like MAC address, anyone looking though a decompiled version of your code can easily decipher what it takes to decrypt the Strings. You could generate a random long password but if you put it in regular SharedPreferences, it will get persisted in plain text in a while. So what is the answer?\n\nIf you hard code your password into the app, you can use obfuscation to make it hard to figure out what the password is. You can use a tool like dexguard (by the makers of Proguard), which has ways of encrypting strings and classes. I cannot comment on how effective it is against reverse engineering the password, however I can say that it\u2019s not free. My guess is that at best, obfuscation will make it harder reverse engineer the password but it\u2019s not fool proof.\n\nOur goal simply is to generate a password that is protected by the OS. To achieve this, will be to generate a public and private keypair, then either encrypt data directly using those keys (if you are only supporting 4.3+) or use SecurePreferences to handle all our encryption needs. If we go down the SecurePreferences route, we need to be able to generate a reliable password that is protected by the AndroidKeyStore if available.\n\nIf we choose to generate a password, either to use with SecurePreferences or as our \u201csecret\u201d or password for AES encryption, the password has to be hard to decipher and we should be able to duplicate it on your device. It doesn't take long to realise that this is what AndroidKeyStore is meant for. However, this does mean that devices older than JellyBean MR2 (Android 4.3 or API 18) will have to either not be supported or will have to step down their security.\n\nRemember that our goal is a produce and secure a password. As such, only being able to generate a public and private key pair suits us just fine. With these keys comes a self-signed certificate that the system generates and we can use this certificate as our password.\n\nIn the code I provide, we use \u201cRSA/NONE/PKCS1Padding\u201d to encrypt and decrypt the text. Since the text is already protected by the Android operating systems Sandboxing, this may work for most scenarios. If the data is never being transferred over the net, encryption with RSA may be pointless or overkill, you could use AES encryption and just use this to protect your AES secret or password. Android can only use RSA/NONE/PKCS1Padding or NoPadding. If you want to use a public and private key to encrypt and decrypt data and want more options, the only way I have found is to use BouncyCastle. There is a project called SpoungyCastle that you can use to add BC support to your app. There is a sample implementation of RSA using BouncyCastle here, follow the code from the encryptRsaOaep() method. If you find this to be too complex, I recommend you implement AES encryption (There are links in the \u201cMore on encryption\u201d section after the code).\n\nFor added security, there are also options when you generate the KeyPair which you can use to make sure that the device has a lock on it. The method are .setEncryptionRequired() for <M and M+ it\u2019s .setUserAuthenticationRequired(). Using these option will mean that in order to generate the KeyPair and even encrypt/decrypt text, the device will have to have a lock on it. However, this may open you up to the AndroidKeyStore loss problem.\n\nWARNING: There is a known issue where if the user changes the lock screen PIN or pattern, the AndroidKeyStore is destroyed. My solution doesn\u2019t require the screen lock to be set, and in my testing I have not seen this problem. However, if you encounter this problem, it means that the certificate you use as the password or \u201csecret\u201d in your code (as I have done below) is deleted if the lock screen method or PIN/Pattern is changed. You\u2019ll have to handle the scenario where your app has been initialised and data stored, but how you can\u2019t decrypt it.\n\nIf you made it down here. Congrats!\n\nI chose this method of encryption because the Public and Private key are both protected my the AndroidKeystore and that makes it simple to encrypt and decrypt the data. If you want, you can use AES encryption, however, you\u2019ll have to persist the Initialisation Vector somewhere and every time you encrypt the data, that will change. I did try briefly to see if the IV can be reused but I\u2019m afraid I wasn\u2019t able to find a way. It should be possible from what I read. However, I did find that in some projects the just append the IV to the encrypted String and then store the encrypted string.\n\nYou can see how you can use AES encryption (at least on Android M+) here. To implement AES on older platforms, see this answer. Though personally, using Java-AES-Crypto is just easier and even easier is to use SecurePreferences and just use the certificate we generated as a random password. The certificate is then protected by the AndroidKeyStore and that setup just seems secure.\n\nAs you may have noticed, the methods for generating the KeyPair is different for JBMR2 \u2014 M. If your app was installed on <M and the OS upgrades to M+, this should not affect your app as the KeyPair would have already been generated and stored in the AndroidKeyStore.\n\nAs I mentioned earlier, this code will break if the OS updates from <JBMR2 to JBMR2+. While it\u2019s unlikely that such upgrades will happen, without flashing your phone; if you want to accommodate for this, I suggest keeping track of the OS version that the password was generated on and if this changes, decode the SecurePreferences the with the old password, copy out all the keys, delete all the keys from SecurePreferences and write to a new SecurePreferences with the new password.\n\nThis techniques mentioned above aren\u2019t just good enough to be used with SharedPreferences but can also be used to encrypt and persist data. Persisting data is effectively what SharedPreferences does. If you want to persist Parcelable objects, an other idea may be to use Facebook conceal.\n\nPlease check out some of my articles on Medium. And feel free to follow me on Google+, Twitter or LinkedIn."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-developers-google-i-o-2016-recap-5a4d046ac225?source=user_profile---------17----------------",
        "title": "Android Developers: Google I/O 2016 recap \u2013 Ali Muzaffar \u2013",
        "text": "Google I/O 2016 took place May 18\u201320th and while a new hardware was shown, from an API\u2019s perspective, IO16 was a lot lighter than IO15. A lot of it was anti-climatic as many of the announcements had already been made. There was a theme to this IO, the theme was \u201cnatural language processing is the future\u201d to which they announced their new living room hub. What I was surprised to learn, is that 20% of Google\u2019s queries are voice queries\u2026 thats a lot higher than I would have expected.\n\nNote: There were a lot of things announced, I\u2019m basically trying to cover what I feel most Android developers will care about. I\u2019m sure the tech media will cover everything else in great detail.\n\nThere is a reason I list this first. As an Android app developer, this was the most exciting thing to come emerge from IO16. Firebase now emerges as a platform that brings together a lot of services from Google together and adds features that were previously provided by third parties or simply didn\u2019t exist. Collectively, it\u2019s being referred to as Firebase analytics. Don\u2019t let the name fool you, it does a lot more than analytics and the exciting part is, it\u2019s free for unlimited use. The picture below shows the set of services available in Firebase.\n\nAnalytics is the core service, which supports and builds upon the individual services that you see above. It\u2019s broken into 2 larger categories and it\u2019s fairly obvious as to why. I\u2019ll discuss some of the features that I feel will effect most of the developers out there.\n\nThere is a lot in analytics, much more than my scope here allows, in short, you have all the power of Google Analytics, however, you have the ability to collect information from deep links, and even target customers based on groups you may create with the gathered analytics or crashes.\n\nMost developers would notice Cloud Messaging there and wonder\u2026 yes, it\u2019s now Firebase Cloud Messaging. This leads to Notifications.\n\nThis may not be replacing your push notifications, instead, it\u2019s a way to target customers as you would currently do with platforms like Urban Airship. You can target customers based on data gathered in analytics like age, gender, usage pattern or based on any default metrics Firebase analytics may capture. which you may not be explicitly gathering.\n\nThis is absolutely incredible. You can build a link, that will not only work for both Android and iOS, the link will automatically deep-link into your app (iOS or Android) or redirect users to the appropriate store to install the app, if it\u2019s not already installed. If the user installs the app, it will then continue to deep-link into the app! It even lets you specify fall back URL\u2019s incase the user wants or expects a webpage or doesn\u2019t want to install the app.\n\nThese work with dynamic linking, and provide all the same features I mentioned above.\n\nThis is a key-value store that synchronises with your app. You can use this for A/B testing or for customising the experience for users based on your criteria.\n\nThis allows you to test your app on various devices in the cloud. This works with the espresso recorded tests to make everything super easy. It also works from the command line.\n\nEverything else should be rather obvious, or you can read about them on the Firebase blog.\n\nThere are a lot of them! It\u2019s not the best place to get into them all.\n\nYou\u2019ll need to learn to manage a new activity lifecycle to support to multi-window mode. Multi-window work is supported on both phones and tablets. If you don\u2019t want to allow resizing, you can set the flag below to false. Otherwise, you can provide parameters around minimum width and height for your activity.\n\nIt allows for drag and drop of items across windows so there are updated to drag and drop api\u2019s as well.\n\nThere is also changes around when onPause and when onStop is called, previously there may have been a slight delay in backgrounding an activity and onStop being triggered, I believe this is not the case anymore, since this helps make behaviour in multi-window more predictable.\n\nPicture in picture only really applies to Android TV.\n\nMultiple notifications from the same app can now be bundled in to one notification, this caters for things like messaging apps where there may be many messages for a chat or messages from various chants.\n\nThere is also in-line notification responses. Changes to the styles of notifications including allowing custom views in notifications.\n\nYou can now customise your quick settings. As such, app developers can create their own quick setting icon. This is the new TileService api.\n\nUsers can now restrict network access to your app if it\u2019s backgrounded. You will need to check whether access is available to you when trying to run network operations in the background.\n\nThere are changes to the doze mode, the phone can now doze even if its not been active for a while and even if it\u2019s moving. They basically try to detect of the phone is in the users pocket or hand and the user is moving and put it in a shallow doze mode.\n\nDirect boot means your phone can boot all the way to the pin screen and until you sign in for the first time, only apps that have been configured to work in direct boot mode will work.\n\nAdded support for Java8 features and, a bunch of other changes too check out this video. I recommend watching this video if you want to know more about supported Java8 language features.\n\nLets face it, we hate fragments. People broadly fall into 2 groups, fragments are life, or I hate fragments. I talked about this lot long ago and recommended what I felt was the best approach. Feels I was pretty much on the money, so I recommend reading that. The gist from IO though is that there have been a lot of bug fixed to improve behaviour consistency with fragments. From more, I recommend you watch the video from IO.\n\nWhat you must know here is, that there is a new method commitNow() on FragmentTransaction which will immediately apply changes. Previously, adding a fragment was asynchronous, so if you immediately search for a fragment by tag, you would not find it. Also, they have fixed some behaviour around when a fragment adds a child fragment, it was not possible to find it from the Activity.\n\nThese changes are available from the latest version of the support library.\n\nThere is a new ConstraintsLayout in the new Android Studio 2.2 preview\u2026 Android Development all of a sudden looks a lot more like iOS development.\n\nThere is added support for Java8 features, improvements to Direct launch, a lot more keyboard shortcuts but a lot of that you may already be using.\n\nImproved debugging for Java and C++ code, upgraded to Clang 3.8, GCC 4.9.\n\nAlso, there is a built in APK Analyser, the layout editor is greatly improved, you can record espresso tests and it will automatically lay down the code for this and, a lot more\u2026 just watch the video \u201cWhats new in Android Studio 2.2\u201d\n\nI highly recommend you watch this talk, especially if you have an app that does continuous audio or video playback. It will cover a lot of areas, including how to setup your notifications, make them compatible with Android Wear and other hardware and how to be a good citizen on Android for media playback.\n\nThis is a cross platform technology to allow devices to communicate each other without all the formality involved in technologies like Bluetooth or Wifi-Direct. This was technically launched in July last year. It seems they use an ultrasounds frequency to detect devices nearby. This frequency does not travel through walls.\n\nYou can communicate between 2 devices with a simply with 2 simple calls:\n\nThis is a \u201cuse all technologies\u201d scenario. The messages sent are a byte array, however there is a limitation of a 100KB for these messages. If you want to make your messages available only to devices in the same room? Simple:\n\nNearby notifications or BLE notifications allow surface to mobile notifications. The idea being that your phone can be prompted when there is new information or a new experience when you are nearby. For example, when you install a new Chromecast device, it can send you a notification to setup the device rather than you having to go to a website and enter the code etc.\n\nThese are aimed at helping you determine the context that the user is operating in. Is the user running? Is the user in a car? Is the user sleeping? Etc. The idea here is that your app can provide users with information and experience based on what they are doing. If I\u2019m a music app, and I detect that the user is running and, the headphones are plugged in. I can prompt them and ask them if they want to play some really cool running playlist. If they have a watch, one tap on it and they can start listening.\n\nThis is going to be part of Google Play Services and \u201cavailable soon\u201d. There are 7 types of context\u2019s that will natively be supported.\n\nThese 9 contexts have been combined to create the Fence API, which is not the same as geo-fencing. Geo-fencing is a subset of Fencing. Fencing includes things like the user going to sitting to walking to driving etc. This works off callbacks.\n\nThe above example shows how you can detect if someone has started driving. If then you want to determine if the user is near your store:\n\nThe above example shows you trying to fence a user by:\n\nYou can create an AND condition around these \u201cFences\u201d as follows:\n\nand then request a callback from the Fencing api when these conditions are met.\n\nAfter you register these fences, your app doesn\u2019t have to be running to get the callback, it will get a callback via pending intent. You can configure your callback as follows:\n\nSnapshot API is the other kind of API available. While Fencing is a callback. Snapshot is more of a polling style api.\n\nIn the future, they may add more context apis.\n\nApparently, Android Wear can now work without a phone! It can work off wifi, or even with it\u2019s own sim. You can watch \u201cWhats new in Android Wear 2.0\u201d for a gist on this. For my money, I learned from the Labs that it\u2019s super easy to create a watch face.\n\nWhile this isn\u2019t exactly new. I was surprised with how easy Android TV development is. If you haven\u2019t checked it out, I highly recommend it.\n\nThere is no disclosed date for this, I\u2019ll let you look up what this is.\n\nOver all, the event was a huge disappointment, my disappointment borders on disgust, perhaps thats why this post isn\u2019t in great detail.\n\nPlease check out some of my articles on Medium. And feel free to follow me on Google+, Twitter or LinkedIn."
    },
    {
        "url": "https://medium.com/bcgdv-engineering/use-android-studio-to-stub-web-api-simple-jwt-login-as-an-example-615ee8efe1b0?source=user_profile---------18----------------",
        "title": "Use Android Studio to stub web API; simple JWT login as an example",
        "text": "When documenting API or stubbing end-points for web API, Apiary has been the go-to solution for a while. However, there are times when you need to returns results based on users input and then, we very quickly hit up against the limitations of Apiary.\n\nWhile most developers are comfortable with using Tomcat, Apache and Nginx with a back-end language, there is some overhead to downloading the new tools and setting up a new environment. Luckily for Android developers, there is a better way.\n\nIt\u2019s pretty easy to dismiss Android Studio as nothing more than an Android Development environment. Lets face it, as far as development environments for Android go, it\u2019s great! However, remember that it built on top of Intellij IDEA which is a very powerful development environment and that Android Studio is also a development platform for the Google Cloud Platform. I touched upon this power of Android Studio once before when I talked about How to create a mobile game with backend API\u2019s in 5 minutes.\n\nOff the top of my head, I can think of 2 main reasons to stub or build your own web API end-points.\n\nStart by creating a new Activity in your existing app, or by creating a new Android app with a LoginActivity. Effectively, when you see the screen below, select LoginActivity.\n\nAfter the activity is added to your project, the next step for me is to clean out the code and get rid of a lot of stuff that I don\u2019t need. The end result is that LoginActivity looks like this:\n\nTo set-up the web API, go to File > New > New Module.\n\nWhen you see the screen above, select \u201cGoogle Cloud Module\u201d and click Next.\n\nOn the next screen, fill in all the details as you like, or you can leave the default options. The only thing you have to make sure to select is the \u201cModule type\u201d\n\nThe \u201cModule type\u201d contains three values, you need to pick one that suits your needs best.\n\nYou can find more information on each of the options at the links above. I've chosen to use \u201cApp Engine Java Servlet Module\u201d because the code for the Servlets is very succinct and makes it easier to copy paste.\n\nWhen you finish, the Servlet generated will look like this:\n\nIf you look for the file web.xml, you\u2019ll see that MyServlet is mapped to /hello. You can change this if you like. For my needs, I've changed it to /login.\n\nYou also want to find index.html and update the following line (this step is optional, fixing this means we can use the index page to confirm our api is running):\n\nNow select \u201cbackend\u201d from the run menu and hit the run button.\n\nYou should see output as shown below in red. Don\u2019t panic, nothing is wrong, the console is just outputting the log in red. I don\u2019t know why.\n\nIf you now go to http://localhost:8080, you should see index.html.\n\nNow, lets modify our Servlet so that it takes a username and password and returns a JWT token.\n\nFirst find build.gradle for the backend module and add a dependency on the JWT library we will use. You can use any library you want, just head over to http://jwt.io and select one.\n\nI\u2019ve chosen to use JJWT because it has a very complete implementation of JWT standards and I like it\u2019s syntax more than Jose4J. However, different libraries are easier or harder to use and you should pick one that suits you best.\n\nStart by adding JJWT to your back-end module.\n\nThe modify your Servlet to generate a JWT token when a username and password is provided. Do note, that we don\u2019t really care if the username and password are correct at this point.\n\nYou can now use Postman to validate whether the API end-point works, you will get a token back if your username and passwords are correct or else, you\u2019ll get an error.\n\nYou can head over to http://jwt.io and test your token on that site.\n\nAlready we can see a benefit over using a static stub. We can enforce our contracts for what should happen if the input is invalid and we can test/develop against it.\n\nI\u2019m going to use koush\u2019s Ion library to handle networking. IMHO it\u2019s the fastest way to implement networking and image handling in any app. Simply add the dependency (1 line) and start coding.\n\nAdd the dependency in your apps build.gradle file.\n\nThen in your LoginActivity, in attemptLogin(), post the username and password to our API end-point. Just remember that on your phone or tablet, you can\u2019t use localhost and should replace it with the TCP/IP address of your machine, or if you use the emulator, you can use 10.0.2.2; if you use Genymotion you can use 10.0.3.2.\n\nWe update the code in our LoginActivity.attemptLogin() method to make the login call.\n\nWe are now able to write code to not only handle a successful login, but also to handle error conditions.\n\nIf you want to use this as your primary form of stubbing or building a web API, I would use the Javadoc standard to document your API.\n\nAnyone with Android Studio should be able to run your project without any grief. However, if you need to distribute your API to allow others to develop on their own computers, you can generate a war using a simple command:\n\nThis should generate a war file under <your project>/<backend-folder-name>/build/libs\n\nThis war should work in a Tomcat or Jetty without any problems.\n\nSome times, you need to be able to stub a database or even persist one for stubbing or API development purposes. My personal recommendation here would be to use HyperSQL Database (HSQLDB) (only in the development environment). While you can\u2019t do anything too complex with HSQLDB, you can run it as an in-memory database or as a database back-end by filter persistence. This allows you to create a fresh database from scratch and load it with data that is reset every time you restart the server, or even persist the data on disk if you like.\n\nAdmittedly, if you are doing this, you\u2019re no longer stubbing API fast. However, you are making a very powerful and useful stubbed endpoint. If the database isn't too complex, moving your stubs to a MySQL back-end would be rather fast and simple. There are some benefits to use HSQLDB on Android as well, hopefully I\u2019ll cover this in the future. Needless to say that if your back-end is ultimately going to be a NoSQL DB, this is not the best option.\n\nYou can also use something like Firebase, however, you\u2019ll need to be on-line to use Firebase so, off-line development is not possible. However, you get some other nice features like data being pushed when it changes. With Firebase, each developer can use their own account in development or share an account and developers can progammatically reset the state of the database or persist it. The downside of using Firebase is that the code doesn\u2019t port too well, if you want to switch to a SQL db.\n\nPlease check out some of my articles on Medium. And, feel free to follow me on Google+, Twitter or LinkedIn."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-why-your-canvas-shapes-arent-smooth-aa2a3f450eb5?source=user_profile---------19----------------",
        "title": "Android: Why your Canvas shapes aren\u2019t smooth \u2013 Ali Muzaffar \u2013",
        "text": "A quick Google search will show that this question has been asked on StackOverflow several times and often results in the same answer; you need to set the ANTI_ALIAS_FLAG on your Paint object. For a lot of users this does not solve their problem. Here\u2019s why.\n\nWhen you draw on Canvas, you have two options.\n\nWhen you draw your shapes, setting the ANTI_ALIAS_FLAG on the Paint object should result in smooth shapes.\n\nYou can set the anti-alias flag in two ways:\n\nI have used the code below to draw directly on Canvas.\n\nAs you can see, anti-alias produces a smooth edge. This works because each time onDraw is called, the canvas is cleared and everything has to be redrawn. When I discuss how anti-aliasing works below, you\u2019ll see why this bit of information is important.\n\nIf we need to persist the drawn image; or you need to draw transparent pixels, it is a good idea to draw your shape on a Bitmap first and then draw that Bitmap on Canvas. We can do this with the code below.\n\nNote: I've initialized the Bitmap in the onDraw method which is not a great idea, however it makes reading the code snippets easier.\n\nThe result of this approach can be seen below, the image without anti-alias is not smooth, the one with anti-alias is better, however you can still make out that the edges are rough.\n\nIt\u2019s easy to not notice the problem with the snipped of code above. You draw a circle on a bitmap and the circle is updated each time onDraw is called. In theory, you are just redrawing over the previous image. However, the answer to the problem is in how anti-aliasing works.\n\nTo keep the story simple, anti-aliasing works by blending the foreground and background colors to create a smoother edge. In our example, since the background color is transparent and the foreground color is red, anti aliasing essentially makes the pixels on the edge go from solid to transparent gradually. This makes the edge look smooth to the eye.\n\nSo when we redraw on a bitmap, pixels will become increasingly solid and the edges become rougher. In the image below, I show what happens when the color red with 50% opacity is redraw repeatedly. As you can see, after about 3 redraws, the color is almost solid. This is what causes the edges of your shapes to appear rough even though you have anti-alias set.\n\nI\u2019ve modified the code above by modifying one line to clear the bitmap before each redraw. You don\u2019t have to clear the bitmap each time, you can draw a solid color on the bitmap if that suits your need better.\n\nNow, the bitmap is cleared before we draw on it again. This results in the sharp image shown below.\n\nNote: If we don\u2019t have to modify out bitmap often, we can simply initialize the bitmap and draw it once (in the if condition) and then in onDraw, simply draw the bitmap on Canvas. This would make our code perform better, as it would mean expensive operations like clearing all pixels and drawing the circle do not need to be performed again and again.\n\nPlease check out some of my articles on Medium. And, feel free to follow me on Google+, Twitter or LinkedIn."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/encrypt-and-persist-parceable-objects-on-disk-in-android-using-disklrucache-and-facebook-conceal-7b54d530a17f?source=user_profile---------20----------------",
        "title": "Encrypt and persist Parcelable objects on disk in Android using DiskLruCache and Facebook Conceal",
        "text": "You can use Jake Whartons\u2019 DiskLruCache and Facebook Conceal to encrypt Parcelable objects stored on disk.\n\nThere are a few reasons I can think off:\n\nInitially I had modified the code in DiskLruCache directly to support this, however, I found a better and simpler solution which I have shared below.\n\nYou can download the jars and native binaries here. Add the Conceal jar and the Android jar to your app/libs directory. Add the binaries to app/src/main/jniLibs directory.\n\nNext, add these rules to your proguard configuration.\n\nI initially got this code for this from Vald Sumstov\u2019s gist \u201cCache your data with parcelable and disklrucache\u201d. I did however modify it slightly. In my implementations, there is an Abstract class that I extend to create singletons, for storing on disk (long term) and for persisting as cache. The main difference between the 2 ParcelDiskStore and ParcelDiskCache is what directory they store the files in. If you store things in the cache directory, they can be purged by the system any time, if you store them in the file system or on an external disk, they will remain there till you run out of space. This is why the disk store has 50 MB allocated to it, since disk cache only has 5 MB allocated (you can choose whatever numbers you like). There are put and get methods in ParcelDiskStore and ParcelDiskCache that you can use to store and get objects.\n\nThe current implementations doesn't use versioning. This is because I didn't need it. You can look at the unit tests for DiskLruCache to get an idea of how to implement this.\n\nIn order to use this with Volley, you have to start with creating a wrapper around DiskLruCache which enables you to use DiskLruCache with Volley. An implementation is provided here. You then have to override their read and write methods and plug-in facebook conceal on the input and output streams much like I have in my abstract class.\n\nIf you've made it this far, we should hang out. Check out my other articles on Medium and feel free to follow me on Medium, Google+, Twitter or LinkedIn."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/text-input-is-no-longer-boring-on-android-you-re-welcome-internet-17380cd6a5d0?source=user_profile---------21----------------",
        "title": "Text input is no longer boring on Android! You\u2019re welcome, Internet!",
        "text": "Recently, I read an article on Medium that stated that text input is boring! Well, do be exact, Craig Dehner said that app login is boring. Fear not Craig, I've done my part to add excitement where no one really wanted it (IMHO).\n\nAs regular readers of my blog may know. As of late, I've been some what obsessed with EditText (no idea why). I wrote on extending EditText to make a PinEntryEditText; I wrote on creating a prefixed EditText then, quickly realized that prefixing or postfixing an EditText can be achieved using a TextDrawable (I've also used this to add text below and above a TextView). Perhaps this recent obsession made me ripe for targeting this feature.\n\nThere is a simple idea here. Let the EditText work as it normally does, I simply set the text color to transparent. Then I use the same paint settings as those for the EditText and simply draw text in the same position myself (overlaying the transparent text). I draw all the characters 0 to n-1, then for the nth character I add an X and Y offset to it\u2019s position and use value animator to change the values to the offsets from whatever value to zero. The last character also has it\u2019s own paint object allowing for me to modify it\u2019s text size, color, alpha etc. Since I'm drawing the text myself, I can draw any mask I want in it\u2019s place instead.\n\nIn addition to the animations you see above. You can also specify any Unicode character you wish to use as a character mask. This gives you a large variety of custom looks you can support. You can use a bullet, a star, a smiley face, anything!\n\nFor example, if you\u2019re working on a dating app, you could have a password mask that could look like this:\n\nThere is also a PinEntryEditText available that allows some of the same animations as the AnimatedEditText (pop-in and bottom-up animation) and also allows you to use any Unicode characters you want as masks.\n\nThere are a lot of limitations/known issues with the AnimatedEditText at the moment, you can see the list in the readme file on GitHub. However it should improve over time. For now the code is available with all of it\u2019s limitations on GitHub. Pull requests are appreciated.\n\nP.S. I swear, I've written about a lot of interesting stuff other than EditText. Please check out some of my articles on Medium. And feel free to follow me on Google+, Twitter or LinkedIn."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/textdrawable-to-display-emojis-and-unicode-characters-in-android-35614168b8ad?source=user_profile---------22----------------",
        "title": "TextDrawable to display emojis and Unicode characters in Android",
        "text": "Last week, I talked with a few people about the possibility of using TextDrawable to add a fixed prefix to an EditText. There are unfortunately a few different challenges. Which made this difficult for me:\n\nWell, this wasn't as hard as I thought it would have been. As a matter of fact it worked out rather nicely. Not only can you use it as a compound drawable, you can set it as a background as well. I've also implement the ability to ask it to resize the text drawn to fill a TextView\u2019s background.\n\nPossible use cases for an EditText can be:\n\nMost of the above is possible with an images or by stacking Views together, this is hopefully a cleaner solution if Unicode characters and text are good enough (and why won\u2019t this be \u263a).\n\nIts worth pointing out that since the drawable reserves its space when set as a compound drawable (left, right, top or bottom) that changing the text in this scenario doesn't work as expected.\n\nJust look at the demo below. The +61 and the \u2605 that you see in the EditText are drawn there with the TextDrawable. The \u263a that you see is also done with a TextDrawable, set as the background of a TextView, it is then being updated using a count down timer. As you can see, it can resize the text to ensure that it fits in the View\u2019s width which is 200dp.\n\nThe code is on gist.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/adding-a-prefix-to-an-edittext-2a17a62c77e1?source=user_profile---------23----------------",
        "title": "Adding a prefix to an EditText \u2013 Ali Muzaffar \u2013",
        "text": "Using a TextWatcher to add an always visible prefix is fairly complicated, if someone clicks in the middle of your prefix, you have to intercept the text and move it to the end or more the cursor to the end immediately. All of this can result in a LOT of code. You need to disable copy/paste, you need to handle onClick, you need to handle text change etc.\n\nAn other approach may be to put a TextView in the background and add padding to the EditText, however, it\u2019s tricky to align the background text and the EditText. The reason for that is that padding is in DIPs and text sizes are in SP. If you do get things to align perfectly, fragmentation of the EditText view, accessibility changes and different devices densities may still cause the text to show up unaligned. Look at compatibility issues here for more on EditText fragmentation.\n\nThe best way I can think of to address this issue is to create a custom EditText which literally uses the same paint object to draw the prefix text and and add padding according to the prefix text size. Below is some quick and dirty code to do the same. The below example prefixed the EditText with a country code for input of phone numbers (for example).\n\nAnother approach and in some respects a better approach may be to create a custom drawable and add it as a drawable right or drawable left. The custom drawable will simply draw the text. The reason I didn\u2019t choose this approach is:\n\nUPDATE 7th March 2016: I created a TextDrawable that you can use to add a prefix to an EditText or use emojis, Unicode characters or text as a Drawable.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/building-a-pinentryedittext-in-android-5f2eddcae5d3?source=user_profile---------24----------------",
        "title": "Building a PinEntryEditText in Android \u2013 Ali Muzaffar \u2013",
        "text": "Its worth pointing out that if you need to create functionality to enter pins in your app, you can probably get away with using a project like PinEntryView by Philio. For my purposes, I found that there was some issue with accessibility features in using Philio\u2019s solution. To be precise, when texts on a device were scaled using accessibility settings, the text scaled unpredictably. Philio provides a crap ton of options to configure that widget in almost every conceivable way. If it works for you then great! If you want to create your own, please read on.\n\nIts also worth pointing out that in Philios solution, he uses a ViewGroup that contains a hidden EditText for typing and X number of custom views depending on how many pins you code can be. In my solution, we are going to extends a EditText to create a 4 character PinEntryEditText and our solution while a little configurable, will be very \u201cbuilt for purpose\u201d. While I won\u2019t go into the details, you can probably create more configuration options to make the view more general purpose.\n\nThis is what the final widget will look like:\n\nWe extend EditText because this gives us a lot for free. Such as:\n\nWe will simply override the onDraw method and remove the super() call, this should prevent most of the EditText related features from not being drawn. We will then draw the lines or boxes or whatever to represent the placeholders for each digit and then read the characters input and draw each character in it\u2019s correct position.\n\nWe will also have to do the following:\n\nThis is rather straight forward and very mundane.\n\nThis step can be further thought of in 2 steps:\n\nBefore we start, create a layout file and add our PinEntryEditText to it, so we can see the changes we make to the EditText.\n\nNote the attributes we are using, all of them belong to EditText by default and contribute to making the PinEntryEditText look more and more like a pin entry screen.\n\nWe can accomplish this by removing anything set on the background and by not calling onDraw.\n\nWe can choose to draw lines, circles, squares here, whatever. There is a bit of a trick to this though and that is to calculate the spaces between the lines and not just the lines themselves. If you know what the space between the lines, you can calculate the start and end point of each line. You can choose to have a fixed size for the spaces or you can make them equal to the lines.\n\nIf you choose to make the spaces as wide as the lines, then the calculation for the length of the line/space is straight forward:\n\nThis works because if you have 4 lines, you\u2019ll have 3 spaces. The first line will start at the beginning of the available space and the last line will end at the end of the available space. The other lines should be spaced out evenly.\n\nIf you choose to make the spaces a fixed width, then you have to calculate just how wide each line will be, again, the formula for this is straight forward:\n\nFor our example, lets go ahead and assume that if space < 0 that we want everything evenly spaced out. Our code will look like this:\n\nIf you run this code, or just look at it in the editor, it will look like this:\n\nIf you change mSpace to -1, you\u2019ll see something like this:\n\nI encourage you to play around with it by adding padding to the layout and so on. The views should remain correctly spaced.\n\nNote: So far, we have simply used the paint object available with the EditText. We can define our own to control the colors of the line and make them different from the text.\n\nThis is straight forward because all the text attributes are being controlled by the EditText and we simply have to use the paint object in the EditText. This is a little complex, because we have to calculate the size of each character and draw it centered on the line. We may also want to add some padding between the characters and the line.\n\nWe are going to tie the number of characters to draw to the maxLength attribute. and then by default make the text hover 8dp above the drawn lines.\n\nYou could tie this value to lineSpacingExtra attribute if you wish and the space between the drawn lines to drawablePadding. The code for this will be similar to how I have done this for maxLength.\n\nIf you look at the code in the editor, and set the android:text attribute to some value, it will look something like this:\n\nWe do this by intercepting onClickListener and by setting a CustomSelectionActionModeCallback. OnClick we want to move the cursor to the end of the text and the ActionMode.Callback will disable all behaviour.\n\nWe can now run our app and the widget should be fully functional. You can add a TextWatcher to our PinEntryEditText in order to react to the characters input.\n\nThis is what our test code looks like:\n\nThe problem with the code above is that there is no way to tell when the PinEntryEditText is focused or when it\u2019s unfocused.\n\nWe can address this by creating a ColorStateList and setting the color of the lines depending on the state of the PinEntryEditText.\n\nThen simply in onDraw, we want to use mLinePaint to draw the lines instead of the Paint object returned by getPaint(). We also want to call updateColorsForLines(boolean) before drawing each line to make sure the correct color is drawn.\n\nThis works great, however, it\u2019s not picking colors from our theme, just using the default hard coded colors. We can use colors from our theme as follows:\n\nThe video below shows the final result.\n\nIf you have read through the code, you can probably see how easy it would be to add a mask (in case you don.t want to show the entered text). Simply instead of drawing the text, draw an astrix, circle or really anything else you want. You can see the full code at this gist.\n\nNext time, I\u2019ll walk you through making a Pattern lock view.\n\nAlso, in order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/looping-infinite-viewpager-with-page-indicator-in-android-ce741f25702a?source=user_profile---------25----------------",
        "title": "Looping/infinite ViewPager with page indicator in Android",
        "text": "When I first had to implement a looping ViewPager, my first thought was to just force the ViewPagerAdapter.getCount() method to return Integer.MAX_INT and then under ViewPagerAdapter.getItem() return position%count and\u2026. done! Something like this:\n\nThis immediately came up with three problems:\n\nI'm going to go ahead and ignore how much time I had already wasted trying various method to integrate ViewPagerIndicator into my project using gradle dependencies. I tried jitpack, forks people had made etc. and something or the other kept breaking. Finally I gave up and just included the source.\n\nHaving put some effort into integrating ViewPagerIndicator, I was going to use it!\n\nThe error to be exact:\n\nThere are a few ways to work around this.\n\nFirstly, you can return a new instance of your fragment, instead of returning a reference to previous fragment. So instead of the code snippet above for getItem(int), do something like this:\n\nSecond, if you must use the same fragment, you have to override destroyItem() then remove the fragment and recreate it. If there is a way to make this work, without having to recreate the Fragment, please let me know in the comments. This is not really much better than the first approach.\n\nLastly, there is an other option to reuse fragments from the array. By converting the FragmentPagerAdapter to a FragmentStatePagerAdapter, you may actually be able to reuse a Fragment. That\u2019s it! you don\u2019t need to override destroyItem() or do anything in it. The only issue is, that this will only work if you have at least 4 fragments. Otherwise you\u2019ll get a \u201cFragment already active\u201d error. I do briefly talk about how to work around this below.\n\nThe reason this works at all, comes down to the difference between FragmentPagerAdapter and FragmentStatePagerAdapter.\n\nSo, in effect, the Fragment is being removed from memory when it is off the screen, hence allowing reuse.\n\nAs you can see ViewPagerIndicator has gone a little crazy:\n\nThere is a lot of literature on the internet about replacing getCount() inside each type of ViewPagerIndicator with getRealCount() and adding a getRealCount() method to your PagerAdapter. This will only solve the problem of showing too many bullets, you also need to change the code, so that when you set the current item, you mod it with the real count. Finally, everywhere you see mCurrentPage or mSnapPage, mod it with real count. This works and you can see the results below. You can even do a diff on my code between CirclePageIndicator and LoopingPageIndicator so see the changes I made. This approach works for CirclePageIndicator and LinePageIndicator, you\u2019ll need to read through the code and modify the other PageIndicators if you need to use them as needed.\n\nOverall, this approach works and is viable since I haven\u2019t changed any code from the original library and I can still use it if I like. If you would like to reuse my code, you need to grab the LoopingPagerAdapter interface and the LoopingCirclePageIndicator. Also, you can now set getCount() in your Adapter to Integer.MAX_INT without any problem since it\u2019s not being used to draw the indicators any more.\n\nPersonally, when I went down this route, I realized that the call PageIndicator.setViewPager(ViewPager) is not part of the Android framework. PageIndicator is an interface which is part of the ViewPagerIndicator library. If you knew this already\u2026 you\u2019re better than me. ViewPagerIndicator has been around so long and so synonymous with Android development that you can\u2019t fault someone for thinking that the PageIndicator interface is part of the Android API.\n\nNote: If you have fewer than 4 fragments, and want to use FragmentStatePagerAdapter approach, you can probably get away \n\nwith hardcoding getRealCount() to 2 or 3 and creating duplicates of all the fragments.\n\nWhat I learned from digging through ViewPagerIndicators code is that they are all basically just CustomViews that attach a OnPageChangeListener to your ViewPager and just draw the components. Rather than go through all the business above, I could have just implement something like this myself in a fraction of the time. As a matter of fact, that\u2019s exactly what I did, and you can see the results in the video below.\n\nInstead of drawing the circles or lines or squares myself in a custom View, I can just use a Drawable. I created a drawable with a default state and one with a selected state.\n\nDepending on the indicators I want to show, just add Views to my layout with this set as the background resource. Set a View as selected to show the selected state.\n\nDoing it yourself has a few great benefits.\n\nYou can take a look at a sample implementation I did here. Keep in mind that it\u2019s a quick implementation.\n\nNote: If you have fewer than 4 fragments, and want to use FragmentStatePagerAdapter approach, you can probably get away \n\nwith passing to 2 or 3 for the page count and creating duplicates of all the fragments.\n\nWhen I first got stuck, my mind immediately thought \u201cthis must be a common problem. Others must have already solved it.\u201d And surely there were a few. The only one that I felt worked at all and should be mentioned was InfiniteViewPager. I download the source, built the demo app and it seemed to work great. Except for one thing. There was no page indication. I went ahead and tried it anyway with ViewPagerIndicator.\n\nWhat I found was that after the first set of page of scrolls, ViewPagerIndicator effectively would stop working. The reason for this is that InfiniteViewPager works by manipulating the underlying array. It constantly moves items from the front of the array to the back and vice versa as you move. This understandably is confusing for ViewPager. Even worst, this can result on your onPageSelected method being called twice, once by the InfiniteViewPagerAdapter and once by ViewPagerIndicator. Also, the position is not reliably correct, so trying to use position in onPageSelected to show any indication is not going to work.\n\nThere is a project called InfinitePageIndicator that sought to resolve this issue. If including this project into your code is viable for you, then great! In my case, I wanted to have an unmodifed instance of ViewPagerIndicator and I had other requirements which made the InfiniteViewPager impractical.\n\nYou can take a look at the demo app source I built which should showcase the various approaches I talked about. I hope this has been helpful.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/which-context-should-i-use-in-android-e3133d00772c?source=user_profile---------26----------------",
        "title": "Which Context should I use in Android? \u2013 Ali Muzaffar \u2013",
        "text": "The confusion stems from the fact that there are numerous ways to access Context, with (on the surface) no discernible differences. Below are four of the most common ways you may be able to access Context in an Activity.\n\nI personally like to think of Context as the state of your application at any given time. The application Context represents a global or base configuration of your application and an Activity or Service can build upon it and represents a configuration instance of your Application or a transitive state for it.\n\nIf you look at the source for android.content.Context, you see that Context is an abstract class and the comments on the class are as follows:\n\nWhat I take away from this is that Context provides a common implementation to access application level as well as system level resources. Application level resources may be accessing things like String resources [getResources()] or assets [getAssets()] and system-level resource is anything that you access with Context.getSystemService().\n\nAs a matter of fact, take a look at the comments on the methods and they seem to reinforce this notion:\n\nIt may be worth pointing out that in the Context abstract class, all of the above methods are abstract! Only one instance of getSystemService(Class) has an implementation and that invokes an abstract method. This means, the implementation for these should be provided mostly by the implementing classes, which include:\n\nLooking at the API documentation, the hierarchy of the classes looks like this:\n\nSince we know that Context itself is not providing any insight, we move down the tree and take a look at the ContextWrapper and realize that there isn't much there either. Since Application extends ContextWrapper, there isn't much to look at over there either since it doesn't override the implementation provided by ContextWrapper. This means that the implementation for Context is provided by the OS and is hidden from the API. You can take a look at the concrete implementation for Context by looking at the source for the ContextImpl class.\n\nThe first real insight comes in when you at the code for ContextThemeWrapper. Take a look at the following methods:\n\nWhat you hopefully realize is that anything that extends ContextThemeWrapper uses your theme when returning System resources and application resources. Also, you see that ContextThemeWrapper implements something called getBaseContext() which is used within the context.\n\nLooking through the ContextThemeWrapper, I realize 3 things.\n\nBaseContext effectively returns which ever context is being wrapped by ContextWrapper. By looking at the code, I can say that this is likely an Activity or Application however ContextWrapper has over 40 known direct and indirect children. The problem is that this means that what the method returns may be ambiguous and I would rather use getContext() or the Activity, FragmentActivity, ActionBarActivity etc. directly, so that I know what I\u2019m holding on to and that I\u2019m holding a reference to something that can cause a memory leak. Also, I have the additional benefit of being able to take advantage of methods that are provided by these classes.\n\nSide note: If you\u2019re using Calligraphy, a very popular Android library for handling fonts in Android, this library works by wrapping base context and setting itself as the new base context. Look at the section in the readme that says \u201cInject into Context\u201d. By setting itself as a ContextWrapper, it basically intercepts your Views before they are themed and adds the font support to them (yes, this is an over simplification).\n\nThe snippet of code I've shared above does not make this immediately clear, however, you can write your own tests to verify this. The best way I can think of doing this is to create a simple app with a ListView that uses android.R.layout.simple_list_item_1 to display items. Make your apps theme Light by default and then initialize your ArrayAdapter using getApplicationContext(). You\u2019ll notice that the text is either not visible or barely visible because it will be white by default whereas your theme should call for default text to be black. Change the code, so that your code initializes the array adapter with \u201cthis\u201d (i.e the Activity) or simply getContext() and you\u2019ll see the text turns black.\n\ngetApplicationContext() returns an instance of your Application class. Application is used to maintain a global state for your application. You may or may not have provided your own implementation of this class.\n\nShould you use Application context? Ask yourself the following questions:\n\nIn addition, it\u2019s worth pointing out the following:\n\nThe getThemedContext() method first made it\u2019s appearance in the ActionBar. The main purpose of this method was to provide the correct themed context to Views that you want to insert into the ActionBar. Think about an app that uses a light theme with a dark actionbar. Any text or custom view you put in the ActionBar, needs to be themed for a dark theme. This is where getThemedContext() is useful.\n\nAs of writing this, I can\u2019t find any other instances of getThemedContext() outside of ActionBar and ActionBarCompat, however we may see getThemedContext() appear in more places as more and more widgets gain the ability to be themed.\n\nUpdate: As Nanik Tolaram points out ToolbarActionBar and WindowDecorActionBar also contain a getThemedContext() methods. However, they are both part of an internal package so this really doesn\u2019t affect app developers.\n\nYou can use getContext() in pretty much every instance that isn't long living and doesn\u2019t involve inserting Views into your ActionBar. You can probably even use it in long living instances, just be careful to hold it in a WeakReference and to check to see if it\u2019s null.\n\nIf you\u2019re building dialogs using AlertDialog.Builder then you may have to inflate or build your Views before you have your Dialog object. Since Dialogs can be themed differently from the rest of your app, this presents a problem. For this reason getContext() was introduced in AlertDialog.Builder in API 11.\n\nWhat if you have an application that has some Views that should be themed with a dark theme and others that should be themed light? You could ofcourse go ahead and set textColor and background on each of the Views to accomoplish this, or you can wrap your context in a ContextThemeWrapper and supply it with the theme to use to resolve your Views and Resources.\n\nYou can also use the same approach if you want your Dialogs to use a different theme:\n\nI hope this has helped demystify which Context to use for you a bit. Do you think I got something wrong? Do you want to add something to the article? Let me know in the comments.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/using-concurrency-and-speed-and-performance-on-android-d00ab4c5c8e3?source=user_profile---------27----------------",
        "title": "Using concurrency to improve speed and performance in Android",
        "text": "It is well known that all UI updates in Android happen on the UI thread (also known as the main thread). Any operations on this thread will block UI updates and so AsyncTask, IntentService and Threads are used when heavy computation is needed. As a matter of fact, I wrote on at least 8 ways to do asynchronous processing in Android not too long ago. However, AsyncTasks in Android are executed on a single background thread and the same is true for IntentService. So, what is a developer to do?\n\nUpdate: As Marco Kotz points out, you can use a ThreadPool Executor with AsyncTask so that more than one background thread can be used by your AsyncTasks.\n\nIn most scenarios, you do not have to spawn multiple threads, simply spinning off AsyncTasks or queuing operations for IntentService is more than enough. However, when you truly needs multiple threads, more often than not, I've seen developers simply spin-off plain old Threads.\n\nThere are a few problems with this approach. For one thing, the operating system limits the number of connections to the same domain to (I believe) four. Which means, this code is not really doing what you think it is doing. It created threads that have to wait on other threads to complete before they can begin their operation. Also, each thread is being created, used to perform a task, and then destroyed. There is no reuse.\n\nLets say for example that you want to develop a burst shooting app that takes 10 shots a second from the Camera preview (or more). The features of the app could be something as follows:\n\nUnderstandably, if you did all of this on the main UI thread. You would not get a lot of performance out of your app. The only way you would stand a chance would be to cache the camera preview data and process it while the UI is idle.\n\nAn alternative might be to create a long running HandlerThread that can be used to receive your camera preview on a background thread and do all of this processing. While this would work better, there would be too much of a delay between subsequent burst shots because of all the processing required.\n\nNote: If you need to learn more above HandlerThreads and how to use them, be sure to read my post on HandlerThreads.\n\nSince everything is being done on one background Thread, our main performance benefit here is that our Thread is long running and isn\u2019t being destroyed and recreated. However, the thread is being shared by a lot of expensive operations which is can only do in a linear manner.\n\nWe could create a second HandlerThread to process our images and a third to write them to the disk and a fourth to perform our upload to the server. We would be able to take pictures faster, however, these threads would still be dependant on each other in a linear manner. There is no true concurrency. We would be able to take pictures faster, however, because of the time required to process each image, the users would still perceive a big a lag between when they click a button and the thumbnails are displayed.\n\nWhile we could just spin off a lot of threads as needed, there is a time cost associated with creating a thread and destroying it. We also, do not want to create more threads than we need and want to make full use of our available hardware. Too many threads can affect the performance by eating up CPU cycles. The solution is to use a ThreadPool.\n\nCreating a ThreadPool for use in your app is straight forward, start by creating a Singleton which will represent your ThreadPool.\n\nThen in the code above, simply change the Handler callback to:\n\nThat\u2019s it! The performance improvement will be noticeable, just look at the videos below!\n\nThe advantage here is that we can define our pool size and even specify how long to keep threads around before reclaiming them. We can also create different ThreadPools for different operations or use one ThreadPool for many. Just be careful to clean up properly when you\u2019re done with the threads.\n\nWe can even create ThreadPools that specialize in various jobs, one ThreadPool to convert the data to Bitmaps, one to write the data out to disk and a third to upload the Bitmaps to the server. In doing so, if our ThreadPool has a max of 4 threads, we can convert, write and upload 4 images at a time instead of just one. The user will see 4 images show up at a time rather than one.\n\nThe above is a simplified example, however, the full code for my project is on GitHub and you can take a look and give me some feedback.\n\nYou can also check out the demo app on Google Play.\n\nBefore implementing ThreadPool: If you can, follow the timer on top of the screen as the thumbnails begin the show up at the bottom. Since I\u2019ve taken all operations except the notifyDataSetChanged() on the adapter off the main thread, the counter should continue to run smoothly.\n\nAfter implementing ThreadPool: The counter on top of the screen should still run smoothly, however, image thumbnails are showing up a lot faster.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/handlerthreads-and-why-you-should-be-using-them-in-your-android-apps-dc8bf1540341?source=user_profile---------28----------------",
        "title": "HandlerThreads and why you should be using them in your Android apps",
        "text": "This was my first and last encounter with them for a while. It seemed like a very low level API and something that may not necessarily be meant to be used by app developers. I had rarely (almost never) seen it used in any code sample for how to do perform asynchronous tasks in Android. I did mentioned them as a way to do asynchronous processing in my article 8 ways to do asynchronous processing in Android and counting, even there, I deferred to just regular Theads and ignored how HandlerThreads are used.\n\nIt wasn't till a recent conversation with Colt McAnlis at the BABBQ15 that I heard the mentions of HandlerThreads again. The difference this time was that they were in context of how they process commands from a queue and how this makes for situations where you have to perform a lot of asynchronous tasks. This sounded like just about every application I have written, so why weren't these mentioned more readily in Android Development literature?\n\nSince the BABBQ, I\u2019ve looked some into HandlerThreads and from what I figure, there are 2 main reasons why developers/educators may be inclined to not mention HandlerThreads.\n\nAsyncTasks have a single thread dedicated to them, so if you spin off more than one AsyncTask, they aren\u2019t truly asynchronous. This is not necessarily a problem, but it is restrictive if you do want multiple threads. With each AsyncTask that is spun off, a thread is created and destroyed which, if you have a lot of AsyncTasks is a performance issue.\n\nServices are executed on the main thread, so they aren't really asynchronous. You have to create a separate thread for them to use if you want them to be asynchronous. With both of these you still have a new thread being created and destroyed.\n\nAs Ian Lake points out (link to discussion on Google+), IntentService does use HandlerThread internally (link to source) and this does make them a great option to use. He also points out that there is ever only one instance of a Service in existence at any given time and it has only one HandlerThread. This means that if you need more than one thing to happen at the same time, IntentServices may not be a good option. However, looking at the source for the IntentService, it does illustrate that the techniques discussed below are in fact used within the Android SDK itself and as such it is a design pattern you should be familiar with.\n\nThere are 2 main ways that I found to use HandlerThreads.\n\nThe implementation is very straight forward.\n\nAs I mentioned earlier, we create a new HandlerThread and give it any name. We then start the HandlerThread, get the Looper for the HandlerThread and pass it to a handler.\n\nThen, in order to use it, you simply have to post Runnable to the Handler thread.\n\nIf you have a few different tasks you would like to perform on the background thread, it may be a better idea to extend handler and adding handling for different messages. Note, there is still one background thread here. If you want more threads, you\u2019ll have to create more Handlers and HandlerThreads.\n\nIMPORTANT: Remember to call handlerThread.quit() when you are done with the background thread or on your activities onDestroy() method.\n\nAs you can see, Option 1 is probably best suited in situations where you don\u2019t have a lot of code. I haven\u2019t covered the scenario of posting back the result to the main thread either.\n\nThere are two approaches that are best used here. You can either make a LocalBroadcast with the result:\n\nThe great thing about this approach is that you can simply receive the result on the Main thread without having to do anything extra. The down side is that the method is a lot slower than using a callback.\n\nIn order to use a callback, you can explicitly get a Handler on the main thread:\n\nOr, if you are creating the Handler on the main thread, simply calling new Handler() should return a Handler on the main thread.\n\nImplementation of HandlerThreads by creating a custom HandlerThread, is simply a combination of the techniques that I have shown above. There is a great blog post by Nikita that explains how to do this. He also has a great post in which he explain Looper, Handler and HandlerThread and the interaction between them I highly recommend reading this to get a deeper understanding of how Android apps work."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/securing-your-android-apps-securitymatters-3e919ccf3f7b?source=user_profile---------29----------------",
        "title": "Securing your Android apps #SecurityMatters \u2013 Ali Muzaffar \u2013",
        "text": "Its nearly impossible for me to cover every scenario for you, most apps will have fairly distinctive security requirements, however we can follow the 80\u201320 rule and cover the most common app security aspects. That being said, I strongly recommend you read Android Security Tips.\n\nThere are a few different ways in which a malicious hacker can get a hold of your data by exploiting network traffic, the most common ones are:\n\nThe absolute basics here are:\n\nIf you want to use self signed certificates securely and/or want protection against MITM attacks, you should be using a technique known as Certificate and public key pinning or some times referred to as Certificate pinning.\n\nNormally certificates are validated by checking a signature hierarchy store on our device. MyCert is signed by IntermediateCert which is signed by RootCert, and RootCert is listed in your devices \u201ccertificates to trust\u201d store.\n\nNote: The problem that often comes up on Android is that the \u201ccertificates to trust\u201d does not contain some well known certificate issuing authorities. This technique can help you bypass that problem as well.\n\nIn certificate pinning, you ignore the standard procedure of checking the signature hierarchy and tell your app to only trust a certain certificate. This means that if someone does a Man-In-The-Middle attack, your application will reject his certificate even if it is issues by the president of VeriSign himself.\n\nHere are a few good resource on implementing this in Android.\n\nThis area is covered well by Android Security Tips. The truth is, the most secure way to store data on a device, is to not save data on the device to start with. Unless you have a security team auditing your app looking for all possible loopholes, if possible, avoid storing truly sensitive data on the device. That being said, since I know you\u2019re a renegade, there two main scenarios here:\n\nIf security is essential, you should not store any data on external storage. The main reason for this is that data on external storage is globally readable and writeable.\n\nIf your app happens to be one that needs to store large quantities of encrypted data on the device, then you may not have the option to only use internal storage. Again, this is highly unlikely, because some full-HD games can store almost a gig of data on your phones internal storage. However, if you must use external storage, my advice is:\n\nAndroid internal storage is fairly secure because of Android sand boxing its apps by implementing a UID level control on the files. However, because of issues such as rooting and ADB allowing developers to copy data off devices, internal storage is not as secure as some apps would like.\n\nWhile a user having root level access on a device is not technically a threat, we should do out best to protect sensitive data.\n\nInternal storage includes but is not limited to:\n\nThe Android Security Tips covers how to deal with interprocess communication and reading writing files to internal storage.\n\nWhat I would like to add, again, is a recommendation to save your data as a binary serialized format, considering compressing and encrypting the data. Something like Facebook Conceal can provide fast encryption and decryption of files. If you do implement AES, Blowfish or any other form of encryption yourself, generate your passphrase or key using a SecureRandom number generator and save your encryption key in something like KeyStore, if it needs to be reused.\n\nIn general, you shouldn't cache or put into temporary storage anything sensitive. Temporary files and cache may include things like network images and HTTP cache. Most libraries should implement a certain amount a security for the HTTP cache and images are generally not a security issue. If either of these need to be secured, you should:\n\nThis is perhaps the easiest way to persist data for your app. There are some implementations of secured SharedPreferences on the internet that hash the key and encrypt the value. While this is better than nothing, I would recommend not storing sensitive data in SharedPreferences. If you must, using an implementation such as the one linked earlier and, do not hard code your security key in your code, instead use a SecureRandom number generator to create a random key and save your encryption key in something like KeyStore for reuse.\n\nDatabase encryption is a bit of a polarizing topic on-line. Generally people fall into one of three categories:\n\nThis in general sums up the advice I could possibly have as well, I personally prefer the second approach. However, as mentioned earlier, the best way to secure data, is to not persist it to start with.\n\nSQLCipher I personally have nothing against, however, as a developer, using SQLCipher and simply implementing it alone feels like overkills for most apps. It also bloats the size of your apk as it bundles a version of SQLite into your app.\n\nSQLCipher is also fairly hard to work with with. Querying the database on a device adds a few steps and requires SQLCiphers tools. Overall, I really like SQLCipher as an option, but your data must be super sensitive to justify the development and code complexity overhead.\n\nThrough the course of this article, I've mentioned various things that technically come under the category of good coding practices. In this section I'm going to list as many of them as I can think off. Feel free to message me and ask me to add more or respond to this article with more best practices.\n\nThis was already covered to some extent.\n\nAlways set a maximum input size on all your fields. Validate the input to ensure that it matches your expectation (length, numeric, alpha numeric, etc.).\n\nIf user input is being used for URL parameter values, make sure to use URLEncode to escape user input.\n\nIf user input is being used for SQL queries, make sure to SQL escape the input if you are building the query yourself. Best way to avoid SQL injection attacks is to not build SQL queries yourself. Instead use the API provided by the framework.\n\nIf user input is being written to an XML or JSON file, make sure to escape it.\n\nPro tip: Apache commons has an StringEscapeUtils class that can escape strings for most common formats.\n\nThis is covered above a few times. If you are using AES, Blowfish or an other form of encryption that requires a pass phrase or encryption key, instead of hard coding it into your source, generate it with a SecureRandom number generator and store it in something like KeyStore for reuse.\n\nI would read Android Security Tips on this one as it cover the topic in good detail. I would however add that with Broadcasts, always use LocalBroadcastManager if you don\u2019t want other apps to intercept your broadcasts. If your broadcast receiver does not need to intercept broadcasts from other apps, register and un-register them with the LocalBroadcastManager. If you want to listen to communication across different apps, then consider adding a permissionLevel=\u201dsignature\u201d to your BroadcastReceiver.\n\nIn order to build great Android apps, read more of my articles."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/the-basics-of-unit-and-instrumentation-testing-on-android-7f3790e77bd?source=user_profile---------30----------------",
        "title": "The basics of Unit and Instrumentation Testing on Android",
        "text": "There has been a lot written about unit testing and instrumentation testing on the internet. However, I felt that there is a need for a very basic explanation of how to add Unit tests and Instrument tests to your android Application. In this article I\u2019m going to give you the bare basics of writing both Unit and Instrumentation tests, no mocking, no injection patters, nothing.\n\nTake any existing project you have with some decent amount of code. You will need:\n\nOften Unit tests are referred to as \u201clocal tests\u201d or \u201clocal unit tests\u201d. The main reason for this seems to be that you want to be able to run tests without a device or an emulator attached.\n\nUnit tests cannot test the UI for your app without mocking objects such as an Activity.\n\nInstrumentation tests run on a device or an emulator. In the background, your app will be installed and then a testing app will also be installed which will control your app, lunching it and running UI tests as needed.\n\nInstrumentation tests can be used to test none UI logic as well. They are especially useful when you need to test code that has a dependency on a context.\n\nLets start with the unit tests as they are fairly easy to set-up and less prone to quirks.\n\nStart by adding a dependency on JUnit 4 in your project. The dependency is of type `testCompile` which means that the dependencies is only required to compile the test source of the project. By default, also includes the compiled production classes and the compile time dependencies.\n\nAfter you add the dependency, make sure to synchronize your project.\n\nAndroid studio should have created the folders structure for unit tests by default, if not make sure the following directory structure exists. You can check if the directory structure exists or create it in Explorer or Finder.\n\nYou should ideally place your unit tests code in the same package as the package in which your code reside in your source. This is not required, but it is considered a good practice.\n\nIf you want to test the following code:\n\nWe will begin by creating DateUtilsTest in our test directory under the package com.alimuzaffar.examplecode.util. The directory structure will look as follows:\n\nOur DateUtilsTest class will be as follows:\n\nIn order to run the Unit tests, you need to make sure that Gradle is synchronized and then from the Build Variants, under Test Artifacts select \u201cUnit Tests\u201d\n\nThe project structure changes a bit and the test classes under the test directory should become activated. Your project structure should look something like this:\n\nIn order to run the unit test, select the unit test you want to run and select Run \u2018<Unit Test Name>\u2019.\n\nWhen the unit tests are run, successfully or otherwise, you should be able to see this in the run menu at the bottom of the screen.\n\nTo write instrumentation tests, we don\u2019t need to add any new dependencies. By default, instrumentation tests are most suited for checking values of UI components when an activity is run. However, as I mentioned earlier, instrumentation tests work by using a test app to control your app. For this reason any actions you take on the UI thread will throw an exception. There are two ways around this. One would be to use @UiThreadTest annotation, or using espresso.\n\nSince espresso seems to be the way forward, we\u2019ll use espresso to take actions on the main thread such as button clicks, change text etc. Add a dependency on espresso:\n\nInstrumentation tests are created in an androidTest folder. Just like unit tests, under androidTest, you should create the same package structure as that of your app.\n\nIf you want to test a simple activity, you should create you test class in the same package as your Activity.\n\nIn order to test the activity, we use an instance of the ActivityInstrumentationTestCase2<T> class. We can setup our test in the setUp method and then write a test to make sure our setup was successful.\n\nNote: All test methods need to start with testXXX or be annotated with the @Test annotation.\n\nIn order to run the instrumentation test, you need to select Android Instrumentation Tests under Test Artifact in the Build Variants window.\n\nYou should see the project structure change and the classes under the androidTest folder should now be visible.\n\nIn order to run the test, do a clean build of your project (this is not required, but you can have some odd issues when you switch between Unit Tests and Instrumentation Tests and this just helps reduce issues). Then right click on the Instrumentation test you want to run and select Run \u2018<InstrumentationTestName>\u2019.\n\nWhen the project is built, you should be prompted to run it on an emulator or a device. In my experience it should work on most versions of Android, however, with espresso, instrumentation tests seem to mostly work on Android 5.1+.\n\nSo far, we have been able to get a reference to the activity and from it, a reference to various UI components. If you want to read from UI components or do other operations that don\u2019t require the UI thread, you should be able to do this like so:\n\nYou don\u2019t have to create a different method for each test, however, it is a good practice. If you want to read and write from the database, you can do this like so:\n\nIf you need a reference to the context, then remember, we got one in our setUp() method. Or else, you can just use getActivity().\n\nIf you do try to change the value of a View or do any other operations that must be executed on the main thread, you\u2019ll get an error:\n\nThere are 2 solutions to this, you can either annotate your method with android.test.UiThreadTest annotation.\n\nThe second option is to use the new espresso framework.\n\nThe typeText action will only work on EditText and other Views that can be edited (cannot be used on TextView). There are other actions you can perform such as replaceText() and click(), closeSoftKeyboard() etc.\n\nThat in short are the basics of testing on Android. Using these simple techniques, you won\u2019t be able to provide vast code coverage, but you should be able to do any where between 20% \u2014 40% code coverage at lease depending on how complex your app is and how well the code is structured. In order to do more, you will start to look into refactoring your code and mocking objects."
    },
    {
        "url": "https://android.jlelse.eu/tame-your-android-apps-power-consumption-optimize-for-battery-life-6d19d316aa06?source=user_profile---------31----------------",
        "title": "Tame your Android apps power consumption \u2014 optimize for battery life",
        "text": "When it comes to battery performance, most of the literature will tell you to concentrate of 3 major areas:\n\nThis is 100% true, networking is by far the most battery intensive operations for most apps. WakeLocks followed by sensor use are the other two major areas and GPS happens to be one of the most commonly used sensor. There are however other areas where you can tweak your app which can result in lower battery usage; some of the techniques discussed below are especially important if your app support Android Wear devices.\n\nAndroid developers often neglect what impact their app has on battery life. Most of us do not have a background in embedded systems and so we are not conditioned to think about how our design decisions and code can affect battery life.\n\nAn app that is greedy for power can leave a bad impression with users and result in bad reviews, and uninstalls. Take a look at the reviews for the Facebook app some time. Even though it is the most popular app in the world, it consistently has bad reviews that mention battery drain as a source of user dissatisfaction. The same is true for the Chrome browser. At present, on my phone, these are the only non-system apps that show up in the battery performance screen.\n\nMost apps do not have the staying power of the Facebook app or Chrome browser, and so a bad impression can cost us users. Users are far more likely to share a bad experience with others than they are to share a good experience. This mean that if your app has a reputation for being a battery hog, this could cost you a lot of potential users as well.\n\nIn general, there are few strategies to keep in mind when trying to optimize for power use.\n\nThe win from this strategy is obvious. If we perform tasks while the phone is charging, this will not count towards battery drain. Unless something has to be done right away or shortly, we should differ it till the phone is plugged in. A good example of this is data synchronization with web services for something like the Contacts app or for the Photo gallery app.\n\nThere is a power cost of using sensors, radio and even threads. If we can request data once (for example, GPS coordinates) and use it multiple times for different operations, this will be far more efficient than requesting GPS coordinates every time. As a matter of fact, if the phone is going to wake for any particular job, this is a good time to do any background processing your app wants as well as the cost of waking the phone will be borne by multiple apps. Multiple apps will do work in a batch rather than in an ad hoc manner. This is discussed below in depth when I discuss networking and sensors.\n\nCache can help us avoid networking operations and background processing all of which helps save power. A good example of this would be to download and re-sample bitmaps. These are discussed is greater detail below.\n\nGoogle Play Services are an amazing set of API that can make development so much easier that it\u2019s hard to avoid them. That being said, if you use Google Play Services to get GPS coordinates or for any other purpose, the power cost of this is spread out across various apps.\n\nIn general, networking on your device has various states, if there is data being sent and received, your device is fully awake. If data has not been sent and received for a while, your device will start to step down into a standby state. Your device will go from fully awake, to a low power mode to standby.\n\nTo get a better understanding of this, you can read Optimizing Downloads for Efficient Network Access on Android Developers site.\n\nThere are a few things to keep in mind when it comes to optimizing for networking.\n\nIts very easy to get into a pattern where you request a bit of data, wait a while, then request more data. The problem with this approach is that you will constantly go from a standby mode to a wake mode and there is a power cost associated with doing this. You ideally want to go into full power mode, stay there for as little of a period of time and do as much as possible and then go back into standby.\n\nEach XmlHttpRequest (XHR) results in the radio waking and then staying awake for a while listing for a response. In the worst case scenario, you could wake the radio, as soon as it goes back to sleep.\n\nThe best way to avoid this pattern is to distinguish between what has to happen now, and what you can do later. You want to batch together as many network operations as possible. This will allow your radio to enter full power once and stay in full or low power mode for only as long as needed.\n\nSince it\u2019s not possible to predict what the user may want to do, it is a good idea to prefetch as much data as possible in order to avoid unnecessary requests. A good example of this is something like an image gallery where we may want to download and generate thumbnails of a few screens worth of images because it is highly likely the users will scroll through the images.\n\nIt is better to perform one large download compared to various small operations. This is a little counter intuitive when compared to AJAX on the web. The reason for this is that a large download allows your radio to enter into a low power mode while various small downloads will keep you in full power mode.\n\nThis may seem like it contradicts point #3. However, it is extremely common to use JSON or XML for data transfer, even though the data will be compressed using GZIP, it will still be far larger than a binary serialized format. Using a binary serialized format, such as a FlatBuffer, you can transfer the same amount of data in a fraction of the size. If your networking has to be awake for a shorter period of time, this will save you power. Also, parsing text formats such as JSON are more processor intensive than parsing binary formats (saving you battery).\n\nCaching aggressively can also help reduce the number of networking operations and hence save a lot of power.\n\nDiffering request till when the device is plugged in for recharging or is on Wi-Fi can dramatically increase battery performance. In order to make it easier for us to differ tasks till the device is plugged in and/or on WIFI, Google has recently provided the GcmNetworkManager API. You can use the API to schedule network-oriented tasks, and let Google Play services batch network operations across the system. There is also a JobScheduler API that was released as part of Android L.\n\nI\u2019ve touch upon WakeLocks in this article already without going into depth about them. Honestly, you can do an entire artcile on them alone. To keep it brief, if there is some work that has to be done when your phone is asleep, you can use WakeLocks to take the phone out of sleep mode. As you can imagine that a lot of apps on a device doing the same could mean that your app is repeatedly being woken up and never really sleeping. You could also forget to release a WakeLock and hence drain your phones battery.\n\nFor this reason, if you are using a WakeLock, you should use the version of WakeLock.acquire() that takes a time-out and always remember to release your WakeLocks. This does not however solve the problem of different apps constantly waking up the device which is where the JobScheduler API and the GcmNetworkManager API is extremely useful. These API\u2019s can batch jobs together for you with other apps hence avoiding the scenario where different apps are waking up the phone every few minutes.\n\nWakeLocks are often used with Timers. If you app uses Timers, use inexact timers if applicable. Android can delay these a few minutes in order to batch operations together.\n\nThere are too many sensors to cover individually, instead I\u2019m going to cover GPS which is the main culprit for most apps and give you general guidelines for others.\n\nThe worst culprit for battery drain in sensors tends to be the GPS. It is one of the most commonly used sensors and often developers will request exact coordinates when just a rough location will be enough. Getting a rough user location through the network or last known user location has negligible effect on the battery drain, however requesting coarse or fine location though the GPS is far more draining.\n\nThe best advice here is to use the last known location or request passive location updates if applicable and avoid using the GPS altogether. If you must use the GPS, determine whether coarse location is enough and unregister your location listener after coordinates have been received.\n\nIf a fine location is needed, then set a time-out for listening for the users location, such as 30 seconds. If you need constant location updates then set as large of an update interval as is feasible.\n\nLocation Strategies on the Android Developers site is a good read for this and so is the deep dive into location post on the Android developers blog (its old, but still worth a read).\n\nAlso, using FusedLocationProvideApi is a good idea as it is more efficient than using the GPS API directly.\n\nThe rule for most sensors is fairly straight forward, turn them off as soon as you have the data that you need. Most sensors require you to subscribe or register for updates, once you are done, you should unregister or unsubscribe in order to prevent wasting battery. If you use a sensor and you can work off the cached data in the future, do so.\n\nThese will not make a huge difference on your phone, but may make a big difference in Android Wear devices.\n\nThe display is the number of cause of battery drain for your phone. Avoid using WakeLock unless you need it. In OLED screens, individual pixels emit light. This means using dark background can save you power. Its a minor win (nearly negligible) on phones, however on Android Wear devices, this can make a major difference. Keep in mind that LCD screen work differently and using a dark pixels will not result in any savings.\n\nGenerally, turning on hardware acceleration is considered a good thing. However, to simplify a complex problem, hardware acceleration means more silicon on your device being used and hence more battery drain. Do not activate hardware acceleration unless you need it. While on phones and tablets this may not make a big difference, the battery drain can be significant for Android Wear watch faces (for example). Having hardware acceleration activated can drain the battery significantly for Android Wear.\n\nDevelopers often default to use Wi-Fi or networking on a device if it is available. Now even some Android Wear devices have Wi-Fi built in. However, Bluetooth is far more battery efficient than Wi-Fi. If you find yourself trying to decide between Wi-Fi or Bluetooth in your Android app, from a battery performance point of view, Bluetooth is the clear winning. On Phones however, Wi-Fi is always activated and its simply easier to use it. However, when it comes to communication with your Android Wear device, always use Bluetooth over Wi-Fi. Ideally, despite having Wi-Fi, for any such networking operations, your Android Wear device should always differ to the phone which should communicate via Bluetooth to the Android Wear device.\n\nIf your app has to perform a lot of minor tasks in the background, using a thread-pool or one long living thread to perform these tasks is preferred over using AsyncTasks or Threads. There is power cost and time cost to creating a thread and destroying it, if you do this a lot, it can have an affect not just on your battery, but also on your apps performance.\n\nThe Battery Stats and Battery Historian tool is part of the Android SDK. They can give you a visual overview of how WakeLocks are being used on your device, who is requesting them and how long are they holding on to them. It can also give you an idea of how often and for how long your mobile radio is being activated.\n\nAlso, starting in Android L, under Settings > Battery you can select an app and see for how long they have been holding on to WakeLock and even uninstall apps that are abusing WakeLock from there."
    },
    {
        "url": "https://android.jlelse.eu/i-have-an-idea-for-an-app-what-should-i-do-5f39bc85986d?source=user_profile---------32----------------",
        "title": "I have an idea for an app! What should I do? \u2013",
        "text": "A lot of technical people think that there is nothing they can do without getting partners or technical resources on board. This is simply not true. Before you spend even a penny or try to pay to get technical users on board, take some paper and start sketching the screens for your apps and start planning the interaction between the screens.\n\nWhat does \u2018Screen A\u2019 look like? When I press \u2018Button A\u2019 what happens? If the user is registered, \u2018Awesome Feature Screen\u2019 is shown or else the \u2018Login Screen\u2019 is shown.\n\nThe sketches don\u2019t have to be professional, they can just be pencil outlines of features on each screen. Sketch all your screens out using a paper and pencil. Doing this will allow you to see what interactions make sense and what needs to be revised.\n\nDoing all the screens and interactions between them by hand will take a lot of time. Once you have put the time in and have the sketches in hand, people are far more likely to take you seriously. This is because you have put the time and effort into your idea and shown some commitment to the project and not simply told someone else what your idea is and asked them to build your business for you.\n\nWhen all the screens are done, this is a good time to get designers involved. It is also a good time to look for a partner.\n\nIf you plan to get seed funding, I would recommend a partner who understands the technology industry and its business well. Ideally they have experience with technology start-ups. I\u2019ll refrain from giving you advice on where to find such a partner, but the key is networking\u2026 lots and lots of networking.\n\nIf you plan to finance the business yourself, look for a partners who is a designer in order to keeps the costs down, plus you will need a designer repeatedly throughout the development phase so it helps if you don\u2019t have to pay for a designer\u2019s services.\n\nNow that you have your sketches, you have a great platform for communicating your vision to designers and user experience experts. Ideally, you would want to get someone on board who is a user experience (UX) expert and have them finalize your sketches before you go to a designer, however, you can skip this step as time and money are both in short supply. If your designer has been working with apps for a while, he should be able to guide you as to the best practices on both iOS and Android or at least give you a design and interaction that is generic enough so as to not look out of place on either platform.\n\nLook for a designer locally, someone you can sit with and work on the product with. It may be cheaper to go to one of the many online sites like 99designs.com to get designs done. However you\u2019ll find communicating with the designers and getting good results is far more hit and miss than if you can sit with the designer and work with them.\n\nThe reason you get a designer involved before developers is that design often dictates a lot of the decisions that a developer has to make and they will often be held up if one asset or the other is not available. While it is perfectly feasible to give a developer your sketches and tell them to get started, keep in mind that your designer will be able to layout your sketches on phone templates and tell you whether your layouts work well on small screens.\n\nBe open to criticisms of your layouts and interactions. Designers have experience doing this sort of work, trust them and negotiate with the designer where you disagree. When your screens are professionally laid out, this would be a great time to get developers on board and look for investors if needed.\n\nThis section is honestly something that I have been researching and probably deserves its own article. At present I cannot say much more than do a quick search for seed funding and incubators in your area. You could try to get venture capitalists on board, however, without a working product or at least a prototype not too many people are likely to invest in your idea and even if they do, you\u2019ll lose a large chunk of your ownership and probably not even get enough for it to go a year. Incubators are a much better idea. Incubators will give you some seed funding, provide access to experts in your field and best yet, you can show up with just an idea without having a registered a company and they will still take you seriously. Though, you should have a start-up registered at this point if you are looking for funding so as to limit your liability.\n\nThe main reason for getting developers involved at this later stage is that your final app design and layout will affect programming decisions. It will also clearly communicate to the developers what your vision is. You\u2019ll be surprised how ambiguous words can be.\n\nThe key at this stage is to be open to criticism and change. Developers for a platform have a lot of insight as to what works well on that platform and what does not. Often designs work in Photoshop but don\u2019t translate well on to an actual devices and more often than not, you don\u2019t figure this out until the work has already been done. App developers will also have input on what the API should be like and the back-end/API developer will have input on what the app should be doing (if you don\u2019t know what I mean by back-end or API, you probably should look for a partner).\n\nYour first task should be to find the right developer(s). You will likely need an Android and/or iOS developer and a back-end developer to develop your APIs if needed. You could have your app developer work on the API as well, but keep in mind that such a generalist may take a lot longer and might not do as good of a job as a specialists. Ask developers what they have worked on, if they have some apps or websites you can look at and if they have any references. You can look for developers locally (something I cannot recommend enough) or go to a site like Freelancer.com and look for them. Ideally, your designer should be able to recommend someone they have worked with in the past.\n\nThe second task is to sit down and estimate how long the product, as you have envisioned it will take. Keep in mind that you need to put out a Minimum Viable Product (MVP) in order to test your assumptions about the viability of the product. Decide what you want your time to market to be and what\u2019s the MVP in this period of time. Remember, you can\u2019t launch a perfect app with your perfect features on the first go, it has to be the minimum viable product to test feasibility and allow you to \u201cpivot\u201d your idea if needed.\n\nI would recommend not spending more than 3 months (full time work in Developer hours, per platform) in development. The MVP is extremely important, remove the wrong features and your app will fail. Keep too many features and you\u2019ll never get it to market. If your development time is going over the 3 months mark, you need to refine your idea further.\n\nFinally, agree on milestones for the project, I would recommend 2 week milestones so you can be sure that the developers are making progress and review the project every 2 weeks to ensure you are on target.\n\nIf you follow the above steps and have no bad luck, I would expect this to take 6 months end to end. If you are super aggressive with your research, developing your sketches, getting your designer on board and having him do the final layouts and designs, then maybe 4 months.\n\nThis largely depends on your app, what kind of infrastructure it takes to bring it to life, and where in the world your designers and developers are located. Look up the average salaries for designers and developers in your area, and you should be able to estimate how much the development effort will cost. Once you have your back-end developer and app developers on board, you can ask them to estimate how much the infrastructure will cost. To ballpark infrastructure cost, if you have a cloud based infrastructure, it will cost you between $0 \u2014 $50/month while you are in development and once you deploy it could go up to $50 \u2014 $200/month depending on number of users and the bandwidth being used. Assuming you don\u2019t use any third party API or services that you have to pay for. I would recommend check out the pricing for Amazon Web Services and Google Cloud Services to get an idea for how much hosting and storage services can cost."
    },
    {
        "url": "https://android.jlelse.eu/perfmatters-building-a-custom-viewgroup-part-3-165dae1bb5ff?source=user_profile---------33----------------",
        "title": "#PerfMatters building a custom ViewGroup \u2014 Part 3 \u2013",
        "text": "In Part 1, we build a custom HorizontalBarView in order to simplify code and improve performance. In Part 2, we saw how the building blocks of custom ViewGroups work and now, we\u2019re going to try to use what we know to build our own ViewGroup and see if this gives us any performance saving.\n\nAs a reminder, this is what the widget looks like:\n\nIn our custom ViewGroup, we are going to take 3 Views and lay them out in in order to build our widget. Readers of previous articles may remember that the default View only took 2 TextView inside a LinearLayout, however, our ViewGroup will take 3. It may seem, that we have additional complexity in our ViewGroup and, hence the approach may be inherently worse. To refresh your memory, the HorizontalBarView widget using default Views was built the following way:\n\nThis may intuitively look like it would be more efficient than using 3 Views, however the approach does have it\u2019s limitations as we will see later.\n\nWhile the HorizontalHarView building using the default Views only uses 2 child Views, these two Views are TextViews which have a fairly complex to calculate weight attribute set on them. In our custom ViewGroup, we\u2019ll use a 2 plain and simple View\u2019s to represent the bars and a TextView to show the text. The TextView has no complex attributes set on it and is measured and positioned by us.\n\nWe are also able to push details such as the text to display and the fill percentage on the custom ViewGroup and hence simplify our code for initializing and updating the View.\n\nIn order to build our Widget, our custom ViewGroup will assume that it has 3 children, first 2 can be a plain and simple View and the third will be a TextView (please note, that you can also draw the text yourself hence saving you a View).\n\nThe first step is to provide each child it\u2019s width and height, based on the width and height of our ViewGroup. We will also take this opportunity to set the text and color of the bars.\n\nWe use setMeasuredDimension to set the width and height of our ViewGroup because it is faster than calling super.onMeasure() and super.onMeasure() will also measure the children which is something we don\u2019t want.\n\nWe know the fill percentage and we are using it to calculate the width of the first child. Since we know the width of the first child, the second child which represents the empty area is going to be the total width minus the first width of the first child.\n\nWith the TextView, we can take 2 approaches, either use the Paint to calculate the width and the height of the text and set it yourself, or since it is a TextView, just tell it to measure itself using the AT_MOST attribute, which should effectively translate to wrap_content.\n\nOnce we have the width of the first child, we know the starting and ending location of the first child as well. Since we know the width of the first child, the second child which represents the empty area is going to be the total width minus the first width of the first child.\n\nWhen we calculate the width of the second child, we can calculate it\u2019s starting location from the ending location of the first child and the ending location would be the width of the ViewGroup.\n\nFinally, the TextView has to be position to the left, in the fill area, aligned right; if the fill area is larger than the text width, or else it has to be positioned on the right in the empty area, aligned left. We can take this moment to set the appropriate text color and position the TextView starting at the end of the fill area minus the TextView\u2019s width.\n\nYou can see the entire code for the HorizontalBarViewGroup below.\n\nThe custom ViewGroup on average for 5 updates, performs around the 3ms mark; whereas the widget created using the custom ViewGroups takes around 6ms. Below is an example to the layout and measure times.\n\nThe total time taken, is the time the top level view took (LinearLayout or HorizontalBarViewGroup) in its measure and layout passes plus the time taken on the Main thread for the calculations and operations to update the Views. The time displayed is cumulative of the number of measure and layout passes.\n\nAs you can see, with the default widget, there are far more layout and measure passes taking place. This is because we use the layout_weight attribute which usually requires at least 2 measure passes.\n\nBy calculating the measure and layout times ourselves, we have managed to half the amount of time it takes to layout the widget.\n\nThe logic for displaying the text in the appropriate side proved to be surprisingly difficult. This is mostly because even after updating the weights for the fill and empty views, the API still returns the old measured width value because the layout pass had not taken place yet. As a result, we have to partially guess which side to display the text on. Take a look at how complex the logic is when compared to our custom View:\n\nWhile using the custom ViewGroup may be a little more work, ultimately, it not only simplifies you code and significantly improve performance, it also lets you achieve a result which may not be possible using the default widgets.\n\nThis was the final part in my #PerfMatters custom Views and ViewGroups series. Do read Part 1, Custom Views and Part 2, introduction to custom ViewGroups if you haven\u2019t already.\n\nOne final thought. I\u2019d like to leave you with is something a friend of mine said \u201cOver optimization is the number one cause of bugs\u201d. While performance is extremely important, it\u2019s equally important to write code that is easy to read, extensible and manageable. Knowing when and how much of one to sacrifice for the other requires real talent."
    },
    {
        "url": "https://android.jlelse.eu/perfmatters-introduction-to-custom-viewgroups-to-improve-performance-part-2-f14fbcd47c?source=user_profile---------34----------------",
        "title": "#PerfMatters introduction to custom ViewGroups to improve performance \u2014 Part 2",
        "text": "In part 1, I talked about how we can build our own View in order to avoid having multiple Views, reduce complexity, and hence improve performance by avoiding layout passes. In this article I\u2019ll try to demystify onMeasure and onLayout methods in ViewGroup which you can use to measure and position all the children in your container.\n\nIn this scenario, we want to ask the children of the ViewGroup to measure themselves and lay them out horizontally.\n\nCreate a new class that extends ViewGroup. Then override the constructors.\n\nYou will also need to provide an implementation of the onLayout method. This method assigns a position and size to each of its children. Below I\u2019ve provided a very basic implementation that iterates over all the children and lays them out one after the next horizontally.\n\nThe code is straight forward. We loop through each child and give it a position starting from the ending position of the previous child. The parameters are:\n\nNext, create an activity and use your ViewGroup in it\u2019s layout:\n\nWhen you run the code, you\u2019ll see that the custom ViewGroup fills the screen. The children are not visible. This is because we have not told the children how to measure themselves and consequently, they aren\u2019t being rendered. Our ViewGroup does know how to measure itself, but we aren\u2019t doing anything with this information, as a result, it\u2019s filling all available space.\n\nWe tell the children to measure themselves in the onMeasure() method, the simplest implementation of this is is to loop through the children and ask them using the measureChild() method.\n\nNow if you run the code, you\u2019ll see that the children render. The ViewGroup still takes up the full screen, but the children render as expected. You can simplify this code by using the measureChildren() method which will loop over all the children and ask them to measure themselves automatically. This method will also skip children that have visibility set to gone, hence supporting the visibility gone flag.\n\nCurrently, margins don\u2019t work, which is perfectly fine. If we want to support margins, our container can add them in onLayout rather than trying to measure a child with the margins.\n\nSo far, we have been telling the container to measure itself, but suppose we want to wrap_content on the container? In order to do this, we would need to know the total width of the children as well as the height of the tallest child. If we can calculate these 2 things, we can set the width and the height of the container using the method measureChild(). Go ahead and replace the code in onMeasure with the code below.\n\nNote: you should not call super.onMeasure() now.\n\nJust so you can see what the effect of the code, add padding to one of the children and run the code. You should see something like this:\n\nThe red area indicating our ViewGroup is exactly the width of the children and its the height of the tallest child.\n\nIf we want to save time, we can tell the children exactly what size we would like them to be. In this scenario, you would know the elements that are inside your ViewGroup and you know exactly what size (or at most what size) each is supposed to be and where it should be laid out. In order to tell the children how to lay themselves out, you can build your own MeasureSpec and pass it to the children.\n\nIf you put the following code in onMeasure, each child should be resize to be EXACTLY 3o0px:\n\nAgain, each child is 300px and our ViewGroup should wrap them tightly.\n\nAs you can see, the second View still renders the padding we put around it as well.\n\nWe now have some basic tools on how we can provide size and layout information to the child Views in a ViewGroup. You should already be bubbling with ideas on how you can use this to make layouts otherwise not possible or to improve rendering speeds for your layouts. In Part 3, we\u2019ll take a look a look at creating the HorizontalBarView using our custom ViewGroup and see how that compares to using the default Views."
    },
    {
        "url": "https://android.jlelse.eu/prefmatters-using-custom-views-in-android-to-improve-performance-part-1-4dc9bdd75396?source=user_profile---------35----------------",
        "title": "#PerfMatters using custom Views in Android to improve performance \u2014 Part 1",
        "text": "As Android developers, we owe a lot to custom Views and to those who have mastered them. A lot of popular libraries out there are made possible because of custom Views. In this series of articles I hope to demystify custom Views and show you scenarios how you can use a custom view to improve your apps performance by saving on layout passes and at the same time creating Views and ViewGroups that would either not be possible or at least extremely tricky to implement using the built in components.\n\nIn part 1, we will concentrate on how we can build a custom View and why it is a better option than using a default components. In part 2, we will see how we can build custom ViewGroups to improve performance. As an example, imagine that you have to build a horizontal bar view to depict a value.\n\nThe requirements are as follows:\n\nIgnoring the fact that we now have a Percent Support Library, the best way to accomplish this layout with the the default components would be to use LinearLayouts with weights.\n\nThe Light blue is a LinearLayout with orientation vertical. The light green is a LinearLayout with orientation horizontal and the yellow are TextViews with weight set to 0.3 and 0.7 respectively. We have to use TextViews because we want to be able to show the text label.\n\nAs you can see with the 3rd and 4th bars below, using this approach it is possible to achieve the layout above. However, we have already encountered our first problem, in order to get the look we want, we have to set the background color, text color and gravity for each of the text views. Not only that, we have to determine which text view to display the text in. Some of this complexity can be reduced using styles, however, this would make it difficult to change the styles at run time.\n\nThe layout to achieve the look for the bars using built in components is shown below. The complexity is not really mitigated even if you were using the Percent Support Library.\n\nYou can pretty much guess what the code looks like to set the values for the bars and to decide what side the text goes on. You can image what a headache it is to coordinate these Views.\n\nBy comparison, the layout for the custom View is rather simple.\n\nThe code for the custom View is a little complex, but effectively we are just calculating the start and end points for 2 boxes that represent the filled and empty bars. Then we draw the text to the right of the filled bar if there is enough space, otherwise we draw it to the left. You can also see the various other operations that are View supported as exposed by the custom attributes in attrs.xml.\n\nFor the purpose of this test, I created an Activity with 12 bars built using the default Views and resized them 7 times by programmatically emulating the click of a button. Then I repeated this test using my custom View (Code for custom HorizontalBarView on Gist).\n\nThere are 2 measures of performance that I am going to use:\n\nSurprisingly, here we notice that as long as both the default and the custom approach is thought through well, their overdraw is roughly the same. I have to admit that initially the custom View had more overdraw than the approach using the default Views, however, the beauty of custom Views is that I was able to adjust it to improve overdraw.\n\nBlue here means that a pixel was drawn once, and green means that it was drawn twice. As you can image, if we are going to draw on the bar, it\u2019s hard to avoid overdraw for the text.\n\nSecondly we want to measure how long it takes to render the UI relative to the 16ms per frame bench mark. At first I used the GPU Rendering option under the Developer options to see if one approach was clearly better than the other.\n\nThe only lines that we are interested in above are the blue and red lines. The blue line represents the time used to create and update the View\u2019s display lists. The red line represents the time spent by Android\u2019s 2D renderer issuing commands to OpenGL to draw and redraw display lists. The height of this line is directly proportional to the sum of the time it takes each display list to execute \u2014 more display lists equals a taller red bar.\n\nAs you can see, the blue and the red lines appear to be flatter for the custom Views when compared to the default Views. While encouraging, this is mostly anecdotal without some hard numbers to back up the visual graph. When the Views are profiled, we get the following render times for the screen each time all the views are resized.\n\nYou can see that on average, the performance is roughly 5% better for the custom View. The difference is a tiny fraction of a millisecond, however our Views are rather simple, the more complex our Views, the more layouts will be triggered and the more this number will add up. More importantly, while not significantly faster, we are still rendering 12 custom Views compared with 36 Views for the 12 bars build using default Views.\n\nIn this article, we haven\u2019t tackled the how complex it is to display the text on the correct side for the default Views or how complex it is to recalculate the weights when we want to change the values. All of this is greatly simplified when your View is built to handle those conditions by itself. In addition, in one place we can expose functionality to set text, typeface, text and background colors and more.\n\nWhether you use a custom View or a compound View with built in components, you still have to calculate the size of each bar, set the text colors and figure out which side the text will be rendered on. The main difference is that that in the case of our compound View that uses default components, you have to keep track of multiple Views, the Views measure and layout themselves which may lead to some inefficiency.\n\nOne way we can keep using the default Views and still improve performance may be to measure the child Views ourselves. After all, we are setting the weights on them, we know how they are going to be laid out, so why don\u2019t we tell them rather than letting them figure it out for themselves. This will lead us to part 2 of this article where we will build a custom ViewGroup which will measure and layout its children to improve performance.\n\nYay! you made it to the end! We should hang out! feel free to follow me on LinkedIn, Google+ or Twitter."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/use-headless-fragment-for-android-m-run-time-permissions-and-to-check-network-connectivity-b48615f6272d?source=user_profile---------36----------------",
        "title": "Use headless Fragment for Android M run-time permissions and to check network connectivity",
        "text": "One great rule to follow when writing your code, is to think about how it would look to someone who is not familiar with the code and logic. You may know why you took certain code architecture and design decisions, however, if it requires understanding beyond what someone sees in the code, either leave a comment or don\u2019t do it. With this in mind, lets see what the issue with base Activities can be.\n\nBase Activities use inheritance to provide logic that is supposed to be common across various activities. The idea being that all activities that require that functionality will inherit from the same activities and save you having to write the same bit of logic again and again. The first problem that comes up in any sizeable project is that your BaseActivity ends up holding a lot of code that may not be needed by each Activity. If this code does something like listen for back stack changes and manipulates nav bar options and Activity titles, you may need to add boolean flags to enable of disable features. This creates a maintenance overhead and any new developer coming on board will have no idea what is going on.\n\nYou may be tempted to use helper classes in order to work around the issue where you have code being inherited that is not required by an Activity, or providing functionality counter to what you may want. However, for helper classes, this can mean passing instances of Activity or Context which can cause memory leak issues, especially if asynchronous processing and callbacks are involved. Further, these classes are not life-cycle aware and you would have to code this behaviour yourself. Understandably, this is messy. That being said, headless fragment that are discussed below are effectively helper classes, except they are context and life-cycle aware.\n\nFurther, your BaseActivity may extend AppCompatActivity and you may come across use cases where you want to extend a regular Activity, ListActivity or PreferenceActivity. In this case, you\u2019ll have no choice but to duplicate your code.\n\nA headless Fragment is simply a Fragment that does not have a layout or View to render. Fragments are also context and life-cycle aware and with setRetainInstance() set to true, they are not destroyed and recreated on orientation changes. This makes them ideal candidates for holding reusable logic whether it relies of life-cycle methods or not. It also makes them a great place to perform asynchronous tasks as they are not destroyed on Activity orientation changes and hence even through the Activity life-cycle your long running process can execute and deliver the result when the Fragment is reattached. Effectively, they are fancy helper classes.\n\nIf you want a stronger argument for using headless Fragments or for using Composition over Inheritance, which is effectively what the argument in favor of headless Fragments boils down to, read this Google+ post by Josh Brown.\n\nIf you create one Fragment which contains all your common code, then this sort of defeats the purpose. The idea behind headless fragments is that you create a Fragment for each feature you want to implement and then depending on the features you need, you just add the appropriate Fragment to your Activity. Below I show you how to create 2 different headless fragments.\n\nYou add a headless Fragment to your activity the same way that you would any other Fragment. Keep in mind though that you have set setRetainInstance() to true and so if your activity is destroyed and recreated, you need to check if your fragment exists and if so, re-attach it. The code for this looks like so:\n\nYou can either call methods in a headless Fragment directly, or declare a callback for the headless fragment to return a value in. By default, the callback approach is used by all Fragments to communicate with Activities and this is not a bad approach to use, however, depending on your use case, you may want to call a method directly and get a result.\n\nYour app does not always need to know whether internet connectivity is available, however, when it needs to check on a screen whether internet connectivity is available, you can use something like the code below [gist link].\n\nAfter you have created your headless Fragment, you can add it to any Activity that needs to check for an internet connection and call the isInternetConnected() method to check for internet connectivity. In this above code, the method is static, however, since the Fragment has access to the current context, you can call getActivity() or getContext() directly and don\u2019t need to make the isInternetConnected() method static. I usually define a BroadcastReceiver in my manifest which receives network change notifications and make a local broadcast each time the network connectivity is changed, that BroadcastReceiver uses the isInternetConnected() method and it also shown above.\n\nThe real beauty though is in the BroadcastReceiver that we are attaching in the NetworkHelper fragment and which puts up a dialog every time the internet connection is lost, notify the user that the internet connection has been lost or is required for this screen. Not only is the NetworkHelper Fragment acting as a Fragment to display the dialog every time internet connectivity is lost, it has also acting as a helper class holding methods related to checking internet connectivity.\n\nAs an example, we will request camera and microphone permissions. You will notice that the code below uses a callback strategy for the permissions. That is, the Activity which is attaching the CameraMicPermissionHelper Fragment, also has to implement CameraMicPermissionCallback. The Fragment does little else other than hold the logic for requesting the permission, if the permission has already been granted or if the permission, or the permission was successfully or unsuccessfully granted, the headless Fragment will simply notify the Activity which implement the callback.\n\nIt is recommended that if a permission is rejected, that you remember that a permission was denied and don\u2019t keep requesting it, as the use case for an app may vary, I\u2019ve created methods which you can use to set a permission as denied as and when you choose.\n\nAlso, for the code below [gist link], I\u2019m using a slightly modified version of PermissionUtils that was provided by Google in it\u2019s sample app. You can find it on my GitHub account at this link.\n\nUsing the Headless fragment is easy, simply attach it to your Activity as was shown earlier. When when you need to check permissions, simply call checkCameraMicPermissions() method. If you get a callback in the onCameraMicPermissionGranted() method, use the camera or else onCameraMicPermissionDenied() you can inform the user why you need the permission and ask that they try again. Do note that, if you do show any message in the onCameraMicPermissionDenied() method, do not automatically retry asking for the permission. If the user clicks \u201cDo not ask again\u201d when denying the permission, your app will enter an infinite loop.\n\nNow that we have our Fragments, we can add them to our Activities as needed to get the functionality we want. Further, based on a users action you can attach a headless fragment to get functionality rather than have it attached all the time. You can even have a collection of functionality that you can add and remove depending on your needs for a particular screen and lastly, if you are careful, you can write these Fragments in a way that means you can reuse them in other projects with almost no change.\n\nFor more great stuff on Android development, please follow me on Medium and also feel free to follow me on LinkedIn, Google+ or Twitter."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-developers-create-your-own-credit-card-edittext-view-e508c758e86c?source=user_profile---------37----------------",
        "title": "Android Developers, create your own credit card EditText view",
        "text": "Recently, I had the need for a credit card number field that showed an image of the credit card on the right hand side, as you typed the credit card number.\n\nAs you would, I Google\u2019d to see if such a widget already existed. What I found was there were plenty of existing solutions, however, there most if not all of these solutions had a lot of code in them. I couldn\u2019t imagine why such a simple feature would require so much code.\n\nOther solutions bundled assets that I couldn\u2019t use and so there was pointless APK bloat and most of them would extend EditText which meant that the new Tinting API in KitKat and part of AppCompat would not be applied to the EditText view.\n\nTinting is what allowed Google to bundle 1 asset, such as a white EditText drawable and \u201ctint\u201d it with your app\u2019s primary and accent colors. If you recall, previously, we had to bundle Drawables and patch-9's which were consistent with the theme colours of our app.\n\nIt can be! What I don\u2019t like about it is that it is that code to evaluate what credit card is being used will go into your activity and fragment and this code will just clutter up your source. Having a custom view would mean the logic is in one place and reusable. Also, with DrawableRight on an EditText, you have to make sure that the credit card image assets are the correct size, otherwise it will mean your EditText will take up more space than we want. As an example, take a look at the image below, the top EditText uses a drawableRight and the bottom one is our custom EditText view. The top one is not scaling the credit card image to fit the size of our EditText.\n\nThere are a few steps to building your own CreditCardEditText.\n\nTo start with, create a class CreditCardEditText that extends AppCompatEditText (part of the AppCompat-v7 library, this enables tinting in our EditText) and implement the constructors. We will also implement an init() method where all our set-up code will code.\n\nThere are a number of resources out there that give you the regular expression to determine whether a string is a valid credit card. I found regular-expressions.info\u2019s pattern to be most comprehensive as they provide regular expression for some of the lesser used credit cards as well.\n\nThese regular expressions deal with verifying whether or not the credit card number is valid, so they won\u2019t really evaluate to true unless you type the whole 15 or 16 digits. We need to determine whether something is a valid credit card number as the user types. So for our purposes, I\u2019ll the following regular expressions:\n\nWe are only supporting these three, but when you see the code, you\u2019ll see how you can add more if you want.\n\nWe will compile and hold on to our regular expression patterns as this can be a time consuming process, we want to do this upfront and not repeat it each time.\n\nHere, we are mapping each drawable with it\u2019s corresponding regular expression pattern. You can download the credit card images from my github account; I just put these images in the xxx-hdpi folder.\n\nNext we override onTextChanged and try to determine if the text input matches any known credit card pattern. Lets go ahead and add these class variables.\n\nAs you can see, each time the text changes, we run the text through all of our regular expressions looking for a match. If a match is found, we check to see if it is the same credit card as the current one we are using, if it is the same credit card, we do nothing, otherwise wise we fetch the new image. This last part is a small optimization to prevent us from reading a new drawable after each character.\n\nThose of you who read my article on creating a custom TextView to use as a separator, should be familiar with the next step.\n\nWe need to override the onDraw() method to add the functionality we want. Firstly, we want to maintain all the functionality of the EditText itself, so we will call super.onDraw();\n\nNext, we need figure out where to draw our image. The way this works is we have to tell the drawable we captured in mCurrentDrawable where to draw itself. The region is specified as a rectangle, we need to calculate the left, top, right and bottom coordinates for the credit card image.\n\ncalculating the coordinates is a lot simpler than in the custom TextView we did.\n\nIf you don\u2019t have assets of exactly the right size, using the the right coordinate less the width of the image as the left coordinate will result in a skewed image being drawn. Take a look:\n\nSo now our onDraw code looks like this:\n\nOne issue you may come up against is that if you set an error on the EditText view, you won\u2019t be able to see the error icon. The reason is that we draw our image over the area where the error is displayed. Therefore, if an error is displayed, we subtract a 32 DIP offset from our right coordinate (you can see this in the code above). Full code on gist.\n\nYou\u2019re new CreditCardEditText is now ready! Use this view in your layout xml with a number only restriction as follows:\n\nIMPORTANT: If your app is not using an AppCompat theme, then extending AppCompatEditText will not work, you need to extend EditText.\n\nFollow me below, and recommend this story, if enough people are interested in how to do masking, I\u2019ll write about it next week.\n\nAlso, feel free to follow me on LinkedIn, Google+ or Twitter."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/creating-a-custom-textview-as-a-section-header-73cb8e194917?source=user_profile---------38----------------",
        "title": "Creating a custom TextView as a section header \u2013 Ali Muzaffar \u2013",
        "text": "The picture above shows a TextView with a separator line running along it. You may have to do something like this as a custom separator; a section header in a ListView, RecyclerView; or just as a section separator in your Activity or Fragment. This may seem rather simple, but from a layout point of View, how would you accomplish this?\n\nIf you background was a solid color, you could put your TextView in a FrameLayout and center it, with a solid background color, then on your FrameLayout set an XML drawable as the background. So something like:\n\nAssuming your background color was white, this would look like it works just fine. However, there are a few issues with it.\n\nWe may be tempted to think that we can solve this issue with a patch9 image and, you probably can. You may even be able to make a patch9 work with a Textured background. However the overdraw issue remains. You may not need to wrap your TextView in a ViewGroup any more, but you\u2019re still drawing a background before drawing your text.\n\nSide: I know the overdraw problem seems rather minor, however, this is a good opportunity to learn about how drawing View\u2019s works.\n\nAdditionally, the approaches above are not very flexible. If you want to right or left align your text instead, this requires extra assets in case of the patch9 solution or you having to add code to fiddle with padding in case of the first solution (for example, you may not want left padding when you align left).\n\nFinding a solution Working with the RecyclerView, I had created a row separator that had text in it. So I knew this problem was possible to solve using a custom view. I decided that my custom view would extend TextView so I would get all the text rendering and positioning from a TextView for free.\n\nThe goal is rather simple, if the text is centered, draw lines to either side of it. If the text is left aligned, draw a light from it\u2019s right end to the end of the screen. if the text is right aligned\u2026 you get the idea.\n\nThis part is pretty straight forward, create a new class that extends TextView. Your IDE should prompt you to add the default constructors. Go head and create all the constructors and then you should be able to use your new View in a layout. In my case, I called the view a SeparatorTextView and after creating the constructors, I was able to add it to my layout like so:\n\nWe are going to start by working on centered text. We need to draw a line to either side of the text, however, to start with, lets draw a line across the centere of the TextView.\n\nWe will start by overriding the onDraw(Canvas) method. First thing we do is call super.onDraw(Canvas) since we want to retain all TextView behavior.\n\nNext, we are going to try to draw a line across the center of the TextView. In order to draw the line, we use canvas.drawRect(\u2026). The reason we are using a rectangle is because in the future, we may want to be able to control the thickness of the line and that is just easiest as a rectangle.\n\nWe want to draw from the left vertical center to the right vertical center. Our code will look like this:\n\nI\u2019ve tried to put comments in to explain some of the variables. The result is:\n\nNote: drawRect takes floats, however, you notice that I\u2019m passing it integers. The reason for this is that since we are dealing in pixels, I really don\u2019t see fractions mattering much.\n\nSince we are initially working with the scenario where the text is centered, we need a line on either side of the text. In order to do this, we need to measure the width of the text and then draw the first line from start to the center of the screen minus half the width of the text. We will then draw a second line from the half way point plus half the width of the text to the end of the screen.\n\nNote: You can get the width of the text by calling getTextSize() however, in my experience, the result from this method can be incorrect. So, to measure this, we use the paint object.\n\nIf you run this code, you will see that something doesn\u2019t look quite right.\n\nThe reason for this is that our code is not making adjustments for padding (we have 16dp padding on our TextView) so we are drawing longer lines than we need to. In order to adjust for padding, we add the padding to the left and we subtract it from the right. From top, we need to add top padding and subtract bottom padding. We don\u2019t need to change bottom at the moment since it\u2019s relative to top.\n\nThis will give us code like below:\n\nWhen we run this code, we see that now, our lines are within the TextView\u2019s padding and the lines run up to the text and then continues again after it.\n\nAs an additional aesthetic measure, we can add some padding for the text so the lines don\u2019t run all the way up to the text. In order to do this, we need to subtract padding from the end position of the first line and add it to the starting position of the second line.\n\nOf course in your final solution, you probably don\u2019t want to hard code padding to use around the text in onDraw and should probably convert between dip and pixels, however, I\u2019ve hard code it in onDraw to show the concept.\n\nSo far we have only handled the case where the text is centered. We will now add in checks for the gravity and make sure to only draw one line when the gravity is left or right.\n\nThat should do it.\n\nYou can how do more advance stuff like allow the separator and the text to have different colors by having a different paint object for the dividers.\n\nYou can also allow the use of an xml drawable or a patch9 image for the divider. One thing to note if you try this, if you are using a patch9 (the same kind that android uses for dividers) then you have to draw it much like the rectangles using the starting and ending points of the image. However, an xml drawable has to be drawn so that it takes up the full space. I.e. the top has to be 0 and the bottom has to be the height of the view, adjusted for padding.\n\nI have the demo code and full finished code up in a gist.\n\nLet me know what you think of this approach in the comments and as always, for more Android development article or follow me on Medium, LinkedIn, Twitter or Google+ and please recommend this article."
    },
    {
        "url": "https://android.jlelse.eu/android-developers-we-ve-been-using-themes-all-wrong-eed7755da586?source=user_profile---------39----------------",
        "title": "Android Developers, we\u2019ve been using themes all wrong",
        "text": "Last week I wrote about how we can switch themes at runtime in Android apps. At the end of the article I mentioned how I'm extremely unsatisfied with my solution and that there must be a better way to theme the apps so we don\u2019t have any resources hard coded in our layouts.\n\nI've worked on a lot of projects and seen a lot of code written by developers of varying levels. Everyone hard codes colours, drawables, text sizes etc. in their layouts or styles (including Google\u2019s sample code) and this means that we aren't really using a theme but in fact styling each element in our app individually.\n\nAt the very least, we don\u2019t want to hard code any text colours or backgrounds in our styles and layouts for our widgets. We want a way of referencing them through our theme.\n\nWhen we hard code in our style or layout instead of referencing them from the theme, the styles are fixed and will not change even if we change our theme (like going from a light to a dark theme). As an example, take a look at the View and Style below.\n\nAssuming our theme is currently set-up for a light theme, it would mean black text on a light background (as defined by our drawable). If we changed this to a dark theme, it would change the text colour through the theme to a light grey/whitish colour however the background drawable from our source would remain unchanged, hence the text would be impossible to read.\n\nIf we want to support theme changing, this is about as good as just specifying the background in the TextView itself.\n\nIf you don\u2019t want to support theme changing, you can still benefit from not hard coding your backgrounds, colours etc. Referencing these things through a theme can result in fewer redundant assets and resources being created and make it easier to locate the right colour, drawable or asset for a particular widget. It may also make it a lot easier to restyle your screens if you ever decide to do so. The trouble is, it\u2019s effort now, versus effort later. When faced with this choice, for most developers against a deadline, effort later wins!\n\nHaving Google\u2019d extensively for a solution, I didn't really find anything that would explain how to work around the problem of having to hard code drawables and colours (perhaps it\u2019s because it\u2019s supposed to be super obvious and I'm an idiot). I did have some idea of how this may be possible, and I knew where to look for answer. When in doubt, look at the source code!\n\nI started to look into the code of ActionBarCompat in order to get an idea of how to theme properly. ActionBarCompat defines attributes in your theme which do not otherwise exist in older versions of Android. Examples being colorPrimary, colorPrimaryDark, colorAccent etc. and after looking at a Toolbar example, I realised that these attributes can be referenced like so:\n\nSo then it just because a matter of figuring out whether I can just define new attributes in my project, use theme in my theme and reference them the same way.\n\nTurns out, you can just define your new attributes in attrs.xml and use them in your theme.\n\nThis is a little unintuitive because the only times I\u2019ve seen attributes defined in attrs.xml, it\u2019s been to define custom attributes for custom layouts and widgets. It hadn\u2019t even occurred to me that you could use them in your theme and reference them using ?attr/.\n\nThis way, if you change the colour and drawables defined in your theme, the View that has style=\u201cWidget.CardTitle\u201d set will automatically use a different background and text colour. Similarly, you can reference your theme in your layout resource files as well, as shown in the Toolbar example.\n\nStarting in Lollipop you can use the ?attr/ attributes directly in your drawables xml resources and in your colour selector xml resources (these are the resources under the res/colors directory). This can save you from creating a lot of redundant xml drawables and styles.\n\nUnfortunately, in all previous to Lollipop, there was a bug that prevented you from using ?attr/ in your drawables and colour resources. In order to work around this problem, for each of the themes that you wish to support, you have to create a drawable or colour selector and you have to reference them in your theme as I have done above for cardTitleBackground.\n\nAt runtime, you can reference drawables, colours and any other references from your theme like so:\n\nIn order to see the viability of this approach, I started to rewrite one of my existing app and try to use referencing through themes as much as possible. So far, I've not found a single instance where I can\u2019t reference through the theme to solve one styling need or an other. Feel free to check out the source (it\u2019s still a work in progress).\n\nLet me know what you think of this approach in the comments and as always, for more Android development article or follow me on Medium, LinkedIn, Twitter or Google+ and please recommend this article."
    },
    {
        "url": "https://android.jlelse.eu/android-changing-app-theme-at-runtime-ab17d3eb93cc?source=user_profile---------40----------------",
        "title": "Android: Changing app theme at runtime \u2013",
        "text": "Every so often, I see a question posted on StackOverflow which is effectively asks how to change the themes of an app at runtime. The use case is often that there is a setting, button or check box which can switch between different colour themes or between something like day and night mode.\n\nEvery time such a requirement comes up, the first thing a quick Google search shows is that it\u2019s not possible to change themes at runtime. That being said, it is possible to change the theme of an Activity, however only in the`onCreate` method and only before `super` is called.\n\nThis is problematic because it\u2019s hard to provide a seamless experience to the user if you have to restart the app or Activity in order to change the theme. So our second option is to recursively loop through all of our views and set their attributes each time an Activity or Fragment is created. This way, when the theme is changed, you can loop through all the Views again and change the attributes to reflect the new theme. Neither of these options is ideal, you may even want to consider a hybrid of these two approaches. I've provided an example implementation of each of these methods below.\n\nAs mentioned before, it\u2019s only possible to change the theme of an Activity in the `onCreate` method and that to only before `super` has been called. Changing the theme is fairly straight forward, something like below should do it:\n\nThis is pretty straight forward, however this works when an activity is first created and has no effect on the current open Activity or any backgrounded Activities. In order to affect change on the current Activity, we\u2019ll have save the state of the current Activity and relaunch the activity, in order to make this experience seamless for the user, you have 2 options, either remove all transition animations for Activities or change them to provide a nice fade in effect. The result of this approach is shown in the video below.\n\nAs you can see, the approach produces a pretty nice result. If you don\u2019t want a fade in effect, remove all animations for Activity transition and you should have a sudden change.\n\nThe code to achieve this is in my gist \u201cTransition themes\u201d.\n\nAs much as we hope that the theme can contain all our formatting, we invariably need to override a text colour or background colour in-line in our layout or an in a style attribute and this needs to be changed programmatically. In this scenario, you would likely have to check the appropriate Views or all Views to see if they are consistent with your set theme. If you know which Views are likely to be affected and can check them directly, nothing could be better. If not, you will have to loop through all the View in your layout and check them. The code to do this depends heavily on your project and it\u2019s requirements, however, the skeleton code for checking all your Views be something like this:\n\nYou could bundle duplicate layouts for each of your themes where the only difference between each layout is that the style or in-line style related attributes are different. Then in your code, depending on the selected theme you inflate or set the appropriate layout. This approach while very simple, however it has the same issues as the first option.\n\nIf this is a requirement for your app, I recommend you research what is possible before you try any of these approaches. If all you want to do is change some text colour and the colour of the Toolbar and tabs, this is possible without having to change the theme. I would take a look at the Design Support Library.\n\nIf you are going to do down one of the routes I have talked about above, I would recommend not getting too attached to any one approach and to combine all three approaches above. Find the best fit for your particular situation.\n\nAlso, if you\u2019re going to need to change the colour of your drawable assets, my article on how to change the colour of drawable assets may help.\n\nI'm honestly asking the readers, if there are any out there, to chime in and tell me if there is a better way to handle runtime theme changes. It\u2019s a topic I have researched and Google\u2019d, however, I'm just not happy with what I've found so far. If you have a better approach or some advice on the matter, I\u2019d love to hear it.\n\nFor more Android development article or follow me on LinkedIn, Twitter or Google+."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-change-colour-of-drawable-asset-programmatically-with-animation-e42ca595fabb?source=user_profile---------41----------------",
        "title": "Android: Change colour of drawable asset programmatically with animation",
        "text": "If you have ever had to gradually change the colour of a button, image or drawable asset in your application from say\u2026 grey to orange, you have two options.\n\nWhile the purpose of this article is mainly to discuss option 2, option 1 will fulfil most requirements and most developers will find option 1 easier to implement. With option 1, your images can contain gradients, shadows and multiple colours and it will still work. With option 2, it would be very difficult to cater for gradients, shadows and different colours.\n\nWe want to change a grey image to orange. In order to do this we will need two images as shown. The images will have to be identical and position one over the other in your layout. We have 2 options here as well. Layout grey above orange and fade out grey when you want to convert the image to orange by animating it\u2019s alpha to 0. The second option is to put the orange image above the grey one and set it\u2019s alpha to zero, then animate its alpha to 1 when you want to turn the image orange.\n\nIn this scenario, our layout may look something like this.\n\nAs you can see above, the two images should perfectly overlay. The grey image is visible and the orange image has it\u2019s alpha value set to zero meaning that it is not visible.\n\nNow if we want to convert the image to orange, we can use a ValueAnimator to gradually change alpha from zero to one.\n\nThis works beautifully from Honeycomb and above and works exactly as expected.\n\nWhen going down this route, keep in mind that when you overlay a colour, it will overlay all non transparent pixels. Also, you\u2019ll either have to overlay a Drawable or an ImageView. In this example I overlay an ImageView however with a drawable the concept the largely the same.\n\nThis time our layout will contain just one ImageView on which we will overlay colour programmatically.\n\nIn order to overlay a colour, we will use an ObjectAnimator to animate the alpha for the colour we want to overlay from zero to one. If the overlay colour has an alpha value set on it, the alpha value will be retained and we will effectively animate from zero to whatever the alpha value of the overlay colour is.\n\nIn order for this to work, we will have to extract the solid colour from the given colour and adjust it\u2019s alpha. This means that if we want to animate to orange, we will have to break down the orange color into it\u2019s Alpah, Red, Green and Blue values and adjust the alpha depending on where we are in the transition. The code for this is below.\n\nIn the code above, \u201cmul\u201d is a multiplier for the alpha value where zero means the overlay is transparent (we will remove the colour filter) and 1 means that the alpha value is set to the value specified by the colour hex code.\n\nThe Porter/Duff mode specifies the behaviour that our overlay will take, whether it\u2019s colour will blend with the image\u2019s colours or whether it will replace it. There are a few different modes here to choose from, if you are interested in what these are, a great explanation of Porter/Duff blend modes can be found here.\n\nWhich ever approach you use, the result looks like this.\n\nUltimately, this comes down to your requirements. In my use case above, the results are identical to the extent that I record videos of both the outcomes and couldn't tell the difference between them.\n\nOption 1 can handle images with multiple colours and gradients and can even be used if your image changes slightly. Option 2 does not require you to bundle an extra asset and can be used to change to any colour you want (user could pick a colour from a colour picker for example).\n\nDo you have any advice on how to achieve a similar result? Lets hear it in the comments.\n\nFor more Android development article or follow me on LinkedIn, Twitter or Google+."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-sharedpreferences-singleton-to-make-life-easier-f1d802b6cd8e?source=user_profile---------42----------------",
        "title": "Android: SharedPreferences singleton to make life easier",
        "text": "I\u2019ve noticed that a lot of projects have their SharedPreferences code scattered all over the project. The reason for this mostly is that fetching SharedPreference and reading/writing preferences as and when needed is the easiest thing to do when writing an app. Taking time to structure this bit properly would take time away from the original task and ain\u2019t no one got time to refactor! Scattering SharedPreferences is problematic because keys/names for each preference may end up in a different place. This means that developers may not know that a preference already exists or may have a hard time finding the key/name for a preference they know should exist. Using dependency injection like Dagger2 resolves this issue to some extent, but you still have to rely on your developers to not scatter keys for preferences all over the place.\n\nOne solution to forcing developers to put all the SharedPreferences keys in the same place is using Enums as keys instead of Strings. However this would require you to write your own wrapper around SharedPreferences and provide getter and setter methods that take an enum instead of a String. While we are at it, we might as well make the code for reading and writing to SharedPreferences a Singleton (if we are not using dependency injection) since there is no point in repeating the same code all over your project.\n\nSince performance is not (normally) a high priority with reading and writing preferences, I\u2019ve made an Android Studio template that you can use to create a Singleton for your SharedPreferences. The code is on my gist[1] along with a Sample class incase you wish to not use Android Studio templates.\n\nThere are 2 templates and samples:\n\nPersonally I prefer to use Enum keys as I feel it enforces stricter control when there are multiple programmers working on a project. A programmer has no choice but to declare a new key in the appropriate enum class and so all the keys are in the same place.\n\nHowever, when retrofitting old projects with a SharedPreference singleton it may not be possible to use enum keys and so a version that uses String keys may be more preferable.\n\nKeep in mind that if your app uses more than 1 SharedPreference, by which I mean you use more than 1 setting name for your SharedPreferences, you can create Singleton class for each setting. This will make the code clear and easy to read."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/gradle-configure-variables-for-all-android-project-modules-in-one-place-5a6e56cd384e?source=user_profile---------43----------------",
        "title": "Gradle: Configure variables for all Android project modules in one place",
        "text": "Gradle\u2019s dependency management system has reduced the need to have several modules in your project, however, we may still need to include modules because of the way our project is set-up or because we are still supporting Eclipse compatible projects.\n\nOne issues that you may have come across repeatedly in old projects is that when build tools or the Android SDK is updated or you need to change variables such as the targetSdkVersion, buildToolsVersion, compileSdkVersion and more. If your project has modules, you may need to change these in each module.\n\nAdmittedly, changing these is not a very common scenario, however, the build tools usually update often enough to have made this a point of pain for me.\n\nFortunately, Gradle already provides us various mechanism to tackle this problem. You can create and use universal variables instead of hard coding your values. For Android projects one solution may be to configure your variables in gradle.properties, an other solution may be to use the ExtraPropertiesExtension. The advantage of ExtraPropertiesExtension is that it\u2019s not only limited to Android Studio projects and you can control whether your variables are Strings, Integers or Floats.\n\nThis solution is limited to Android projects as far as I know. In <project base>/gradle.properties you can define your universal or project level variables as such:\n\nThen, after a sync, you can use these in your gradle.properties files for all your modules as follows:\n\nCaution: I don\u2019t like this approach because values are parsed as Strings. If you provide a value for something that should be an integer, you may see an error when you sync your project:\n\nIf you come across this, try using `toInteger()` on the variables that should be integers or depending on your use case, `toFloat()` as shown in the example above.\n\nThe main advantage here as pointed out earlier is that you are not limited to Android Studio projects and this should work with all Gradle projects. Additionally, you can define something to be a String by putting it quotes or type a whole number for an Integer or a decimal number for a Float. In order to use the ExtraPropertiesExtension, in your <project base>/build.gradle add:\n\nThen after a sync, in your build.gradle files for each module you can use this like so:\n\nThis works because we are setting properties in the extra properties scope. You may be tempted to use project.setProperty(\u2026,\u2026) to set an extra value or project.property(\u2026) to read one, don\u2019t do it; these methods search existing properties in the 5 scopes and throws exceptions of the property is not found.\n\nDo you have any tips for improving your builds using Gradle? Let me know in the comments.\n\nFor more Android development article or follow me on LinkedIn, Twitter, Google+."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-detecting-a-pinch-gesture-64a0a0ed4b41?source=user_profile---------44----------------",
        "title": "Android: Detecting a Pinch Gesture \u2013 Ali Muzaffar \u2013",
        "text": "Android API lets you detect a large set of gestures by setting Listeners on a View. According to the Android developers documentation on Gesture detection, this includes but is not limited to:\n\nWhile this is enough for most applications, some require detection of more complex gestures such as being able to detect when a user has drawn a star or a circle. Google has you covered there as well. If you look under <android sdk>/samples/android-xx/GestureDetector you\u2019ll find everything you need to build such functionality.\n\nThere is however, an other use case for gestures that is not covered well by the API or any sample application. This is the use case of detecting multiple gestures together or mouse pad like gestures such as a pinch, 2 finger scroll, tap and hold then scroll and so on.\n\nUpdate 08/06/2015: As +Paul Burke points out, since API 8, Android has had a ScaleGestureDetector which is the same as pinching! My emphasis here is on handling multiple gestures rather than any one gesture. We can also handle pinch for more than 2 fingers with my code below. I only talk about one gesture for brevity for more look at my tutorial source on GitHub. If you\u2019re only interested in detecting a pinch, scroll down to the Detect Pinch Using ScaleGestureDetector section.\n\nOver here I cover how to detect the pinch gesture, however if you take a look at the code from my Gestures Tutorial on GitHub, you\u2019ll find code to detect the following gestures from the same View.\n\nThe concept behind the pinch gesture is simple.\n\nThat\u2019s it! So how would we do this?\n\nIf you want to support complex gestures, you would need to write your own GestureDetector, however, for our purpose, it will be enough to implement your own touch listener as the only events we care about are ACTION_POINTER_DOWN, ACTION_DOWN, ACTION_UP and ACTION_MOVE. We want to keep a track of how many fingers are on the View at the current time, so our code looks something like this:\n\nIf the OnTouch method returns false, when the ACTION_POINTER_DOWN or ACTION_DOWN is fired, we won\u2019t receive the subsequent events on that finger, hence we want to return true which means that we are consuming the event. The down side of this is that if you use any OnClickListeners or other listeners provided by the framework, they will not work now and will need to be manually handled. There are ways to work around this and you can see in the gesture tutorial.\n\nThe variable mPtrCount is not really needed as we can get the number of fingers on the View from the MotionEvent object by using the method getPointerCount(). However, I perfer to keep count of the pointers.\n\nIf you build the above code and run it, you'll probably noticed that even the slightest wobble of your fingers will trigger the ACTION_MOVE event. This doesn't work too well as it makes it extremely difficult for users to tap on the screen without triggering an ACTION_MOVE. In order to solve this problem, we need to have some threshold of movement before you can consider a move event (or scroll event) to have taken place. Luckily, Android API already has such a variable for you to use. You should fetch it and save it somewhere outside of the OnTouch() method so that you\u2019re not constantly fetching it.\n\nmViewScaledTouchSlop is the number of pixels that a finger is allowed to move, before we interpret the movement as a scroll. Next, we need to save the starting position of the fingers so we can calculate how far the fingers have moved.\n\nIn order to detect how far our fingers have moved, we first need to know the position of our fingers when they touched down as well as the distance between the fingers (distance is needed for the pinch gesture). Then when an ACTION_MOVE event is triggered, we get the current position of the fingers and calculate the difference. Our onTouch method now looks like this.\n\nIn order to calculate the distance between the 2 touch points, you can use the Pythagoras theorem:\n\nIf you simply wanted to detect whether the user is scrolling with one or two fingers, you could do something like follows:\n\nWhen you run the code, the first thing you will notice now is that a move is not logged as soon as your finger touches the screen. However the slightest movement in any direction now logs as a scroll/move. This is the behaviour we are after and now we can extend this logic to detecting a pinch gesture.\n\nDetecting a pinch gesture is similar to a scroll gesture, we simply want to make sure that there are 2 fingers, they have moved beyond a certain threshold and that they are moving in opposite directions.\n\nThat last bit there in italics is the difference between a scroll and a pinch. In a sense, a pinch is just a special kind of a scroll.\n\nIn order to detect a pinch, we first calculate the difference in the X and Y positions for both our fingers and the distance between the fingers. Then just like for the scroll event, if the distance has changed by a certain threshold, this is a candidate for a pinch gesture. Finally, all we have to do is make sure the fingers are moving in the opposite directions. The best way to do this is to see if the X difference for one of the fingers is negative and the same for the Y difference. Note, the X or Y can be negative for only 1 pointer, not both. The easiest way to do this is the multiply the X and Y differences, if the number is negative, we know that the pointers are moving in the opposite direction. An other strategy may be to see if the difference between the fingers is increasing or decreasing. The problem with this approach is that the distance may change slightly event when the pointers are moving in the same direction. Our code now looks like this:\n\nThe code to detect whether this is a pinch or not:\n\nIf you want to detect whether something is a pinch inwards or outwards, you could simply check whether the distance between the fingers is increasing or decreasing.\n\nIf all you\u2019re interested in is 2 figure pinch detection, then you don\u2019t need to write your own code for it. Since API8, Android has had a ScaleGestureDetector as part of the View class. Using it is simple, you need to create your own OnSimpleScaleListener, pass it to a ScaleGesturDetector then and call the ScaleGestureDetector in your OnTouchListener passing it the MotionEvent object.\n\nFor more examples on using ScaleGestureDetector look at the Android developers page. Note: You can also create multiple gesture detectors and pass the MotionEvent to each in your OnTouchListener if you have many gestures you would like to handle.\n\nYou can find the full code from this article from my gist. Also, take a look at the source from my Gestures Tutorial on GitHub, it\u2019s not been updated in a while, however it should still be valid. It will show you how you can detect multiple complex gestures all from the same View."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-developers-google-i-o-2015-recap-827622f81620?source=user_profile---------45----------------",
        "title": "Android Developers: Google I/O 2015 recap \u2013 Ali Muzaffar \u2013",
        "text": "Google Maps can how be used in Full and Lite mode on Android Wear. Lite mode allows you to use various static images of Google Maps in your app. This allows you to create lists of items and show a Lite Map against each of them.\n\nThere is a nice short video on Maps Lite mode on YouTube and more can be read here.\n\nThis is basically like JobScheduler except backwards compatible. I covered it recently in my article \u201c8 ways to do asynchronous processing in Android and counting\u201d. The idea is that you can schedule long running or resource hungry Services to run when certain conditions are met, such as the phone is charging and you are on an unmetered network like Wifi. There is code on how to use this at this link.\n\nAndroid Pay will enable Android users to simply and securely use their Android phone to pay in stores or in thousands of Android Pay partner apps. With new APIs in M, it\u2019s easy for you to add fingerprint authorization to your app and have it work consistently across a range of devices and sensors. There is a new FingerPrintManager class that lets you receive a callback when a user authorizes payment or any other action using the fingerprint reader. It also lets you completely customize the UI or use the default UI.\n\nYou can look at the sample code from Google or watch this video for more.\n\nGoogle Cloud Messaging API gained a topic based messaging system where by your app can subscribe to certain messages and ignore others. Previously this filtering had to be handled manually. What this means is that your shopping app can specify that the user is male or female and only interested in clothes and hence only show push notifications targeting a female audience.\n\nYou can go further and specify categories under the topics for which you wish to receive notifications. For example: /topics/clothing/women/jeans or /topic/clothing/women/jackets.\n\nThere is also a sample app here.\n\nApp invites is all about inviting your friends to checkout or beta test an app. Your users recommend your app to their friends using personalized, contextual invitations powered by Google. It\u2019s perhaps best explained in the video below at the 2:53 mark.\n\nIn short, you can now cast content from a mobile device to a TV (for example) and still show different content on your mobile device. This would allow you to do things such as allow a user to play a game on their TV while using the phone as a controller.\n\nCheck out the Google developers blog for more information on Google Cast Remote Display API\u2019s.\n\nSmart Lock for Password basically remembers when you have saved a password for a particular website or web application in Chrome and automatically signs you in when you access the site on your Phone or download an app for that site or web application. In Google\u2019s own words:\n\nThe main change here is that there are a lot more exercise types to choose from and Google fit can even keep track of resistance and repetitions. The JavaDoc will even include details on how to perform them. You can check out the exercises supported here.\n\nThese are just some of the major items that I feel all Android Developers should be aware of. As you probably noted, there was not much mentioned here regarding development for Android Auto or Android TV (other than the Google Cast).\n\nI would recommend looking at the list of videos from 100 Days of Google Developers as it talks about a lot of features introduced at Google I/O 2015.\n\nThere is a lot more included in the Google Play Services and especially in the Google Cloud Messaging and Maps API. Also worth looking at is the NotificationBuilder changes that now let you pass a Bitmap as an icon.\n\nLast note, look at the official Android Developer blog for details on everything Android related from Google I/O and read the Developing for Android series by Google Developers on Medium. The Developing for Android series may seem basic, but it covers a wide range of topics that will help developers no matter what your experience level.\n\nCan you think of any other APIs or features that Android Developers should be aware of? Let me know in the comments."
    },
    {
        "url": "https://android.jlelse.eu/8-ways-to-do-asynchronous-processing-in-android-and-counting-f634dc6fae4e?source=user_profile---------46----------------",
        "title": "8 ways to do asynchronous processing in Android and counting",
        "text": "Perhaps the best known of the asynchronous API, AsyncTask is easy to implement and returns results on the main thread. There are some issues with AsyncTask, for example, they are not aware of the activity or fragment lifecycle and so it is the programmer's responsibility to handle the AsyncTasks behaviour when the activity is destroyed. This means that they are not the best option for long running operations and also, if the app is in the background and the app is terminated by Android, your background processing is also terminated.\n\nThis is the defacto choice for long running processing on Android, a good example would be to upload or download large files. The upload and download may continue even if the user exits the app and you certainly do not want to block the user from being able to use the app while these tasks are going on.\n\nLoaders are a complex topic, any single implementation of Loaders probably deserved a post all for itself. For now it would be worth pointing out that Loaders were introduced in Android Honeycomb and are part of the compatibility library. They are aware of Fragment and Activity lifecycle and can even cache loaded data.\n\nI would like to bring attention to AsyncTaskLoaders as they solve a lot of problems that are inherent to AsyncTask. Android Design Patterns has an amazing write-up on Loaders and I recommend reading it to get a deeper understand of Loaders.\n\nThe reason I\u2019m bundling these 2 together is because they effectively are similar. JobScheduler was released in API 21 and as yet there is not official compatibility version from Google (Evan Tatarka has filled the void with JobSchedulerCompat). However, GcmNetworkManager that is bundled as part of Google Play 7.5 is something similar but specifically for network operations.\n\nUsing JobScheduler is a little complex, luckily there is a sample of how to use JobScheduler from Google. Effectively, you have to create a Service and create a job using JobInfo.Builder that specifies your criteria for when to run the service; such as being on a unmetered network, or when the app is charging. It is important to remember that there is no guarantee that your code will be executed as soon as these conditions are met or the order of the execution. Below is an extract from Google\u2019s code on how to schedule a job.\n\nI\u2019ll let you see the GcmNetworkManager page for example code on how to use it. The general concept is similar where you have to schedule a Service to run when certain criteria are met. The Scheduled Tasks can be One-off or Periodic.\n\nNo prizes for guessing what this is used for. This is very easy to use however it is context sensitive, so if you exit your Activity or Fragment, you need to clean this up by cancelling it. To be clear, there really is nothing Asynchronous about CountDownTimer. If you look at it\u2019s source, it simply posts delayed messages on a Handler which means that it will run on whatever thread you launch it from and onTick() and onFinish() will be executed on whatever thread you run the CountDownTimer from so you can do UI updates in it. For this reason, it\u2019s also important to not do any heavy operations onTick() or onFinish(). The reason CountDownTimer is included in the list is because using this class does not block the user from using the app even when the CountDownTimer is initialised from the main thread, effectively giving a asynchronous effect. Also keep in mind, if your update intervals are small and your processing is time consuming, you can have a back-pressure problem which will result in blocking of your execution thread.\n\nJava Threads are rather straight forward to implement. However, they are best to avoid in Android. I have seen them used in all sorts of instances however they are limiting as Android doesn\u2019t really allow UI updates on the background thread. A better option may be to use AsyncTask.\n\nAndroid HandlerThread, can be used to handle messages of a background thread. While the use for this is rather limited as Message handling tends to do more of a redirection rather than processing, it nonetheless provides us a way to perform some tasks on the background thread. A possible use may be to run a Service in a background thread.\n\nFutureTask performs asynchronous processing, however, if the result is not ready yet or processing has not complete, calling get() will be block the thread.\n\nSurprisingly I've used this a few time. Sometimes you want to execute a request in Google Volley in a blocking manner. Below is an example of how to do this. Note, if you do this, make sure you're not blocking the UI thread.\n\nIt will always block you can use future.get(30, TimeUnit.SECONDS); after that time it will throw timeout exception rather than waiting indefinitely\n\nAn example of using Java Timer to do something after 5 seconds. These can be used to schedule some processing on a background thread. There are other ways to handle the same in Android, you could use a Handler with postDelayed or Handler with sendMessageDelayed() and the handler can run on a background thread as shown above. Also, keep in mind that since this API is not aware of the Android lifecycle, any hard reference to an Activity, Fragment or View in here is a possible memory leak.\n\nFrom Java API: A ThreadPoolExecutor that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to Timer when multiple worker threads are needed, or when the additional flexibility or capabilities of ThreadPoolExecutor (which this class extends) are required. Delayed tasks execute no sooner than they are enabled, but without any real-time guarantees about when, after they are enabled, they will commence. Tasks scheduled for exactly the same execution time are enabled in first-in-first-out (FIFO) order of submission.\n\nThe ScheduledThreadPoolExecutor suffers from a lot of the same problems on Android as Timer and Java Threads. If you need to update the UI you\u2019ll need to use a Handler to post messages to the UI thread or pass in a Listener. A ScheduledThreadPoolExecutor is part of Java, it\u2019s not aware of the Activity or Fragment lifecycle and as such any Listeners will have to be cleaned up or replaced manually in order to prevent memory leaks.\n\nIf you know of more useful ways to do asynchronous processing in Android, let me know in the comments. Also, feel free to follow me on LinkedIn, Google+ or Twitter."
    },
    {
        "url": "https://medium.com/google-cloud/build-a-multi-platform-game-and-backend-api-in-5-minutes-fa8b94017011?source=user_profile---------47----------------",
        "title": "Build a multi-platform game and backend API in 5 minutes",
        "text": "This works equally well for the game we built above or for an Android app. There are tons of cloud hosting solutions, Google's App Engine, Amazon AWS and Microsoft has Azure etc. However, because of it\u2019s amazing integration with Android Studio we will be going with Google App Engine. There is an additional benefit here of not needing a separate development environment and a separate setup of an IDE to do backend development. You can code your clients and modify your backend to suit them all in one place.\n\nSimply right click on your project name and select New > Module\n\nFrom the New Module screen, select Google Cloud Module and click Next, when you do, you should see the screen below.\n\nThe fields should be pre-filled. If you want to change any of the fields you can, however, you should familiarize yourself with the options under Module type and select the one appropriate for you. At the bottom of the screen, you have links that point you to resources that explain what each of the module types are. In short:\n\nRecommendation for module type: If you have previous backend Java experience and know the kind of backend you want to build, then I would just select Java Servlet Module and change it as you see fit. If you aren't sure, then just go with App Engine Java endpoints Module. Changes are, this will provide all the functionality you need and takes advantage of Google\u2019s cloud engine. The rest of this tutorial assumes you are using App Engine Java endpoints Module.\n\nWhen you click Finish you'll see Android Studio building your new backend project. When all is done, the backend module should be added to your project.\n\nWhen doing this on a Windows machine, my build was broken. There were 2 reasons:\n\n2. And secondly, because of some known issues with the Google Cloud Plugin, you can't use the latest Gradle, unless you need the most recent versions of Gradle you can just go with 2.2.1. In order to change the Gradle version open <Project>/gradle/wrapper/gradle-wrapper.properties and change the version of gradle you use. Make sure it reads:\n\nWhen all that is done, the project should build again and you should be able to launch the android app as before.\n\nFrom the edit configuration drop down, select backend then simply click the play button next to it to run the backend. You should see log output similar to that below\n\nAs the output suggests, if you visit localhost:8080 you should see a \u201cHello Endpoints\u201d page.\n\nThat\u2019s it! You have a starting point for your game and your backend api! How easy was that!\n\nIn order to test the backend with your app in order to verify that there is a backend api to access. You can use some code from courtesy of Google. In your Android project, create an AsyncTask.\n\nThen in your AndroidLauncher class, add the following at the end of the onCreate method:\n\nWhen you run the app while your backend is running, you should see the Toast message as shown below:\n\nNote: The IP address 10.0.2.2 is the IP address that the Android emulator uses to access your machine. For Genymotion users, this IP address will be 10.0.3.2. For people using devices, they will have to use the IP address of their development machine.\n\nI've always preferred Eclipse over IntelliJ, my reason is simple, not everyone can afford to keep their machines up to date or recent, and Eclipse for all it\u2019s problems uses native code and just runs faster.\n\nThat being said, I\u2019m impressed with how far Android Studio has come as a development environment. Arguable a lot of this is thanks to Gradle and growing community behind it. I've done this same setup with Eclipse and while it was simple enough, it was not even close to as smooth as the setup with Gradle and Android Studio."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/android-developers-are-you-a-macgyver-or-macgruber-with-custom-views-a155f24b7479?source=user_profile---------48----------------",
        "title": "Android developers, are custom Views right for you?",
        "text": "The funny thing about software development is that the more you learn, the more you realize you don't know. For Android developers, custom Views can be one of those things. You can, and have used the frameworks Views and ViewGroups to do everything that has come your way to date. Indeed you are a modern day MacGyver!\n\nHowever, when it comes to building custom Views, there are a lot of questions around why they are useful, what you can do with them and worse, if you've seen some of the custom View implementations out there, the complexity of the code may have been left feeling more like MacGruber than MacGyver!\n\nHowever fear not young budding MacGyver, I'm here to tackle some questions surrounding custom Views that you may have.\n\nUsing a custom View allows you to build complex views without having the code to do so in your Activity or Fragment. Yes, you could probably use a helper class to achieve the same but this breaks conventions of object-oriented programming.\n\nIn your Activity or Fragment, you may have code such as:\n\nThis code doesn't look too bad, but it\u2019s not as good as:\n\nWhat\u2019s important here is that the code to build your view doesn't really belong in your fragment, depending on what you want to build (for example if the subview has a few variations) you could end up with a lot of code in your Fragment or Activity.\n\nNote: Creating a custom view does add a lot of boilerplate code, however, the idea here is not to avoid boilerplate but to make your code cleaner, easier to understand and maintain.\n\nThere are tons of ideas that you may have that the framework may not allow your to do and there is no custom view out there that does this by default. As an example, take the CircularImageView. While there are libraries out there for it, someone had to write these! Yes, you could have done this by putting a white foreground over your image with transparent circle cut out of it, but that would mean you have 2 views where you only need 1 and it assumes your background is a solid color. You could create a TextView that takes a Date object or time in milliseconds and shows you the date formatted. You could even create an EditText that formats date, social security number or phone number as you type.\n\nI kept coming up with a requirement to show all the images in a ListView and GridView with roughly the same width and height and try to retain the aspect ratio while scaling the images. In the case of lists and grids, we wanted each cell to be the same size as well, so I wrote RatioImageView.\n\nCircularImageView and RatioImageView are reusable! Write them once and you can include the code in your other projects with no to little change!\n\nThis certainly falls under the category of advance use and perhaps deserves a whole post if not several dedicated to itself. The rationale here is that if you know something about your layouts or if it\u2019s safe to make certain assumptions, then you can completely flatten all your views by making a custom view or you can reduce the number of measurement passes that have to be made on your layout.\n\nYou would think the answer would be as simple as extending View or ViewGroup and going on your happy way. Yes, you probably should extend an existing View or ViewGroup. If you modify an existing View such as a TextView to create a DateFormattedTextView, then the customization may be as simple as formatting the string after it\u2019s set and calling super with the formatted string. If you want to build something like a CircularImageView, you may have to be a lot more hands on and actually implement it in onDraw().\n\nHowever, if you are looking to reduce code or optimize performance, you could create custom view group and there are at least 3 ways to build custom view groups.\n\nThese are also known as Compound Views, however, I call them Composite Views in order to avoid confusion with Compound Buttons.\n\nThese would fall under the category of simplifying your code and making it reusable (somethings like R.class references will need to be changed when moving between projects). This should also work well in most cases. The downside is that depending on your use case, it can be slow, and the complexity of the view hierarchy is still largely dependant on what you can use from the framework.\n\nThe next step would be to measure and layout the children yourself, this would save your several passes that the framework views make. In order to do this, you will need to override the onMeasure() and onLayout() methods of ViewGroup. You can no longer extend a ViewGroup implementation such as FrameLayout, LinearLayout or RelativeLayout and should extend ViewGroup and override the onMeasure() and onLayout() methods. How these 2 methods work is a little tricky to understand, but there are a lot of resources on the internet that can help you understand.\n\nImplementing onMeasure and onLayout yourself will result in faster render time. This is because you obviously know what your layout is supposed to look like, and can make a lot of assumptions which the ViewGroup implementations provided by the framework cannot. Those have to cater for a whole host of situations.\n\nIf you can navigate the complex code, then use merge or a layout file at all? If you know what your layout if going to look like, you should be able to completely draw the layout yourself and have a completely flat view! No View hierarchy, just one view which looks exactly how you want it to look! Among the principles of performance in Android are:\n\nUsing a custom view to draw everything achieves both of these!\n\nThe trouble here is that if you choose to go down this path, you have to manage everything programmatically yourself. In order to get your to appreciate the extent to which I mean everything. Everything includes but is not limited to:\n\nSo what is my recommendation here. Sadly, not all of us are brilliant enough to knock out 100% custom Views (wouldn't that be nice), nor does the fact that I need to inflate a ViewGroup mean that I would benefit from a custom View in any way.\n\nRealistically, I would say keep an eye open for potential code clean ups using Composite Custom Views and take your wins there. Potential candidates may be Views that take a lot of code to build and Views that are reused in other parts of the app.\n\nIf list scrolling performance or layout performance becomes an issue and you've tried everything else and there is still pressure on you to improve it, then and only then, if you have been given enough time would I look into a Custom View that uses a Composite View. Laying out child Views using onMeasure and onLayout can be a bit fidgety and most of us will require a some trial and error."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/java-developers-have-a-guava-on-google-a98c6d79f04e?source=user_profile---------49----------------",
        "title": "Java Developers, have a Guava on Google \u2013 Ali Muzaffar \u2013",
        "text": "Any developer who has developed for a Google product using Java knows that Google bundles in a lot of api and libraries that solves common problem or makes coding easier. Turns out you can take those libraries and a lot more to your non-Google projects as well thanks to Google\u2019s Guava library.\n\nIf you do develop for an Google platform, this doesn\u2019t mean that you necessarily have access to Guava, Google tends to bundle in a lot of libraries but there are still more in Guava. As a matter of fact, take a look at a build file for any Android app under the AOSP project and you\u2019ll probably find that Google includes Guava as a library.\n\nSo, now you have your own personal Google developer laying down code for you, what can you do with it?\n\nLets start with something simple which (IMHO) reduces a lot of code. How often do you have to do something simple, like combine first name and last name to create full name? Or combine city, state and postcode to make an address? Lets take the name example and see what the code may look like.\n\nWe can clean up this code a bit my putting the null check in the userObject\u2019s methods and returning an empty string if a value is null, but we will still require a length check. Guava\u2019s Joiner api lets us do the following:\n\nSimilarly, for address you could do something like:\n\nThe nulls are handled for you! I know you\u2019re thinking that empty Strings will show up, for that Google developers recommend using Strings.emptyToNull(\u201c\u201d) so your code becomes:\n\nNot as clean any more, but a lot better than the original code.\n\nIn Java 7 multi-catch not only clean up our code, they provide you with a way to handle some exceptions, ignore others and throw whatever you want is a rather compact manner.\n\nHowever, people still stuck on Java 6 have to deal with catching Exception or throwable and trying to figure out which ones they want to ignore and which ones they want to let propagate. Guava throwable makes this easy for you.\n\nThe alternatives are understandably a lot more verbose. I\u2019ll give the reader some credit and skip them (or you can read about them on Guavas Throwable page). You can simplify this code with Guava.\n\nYes, Guava comes with an EventBus. Using an EventBus in place of a Listener model can greatly simplify your code and even add a lot of flexibility.\n\nBasically, any time you need to do something like Map<Key, Collection<V>> or Map<Key, HashMap<K,V>> you can use a MultiMap instead. This saves you a lot of confusing code and a lot of redundant checking.\n\nThere is a lot more, I would recommend checking out the Guava GitHub page and this stackoverflow post."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/should-i-use-fragment-or-activity-in-android-5dbcc2703ecc?source=user_profile---------50----------------",
        "title": "Should I use Fragment or Activity in Android \u2013 Ali Muzaffar \u2013",
        "text": "This seems like a rather simple topic to talk about, however, in general, people seem to fall into one of two camps.\n\nIndeed this is reflected in the code I see out there, not just professionally, but also in various open source libraries and their demo apps. Demo apps are a rather interesting barometer for these things. Mostly because when making a demo app, nothing really matters other than showing how the library or feature works. Yet, people go through the trouble of creating a Fragment or conversely, do not create a Fragment when there is a lot of code.\n\nSome out there would point out that this may be because IDE\u2019s now generate a lot of this code for you, so you can start with an empty project that the IDE sets up for you with a Fragment. That being said, those same IDE\u2019s can also create blank projects without Fragments so it is largely the programmer\u2019s choice what they want. That begs the question:\n\nIf you read the \u201cDesign Philosophy\u201d behind a Fragment, it certainly seems to imply that unless you want to create a bad app, you should be using a fragment. However, I\u2019m pretty sure that\u2019s not really how it\u2019s meant to read. The best insights we have as to what Google recommends is firstly, by looking at Android code samples by Google. Do look at the date when you look at some of this example code. The reason for this is that Fragments were introduced in API 11 and there is a lot of code that was added before that or soon after that which may not use Fragments. The second area where we can get an idea of what Android best practices are, is by looking at some of the code templates generated code by the Android Studio IDE.\n\nSo, what are some of the insights? The first thing we see is that Activities are still alive and well and not just a zombie container for Fragments. Everyone knows that Fragments are supposed to communicate with each other through the Activity. We also see that a lot of logic for managing the menu items and the action bar is in the Activity. The reason for this is that having a central point to control those will save you a lot of headache later. We also see a lot of code for retrieving data and manipulating data before it is handed over to a Fragment. This may be a good idea if you have more than one Fragment which is supposed to display the same data.\n\nWe also see activities being used as a way to add logical flow to an application. Take a look at the Email app source for example. This is exceedingly important in large apps. If you try to do everything in one Activity with Fragments, you\u2019ll find that there is a certain amount of code you have to add to everything for every Fragment you add after a certain point to keep things flowing smoothly. That reason for this is mostly that a lot of unrelated functionality is being bundled together. Adding and removing menu items, changing action bar titles and application flow when clicking back are among the first challenges to come up. In order to minimize the headaches, if the functionality is significantly different, it probably belongs in a different Activity (it can still be in it\u2019s own Fragment, just added to a different Activity).\n\nNone of this changes the fact that Fragments are reusable and as such they are the best place for your UI and logic if there is any chance that you may have to use the same layout/logic elsewhere. The takeaway seems to be that you shouldn\u2019t forsake putting code in an Activity for the heck of it, rather, consider using a Fragment if there is a chance that your code may be reused elsewhere in the app, otherwise it\u2019s okay to put it in an Activity.\n\nOn a side note, if you leak an Activity, you can potentially leak all Fragments that hold a reference to it. When a Fragment is destroyed, make sure to clear references to all callbacks to the Activity and any objects references from the Activity."
    },
    {
        "url": "https://medium.com/@ali.muzaffar/performance-improvement-and-bitmap-pooling-in-android-f97b380cf965?source=user_profile---------51----------------",
        "title": "Performance improvement and Bitmap pooling in Android",
        "text": "If your application experiences jitters or lag when scrolling or paging, there are a few things you can try. Take a look at the \u201cImproving Layout Performance\u201d page and use the built in developer features such as GPU Overdraw and Profile GPU rendering to see where the problems may be.\n\nIf you have tried all of the above and you are still unhappy with the results, you can look into performance tuning using bitmap pooling. While object pooling is largely considered a deprecated technique in modern Java VM\u2019s, there are still a plenty of uses for it.\n\nBitmap pooling is a simple technique (though fairly complex to implement), that aims to reuse bitmaps instead of creating new ones every time. To put it simply, when you need a bitmap, you check a bitmap stack to see if there are any bitmaps available. If there are not bitmaps available you create a new bitmap otherwise you pop a bitmap from the stack and reuse it. Then when you are done with the bitmap, you can put it on a stack.\n\nBefore Android API 11, it isn\u2019t possible to reuse bitmap images and as such recycle()is your friend. Before API 11, pixel data was stored in native memory and not on the dalvik heap, this meant that memory was released it an unpredictable manner. Calling recycle() ensures that the memory held by the backing pixel data gets recycled as and when you expect it.\n\nFrom API 11 onwards, you can pass a bitmap to be reused in the BitmapFactory Options.\n\nAs mentioned earlier, you will need to implement a bitmap pool to make it easy to manage your bitmaps. A great implementation along with advice on how integrate your bitmap pool into your networking layer can be found on booking.com\u2019s blog.\n\nNOTE: Bitmap pooling currently only works for Bitmaps that are exactly the same size. For this reason you need to be careful when you use it and/or use different pools for different size bitmaps. You can easily check whether the bitmap pool was used like so:\n\nIt may also be worth while to know the difference between bitmap ARGB_8888 and RGB_565. This is a minor optimization that can have a huge impact. ARGB_8888 has 32-bit color which also supports alpha transparencies. RGB_565 does not support alpha transparencies and is 16-bit color. Since RGB_565 bitmaps are much smaller is size they are faster to load. The smaller size and lack of alpha transparencies means that they are faster to render as well. All Android phones are 16-bit color, so it may be pointless to has 32-bit bitmaps unless they have alpha transparencies.\n\nGot any great performance improvements tips on Android? Let us know in the comments."
    }
]