[
    {
        "url": "https://hackernoon.com/machine-learning-bit-by-bit-multivariate-gradient-descent-e198fdd0df85?source=user_profile---------1----------------",
        "title": "Machine Learning Bit by Bit \u2014 Multivariate Gradient Descent",
        "text": "Hello again! In my last post, we discussed:\n\nIn this post, we\u2019re going to extend our understanding of gradient descent and apply it to a multivariate function.\n\nIn my opinion, this offers a smooth transition to apply gradient descent to more complex functions, as well as helps you solidify the knowledge of gradient descent, which will be essential in the next topic up in the series \u2014 linear regression.\n\nN.B. This series aims to share my own interpretation, research and exploration on topics covered in Machine Learning course by Andrew Ng. Mathematical notations will be mostly in line with what is used in the course.\n\nAlright, let\u2019s get into it."
    },
    {
        "url": "https://hackernoon.com/machine-learning-bit-by-bit-univariate-gradient-descent-9155731a9e30?source=user_profile---------2----------------",
        "title": "Machine Learning Bit by Bit \u2014 Univariate Gradient Descent",
        "text": "This series aims to share my own interpretation, research and exploration on topics covered in Machine Learning course by Andrew Ng. Mathematical notations will be mostly in line with what is used in the course.\n\nAndrew doesn\u2019t necessarily go through how some of the equations are derived as it\u2019s outside of the scope of the course, and it\u2019s up to you to look deeper into the maths. In my opinion, understanding and being able to play around with the maths behind is the key in machine learning. It allows you to choose the most suitable algorithms and tailor them according to the problems you want to solve.\n\nTherefore, wherever possible, I will expand the equations and avoid shortcuts, so that you can follow along how we reach from the left side of the equation to the right.\n\nOk, that\u2019s an enough gibberish from me.\n\nLet\u2019s jump right into the fun stuff!"
    },
    {
        "url": "https://codeburst.io/js-demystified-05-closures-97be31b260f9?source=user_profile---------3----------------",
        "title": "JS Demystified 05 \u2014 Closure \u2013",
        "text": "I hope you enjoyed my last post in the series, where we looked at execution context in great detail.\n\nNow, it\u2019s time to talk about closures.\n\nIf you are not comfortable with topics listed below, I recommend you to take a moment to refresh your knowledge there.\n\nGreat, let\u2019s get to it."
    },
    {
        "url": "https://codeburst.io/js-demystified-04-execution-context-97dea52c8ac6?source=user_profile---------4----------------",
        "title": "JS Demystified 04 \u2014 Execution Context \u2013",
        "text": "What do I mean by a leading parent object of a function call?\n\nWhen was executed at line 12, it was precedented with a reference to \u2014 this is the leading parent object. Hence, the value of within the execution context of call was set to . On the other hand, in the first example, call at line 9 did not have any parent object. Therefore, defaulted to .\n\nTo make things even more interesting, let me throw you this example.\n\nCan you guess what the value of would be?\n\nThe answer is , not . Why?\n\nLet\u2019s reiterate the description of how is set to explain: gets set to a leading parent object of a function at the time of execution.\n\nRight, when the function was executed at line 8 \u2014 not when it was created inside , not when it was assigned to \u2014 but when it was invoked, it did not have a reference to a parent object. This is why defaulted to .\n\nNow, you should be able to guess the next one right.\n\nWhat would happen to in a function call nested inside an object?\n\nThe same rule applies here, and the answer is again."
    },
    {
        "url": "https://codeburst.io/js-demystified-03-scope-f841ecad5c23?source=user_profile---------5----------------",
        "title": "JS Demystified 03\u2014 Scope \u2013",
        "text": "As usual, we start by testing your knowledge with a quiz. Can you tell what will following four print out?\n\n\u2014 and yes, in that order!\n\nIt might look confusing, and I don\u2019t blame you. We really need to have a solid understanding of hoisting and scope to get this one right. Being comfortable with these two concepts is essential as a JavaScript developer, as it will help you write safe code and debug faster.\n\nSo without further ado, let\u2019s dive into it.\n\nN.B. Scope and execution context are closely related, but not the same. It is a separate topic on its own, so I\u2019ll keep that for another time. We will focus on understanding scope in this post."
    },
    {
        "url": "https://hackernoon.com/hello-world-once-more-4d262286f138?source=user_profile---------6----------------",
        "title": "Hello World, Once More \u2013",
        "text": "Hello World, Once More\n\nSo I created yet another boilerplate with React and Express.\n\nHere is why.\n\nThe answer is yes!\n\nLet\u2019s face it \u2014 It\u2019s a pain to set up a React project from scratch.\n\nWhilst learning React, I encountered so many problems just to get a hello world app running on the browser. Trying to compile and bundle the front-end felt like forever. Webpack config looked cryptic and daunting. So many babel presets to choose from\u2026 Then here comes the back-end. How should I structure the app? Do I opt for client-side or server-side rendering? Which test runner to use? What is the best way to separate development and production workflow?\n\nThe abundance of choice is overwhelming.\n\nAlthough there are tons of tutorials and boilerplates out there, many of them are outdated. Few of them explains the rationale behind the decisions. It was about time I put what I learnt into practice, so we can just focus on learning and playing around with React."
    },
    {
        "url": "https://codeburst.io/javascript-demystified-02-function-hoisting-b83dcaeb265?source=user_profile---------7----------------",
        "title": "JS Demystified 02 \u2014 Function Hoisting \u2013",
        "text": "Remember this example from variable hoisting?\n\nThe key here was that was available before its declaration. The same logic applies to a function declaration.\n\nIn this example, I\u2019m calling function before its declaration from line 3. Although it looks like I am calling a function that hasn\u2019t even been declared, I can use it, and it prints out . This is thanks to function hoisting.\n\nDuring the memory creation phase, the JavaScript engine recognised a function declaration by the keyword and hoisted it \u2014 in other words, the JavaScript engine made the function available by putting it into the memory, before moving on. That\u2019s why I could access the function prior to its declaration in the execution phase.\n\nAlright, so what about this one? Can you tell what would the following code do?\n\nYep, that\u2019s right \u2014 it results in , complaining that . Hmm\u2026 wait, what!?\n\nIn order to fully understand what\u2019s happening behind the scene, we need to to know the difference between function declaration and function expression. Let\u2019s spend a little bit of time on that first."
    },
    {
        "url": "https://codeburst.io/install-and-setup-cmatrix-on-mac-a2076daee420?source=user_profile---------8----------------",
        "title": "Install and Setup CMatrix on Mac \u2013",
        "text": "Then look no further \u2014 CMatrix is the solution.\n\nHomebrew is a package manager for macOS that helps you install \u201cthe stuff you need that Apple didn\u2019t\u201d. You need it to install CMatrix. If you haven\u2019t installed it on your computer, copy and past the whole line below to your terminal, and hit .\n\nIn the new terminal window, command is now available.\n\nCMatrix is distributed via GNU, and you need GNU Screen to enable in your terminal. First, install screen.\n\nThen, create a file in your home directory. This serves as a configuration file when you enter a screen session later.\n\nAdd following 2 lines to the file you just created and save.\n\n: Tells screen to use CMatrix as a screen blanker. When a screen blanker runs, the screen is cleared first, CMatrix starts up, and its output gets written to the screen.\n\n: Activates the screen blanker after 15 seconds of inactivity. You can exit the blanker with any keypress. Adjust the time threshold according to your preference.\n\nFor more information on how to use screen, the screen user\u2019s manual is a good source.\n\nCool. We\u2019ve laid all the groundwork to enable the mesmerising effect of CMatrix screensaver. In your new terminal window, type and hit to enter the screen session.\n\nFirst thing you will see is a wall of text \u2014 this is the startup message. Press or to dismiss. (I\u2019ve added a tip at the end of the page how to disable the startup message)\n\nFinally, wait for 15 seconds until you see the strings of random letters. You now have the coolest terminal screensaver!\n\nWell, not quite like above\u2026 but pretty close ;)\n\nTip: add the following line anywhere in the file to skip the startup message."
    },
    {
        "url": "https://codeburst.io/javascript-demystified-variable-hoisting-c3c4d2e8fd40?source=user_profile---------9----------------",
        "title": "JS Demystified 01 \u2014 Variable Hoisting \u2013",
        "text": "Alright, here\u2019s the first one.\n\nOkay, I hear you. This is not actually an example of hoisting. The variable is not declared anywhere in the code, so it will result in a big red , complaining that \u2014 fair enough!\n\nWhat about this one?\n\nAt the first glance, you may think that it\u2019s a lot like the first example. However, this code doesn\u2019t throw an error. It executes and prints out a value of . It\u2019s important to note that, in JavaScript, is an actual value. So this is basically JavaScript engine interpreting , just like or .\n\nThe key here is that is defined and available before its declaration \u2014 yes, this is a legitimate example of hoisting. Hence, the example 2 is practically same as:\n\nBut who sets the value of to ? I certainly didn\u2019t, did I?\n\nThis is a job of the JavaScript engine. During the memory creation phase, it recognises variable declarations as it reads the code, initialises them to and puts them into memory to be used during the execution phase.\n\nLet\u2019s look at another example. What will the output?\n\nYou might have guessed that it would print out , because you initialised to . But the outputs . Why??\n\nHere is the gotcha\u2026 initialisations are not hoisted.\n\nDuring the memory creation phase, the JavaScript engine recognised the declaration of ( ), automatically initialised to , and made it available. However, as the initialisation ( ) didn\u2019t get hoisted, value of stayed as when the execution reached at line 1.\n\nIf we add another at line 3, the second output will be , because by then is reassigned to .\n\nThe example 4 is practically the same as running below."
    }
]