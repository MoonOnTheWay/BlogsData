[
    {
        "url": "https://medium.com/@BonsaiAI/this-is-part-2-in-a-series-of-blog-posts-detailing-how-we-trained-an-ai-to-play-breakout-using-c69e1b0e93f7?source=tag_archive---------0----------------", 
        "text": "We will write a curriculum to train the model on the get_high_score.\n\nFor every specified concept, we need to write a curriculum. The curriculum keyword declares a set of lessons, each declared by the lesson keyword, used to teach a concept. The train keyword indicates which concept this curriculum trains, the with keyword specifies which simulation (or data) should be used with this curriculum, and the objective keyword specifies the goal used to evaluate the learning system\u2019s performance.\n\n\u00a0\n\nIn the above snippet, the get_high_score_curriculum trains the concept get_high_score using the Breakout simulator which can be written in any language (in our case, we used an open-source simulator written in python). The objective of the above curriculum is to increase the score as much as possible.\n\nEvery curriculum will have one or more lessons. Lessons give the programmer control over the training of the model. Here is the example of a lesson for the get_high_score_curriculum\n\nIn this example, we constrain the simulator to certain parameters and specify the maximize keyword that directs the AI to maximize the objective of the curriculum. The author of the simulator defines both the objective and which parameters can be constrained using Bonsai\u2019s Python SDK.\n\n\u00a0\n\n\u00a0When the programmer is ready to train the AI, they connect the Breakout simulator to the server and issue a command to begin training. Once training starts, the server configures and plays the simulator until the AI agent maximizes the score as best it can or training is terminated.\n\n\u00a0\n\n\u00a0Simulators can be reused to teach multiple concepts. Let\u2019s see an example of reusing the breakout simulator to train the ball_location concept.\u00a0\n\n\u00a0\n\n\u00a0ball_location_curriculum\n\nIn this curriculum we train the ball_location concept using a different objective function. ball_location_distance measures the distance between the AI agent\u2019s guess of the ball location and the actual ball location as calculated inside the simulation.\n\n\u00a0\n\n\u00a0Lessons for ball_location_curriculum.\n\nIn the concept post, we talked about how multiple concepts improve the accuracy of the model. The same logic applies to multiple lessons. Lessons determine the time it takes for a model to train.\n\n\u00a0\n\nLessons can build on other lessons. In the first case, we first train the model with no_bricks, which describes a easier version of the game with a larger paddle width, a lower level and less bricks. Once, the AI is trained on the minimizing the ball_location_distance in an easier environment, we can build another lesson on top of it that introduces further complexities. We change the parameters of the game by introducing different bricks_percent, level and paddle_width sizes. In this way, the AI can slowly progress from an easier environment to more and more complex ones.\n\nThe curriculum & lesson for the keep_paddle_under_ball concept has been left as an exercise to the reader. We are excited to see how you craft it using the examples above.\n\nNext steps, once the mental model and curriculum have been coded in Inkling, the compiled code is sent over to the BRAIN server. The BRAIN or the Basic Recurrent Artificial Intelligence Network (yay! acronyms) is the final part of Bonsai\u2019s ecosystem. We will talk more about BRAIN in the next post\u200a\u2014\u200ahow it initiates training, including choosing the right algorithm\u200a\u2014\u200a-with corresponding topologies & hyperparameters, guiding training and deployment of the trained model.", 
        "title": "How we taught an AI to play Breakout \u2013 Bonsai \u2013"
    }
]