[
    {
        "url": "https://medium.com/machine-intelligence-report/deep-learning-for-hackers-with-mxnet-1-gpu-installation-and-mnist-428a3e165ca?source=tag_archive---------0----------------", 
        "text": "I am going to have a series of blogs about implementing deep learning models and algorithms with MXnet. The topic list covers MNIST, LSTM/RNN, image recognition, neural artstyle image generation etc. Everything here is about programing deep learning (a.k.a. deep learning for hackers), instead of theoritical tutorials, so basic knowledge of machine learning and neural network is a prerequisite. I assume readers know how neural network works and what backpropagation is. If difficulties, please review Andew Ng\u2019s coursera class Week 4: https://www.coursera.org/learn/machine-learning.\n\nSurely, this blog doesn\u2019t cover everything about deep learning. It is very important to understand the fundamental deep learning knowledge. For readers who want to know in-depth theoritical deep learning knowledge, please read some good tutorials, for example, http://deeplearning.net/reading-list/tutorials/.\n\nMXnet is a deep learning toolkit written in C++11, and it comes with DMLC (Distributed (Deep) Machine Learning Common http://dmlc.ml/). You might have known MXnet\u2019s famous DMLC-sibling xgboost https://github.com/dmlc/xgboost, a parallel gradient boosting decision tree which dominates most Kaggle competitions and is generally used in many projects.\n\nMXnet is very lightweight, dynamic, portable, easy to distribute, memory efficient, and one of the coolest features is, it can run on portable devices (e.g. image recognition on your Android phone ) MXnet also has clear design plus clean C++11 code, let go star and fork it on github: https://github.com/dmlc/mxnet\n\nRecently MXnet has received much attention in multiple conferences and blogs for its unique features of speed and efficient memory usage. Professionals are comparing MXnet with Caffe, Torch7 and Google\u2019s TensorFlow. These benchmarks show that MXnet is a new rising star. Go check this recent tweet from Quora\u2019s Xavier Amatriain: https://twitter.com/xamat/status/665222179668168704\n\nMXnet natively supports multiple platforms (Linux, Mac OS X and Windows) and multiple languages (C++, Java, Python, R and Julia, plus a recent support on javascript, no joking MXnet.js). In this tutorial, we use Ubuntu 14.04 LTS and Python for example. Just a reminder that, since we use CUDA for GPU computing and CUDA hasn\u2019t yet support ubuntu 15.10 or newer (with gcc 5.2), let\u2019s stay with 14.04 LTS, or, at latest 15.04.\n\nThe installation can be done on physical machines with nVidia CUDA GPUs or cloud instance, for example AWS GPU instance g2.2xlarge or g2.8xlarge. The following steps mostly come from the official installation guide http://mxnt.ml/en/latest/build.html#building-on-linux, with some CUDA modification.\n\nPlease note: for installing CUDA on AWS from scratch, some additional steps are needed for updating linux-image-extra-virtual and disabling nouveau, for more details, please refer to Caffe\u2019s guide: https://github.com/BVLC/caffe/wiki/Install-Caffe-on-EC2-from-scratch-(Ubuntu,-CUDA-7,-cuDNN)\n\nMXnet only needs minimal dependency: gcc, BLAS, and OpenCV (optional), that is it. One can install git just in case it hasn\u2019t been installed.\n\nJust another reminder that\u200a\u2014\u200arecursive is needed: MXnet depends on DMLC common packages mshadow, ps-lite and dmlc-core, where\u200a\u2014\u200arecursive can clone all necessary ones. Please don\u2019t compile now, and we need to install CUDA firstly.\n\nCUDA installation here is universal for other deep learning packages. Please go to https://developer.nvidia.com/cuda-downloads for selecting the CUDA installation for the corresponding system. For example, installing CUDA for Ubuntu 14.04 should looks like this, and deb(network) is suggested for fastest downloading from the closest Ubuntu source.\n\nOr, here it is the command-line-only solution\uff1a\n\nIf everything goes well, please check the video card status by nvidia-smi, and it should look like this\uff1a\n\nCPU info may vary, and I am using a GTX 960 4GB (approximately 200$ now). MXnet has very efficient memory usage, and 4GB is good for most of the problems. If your video card has only 2GB, MXnet is fine with it with some small parameter tunes too.\n\nOptional: CuDNN. Mxnet supports cuDNN too. cuDNN is nVidia deep learning toolkit which optimizes operations like convolution, poolings etc, for better speed and memory usage. Usually it can speed up MXnet by 40% to 50%. If interested, please go apply for the developer program here https://developer.nvidia.com/cudnn, and install cuDNN by the official instruction when approved,\n\nMXnet needs to turn on CUDA support in the configuration. Please find config.mk from mxnet/make/, copy to mxnet/, and edit these three lines:\n\nwhere the second line is for CUDA installation path. The path usually is /usr/local/cuda or /usr/local/cuda-7.5. If readers prefer other BLAS implementations. e.g. OpenBlas or Atlas, please change USE_BLAS to openblas or atlas and add the blas path to ADD_LDFLAGS and ADD_CFLAGS.\n\nWe can compile MXnet with CUDA (-j4 for multi-thread compiling):\n\nOne more reminder that, if one has non-CUDA video cards, for example Intel Iris or AMD R9, or there is not video card, please change USE_CUDA to 0. MXnet is dynamic for switching between CPU and GPU: instead of GPU version, one can compile multi-theading CPU version by setting USE_OPENMP = 1 or leave it to 0 so BLAS can take care of multi-threading, either way is fine with MXnet.\n\nMXnet natively supports Python, one can simply do:\n\nPython 2.7 is suggested while Python 3.4 is also supported. One might need setuptools and numpy if not yet installed. I personally suggest Python from Anaconda or Miniconda\n\nNow we have a GPU-ready MXnet, let\u2019s have the first deep learning example: MNIST. MNIST is a handwritten digit dataset with 60,000 training samples and 10,000 testing samples, where each sample is a 28X28 greyscale picture of digits, and the goal of MNIST is training a smart machine learning model for recognizing hand-writing digits, for example, it recognizes the zip code that people write on envelops and helps our post masters distribute the mails.\n\ntrain_mnist.py will download MNIST dataset for the first time, please be patient while downloading. The sample code will print out the loss and precision for each step, and the final result should be approximately 97%.\n\ntrain_mnist.py by default uses CPU only. MXnet has easy switch between CPU and GPU. Since we have GPU, let\u2019s turn it on by:\n\nThat is it.\u200a\u2014\u200agpus 0 means using the first GPU. If one has multiple GPUs, for example 4 GPUs, one can set\u200a\u2014\u200agpus 0,1,2,3 for using all of them. While running with GPU, the nvidia-smi should look like this\uff1a\n\nwhere one can see python is using GPU. Since MNIST is not a heavy task, with MXnet efficient GPU meomory usage, GPU usage is about 30\u201340% while memory usage at 67MB\u3002\n\nWhen run with GPU for the first time, readers may encounter something like this\uff1a\n\nIt is because of the PATH of CUDA dynamic link lib, one can add this to\u00a0./bashrc\uff1a\n\nOr compile it to MXnet by adding in config.mk:\n\nIn train_mnist.py, there is an function get_mlp(). It implements a multilayer perceptron (MLP). In MXnet, a MLP needs some structure definition, like this in the code:\n\nLet\u2019s understand what is going on for this neural network. Samples in MNIST look like these:\n\nWith this network structure, MXnet also needs the stucture of input. Since each sample is 28X28 grey scale, MXnet takes the grey scale value vector of 28X28=784 elements, and give a python iterator get_iterator() for feeding data to the network defined above. The detailed code is in the example which is very clean, so I don\u2019t copy-n-paste here.\n\nThe final step is running the model. If readers know scikit-learn, MXnet\u2019s python looks very familiar, right?\n\nCongratulations! We can implement a MLP! It is the first step of deep learning, not hard, right?\n\nIt is Q&A time now. Some of my dear readers may ask, \u201cDo I need to design my MNIST recognizer or some other deep learning network exactly like what you did here?\u201d \u201chey, I see another function get_lenet() in the code, what is that?\u201d\n\nThe answer to these two questions can be, most real life problems on deep learning are about designing the networks, and, no, you don\u2019t have to design your network exactly like what I did here. Designing the neural network is art, and each problem needs a different network, and a single problem may have multiple solutions. In the MNIST example code, get_lenet() implements Yann Lecun\u2019s convolution network LeNet for digit recognition, where each layer needs Convolution Activation and Pooling where the kernel size and filter are needed, instead of FullyConnected and ReLU. FYI: the detailed explanation of super cool convolution network (ConvNet) can be found at Yann Lecun\u2019s tutorial: http://www.cs.nyu.edu/~yann/talks/lecun-ranzato-icml2013.pdf\u00a0. Another good reference can be \u201cUnderstanding ConvNet\u201d by Colah. I may later on write a blog post for explaining ConvNet, since convnet is my personal favorite.\n\nI have a fun homework for my dear readers. Let\u2019s tune up some network parameters like the number of nodes and the activation function in get_mlp(), and see how it helps the precision and accuracy. One can also try changing num_epoch (number of iterations of learning from the data) and learning_rate (the speed of gradient decent, a.k.a the rate of learning) for better speed and precision. Please leave your comment for your network structure and precision score. Kaggle also has a MNIST competition, one can also go compete with mxnet MNIST models, please mention it is MXnet model. The portal: https://www.kaggle.com/c/digit-recognizer\n\nThanks for reading the first blog of \u201cDeep learning for hackers with MXnet\u201d. The following blogs will include some examples in MXnet, which may include RNN/LSTM for generating a Shakespeare script (well, looks like Shakespeare), generative models of simulating Van Gogh for painting a cat, etc. Some of these models are available now on MXnet github https://github.com/dmlc/mxnet/tree/master/example. Is MXnet cool? Go star and fork it on github https://github.com/dmlc/mxnet", 
        "title": "Deep learning for hackers with MXnet (1) GPU installation and MNIST"
    }
]