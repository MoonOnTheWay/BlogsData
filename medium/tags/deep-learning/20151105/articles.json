[
    {
        "url": "https://medium.com/@autumn_eng/increasing-open-source-engagement-with-structural-communication-guidelines-for-code-documentation-e72533de8e45?source=tag_archive---------0----------------", 
        "text": "We see the work on the modular and fast Rust Deep Learning Framework as an important step to provide more developers, researchers and entrepreneurs with easy access to state-of-the-art machine learning. The scarcity of Machine Learning Researchers and Developers might be a good indicator, that machine learning is not a very well-known field in software development, yet. We therefore feel an extra deep desire to teach people about the underlying technology and how they can use it for their own applications, research and education. One effective way is providing sufficient, complete and unambiguous code documentation, which leads us to the importance of clear documentation guidelines, which I will outline in the following paragraphs. Some of the thoughts and examples might prove valuable for other (Rust) projects as well.\n\nRust makes writing software a joyful experience, while allowing full control over the underlying machine. One of the parts that make Rust so modern is it\u2019s great support for documentation.\n\nRust doc comments are actually Markdown and comes in two formats `///` and `//!`. The former is used to document the next item in code while the latter is used to document the enclosing item, e.g. the file itself.\n\nRust doc comments allow for in-doc Rust code testing and execution, which get written in the `/// # Examples` section by convention.\n\nRust also has a great support for lints, which we are very fond of. This allows you to enforce certain behavior e.g. documentation across your project. This is one of the lints we are using, that enforces some specific behaviors and prevents successful compilation if desired behaviors are not met.\n\nFor a more in depth documentation examples you can look up the Documentation Section of the Rust Book or by reading the Rust documentation conventions RFC. But before I close this section I wanna add, that you can generate now (and directly open) nice documentation pages for your code with `cargo doc\u200a\u2014\u200aopen`.\n\nNow that we all know the basics of Rust documentation, I want to review how we can use them to write actual meaningful documentations. In the last days I read Strategic Storytelling by Dave McKinsey, who worked for more than a decade at a consulting company that shares his name, to enhance my presentation understanding. But the message in this book is applicable not only to create sales presentations but for nearly all kinds of communication. Matt Abrahams, Lecturer in Organizational Behavior at Stanford, expanded the techniques described in the book to a Communication Framework called What-So-What-Now-What that can give clear structure to communication while being situation-agnostic and non-restrictive. He argues, that a clear communication structure such as What-So-What-Now-What hast a positive impact on retaining the information. That is something that might prove valuable, when it comes to explaining the effective usage of the often not so well-known field of machine learning.\n\nAnd on the writing-side of documentation, a clear structure often helps to reduce cognitive load at writing documentation and keeping the content helpful, without falling back to short, obvious one-liners, just to satisfy the linter.\n\nWSWNW is a communication framework, that helps to structure our communication to make information easier understandable for others.\n\nWhat is the first part of the framework and introduces the Objective. It is the heart of the message and tells us what the message is about.\n\nSo-What\n\ntells us why this message we introduced is important\u200a\u2014\u200awhy it matters.\n\nNow-What\n\nis specific and states clearly what needs to be done next.\n\nNow lets explore how we can use WSWNW to increase the engagement with Leaf for people who are either not so deep in Rust/coding or not so deep into deep learning/machine learning or both.\n\nBefore we get into it, I want to state, that we need to separate between the two use-cases we are writing our documentation for. On the one side we have those who are interested in using the Deep Learning Framework for their work or research, they are looking for information on how to get started and how to efficiently use the library. On the other side we might have those who would like to contribute to the project, these could have either a stronger development or mathematical approach\u200a\u2014\u200ain the end we would like to encourage both to contribute, which requires software developers to make their implementation especially understandable.\n\nWhat\n\nAs explored previously, What introduces the Objective\u200a\u2014\u200athis often answers the question of What is this part doing? and is in almost all cases required. Before I give examples I would like to outline three guidelines, that we must not break:\n\nIn general the What is similar to what the formatting paragraph in the Rust API comment conventions RFC describes. All the additional information there should hold true for What as well.\n\nThere might be two special cases, for which the following rules apply.\n\nSo-What\n\nAfter What follows in general the answer for the question Why is this {function, behavior, implementation} important?. This can often answer questions both for usage and software design. The answer for usage should always come before the one for software design. Try to explain the design decision in the So-What question on a higher level and use the code comments for a more detailed explanation, as the documentation should be the go-to-place for usage questions, less for implementation discussions.\n\nIn So-What you might explain\n\nNow-What\n\nThis is the place to get specific and give concrete examples on how to move forward\u200a\u2014\u200awhich often means, how to use this code, function, struct, etc. As hinted in the Rust Documentation section above, we put examples after /// # Examples headline in Rust. By providing one or more examples of the behavior we so neatly described in the previous What and So-What sections of our documentation, we close the cycle for complete understanding.\n\nExamples help clearly for usage adaption, but Now-What in a design context can also mean, that you would like to get specific on what action you might take, given the information that you gave previously, which could mean a reference to an issue, a To-Do note, a performance benchmark or whatever action you would like to recommend to someone else. We make use of Rusts Markdown support, do create a `## Development` headline at the end of the Documentation, to create a space to outline the Now-What for recommended development and design actions.\n\nReferencing\n\nAlthough Rusts documentation makes already great use of referencing between different objects in and across crates, you might consider using additional references/links. If you do so, you might use the Markdown capabilities of Rusts documentation and use the referencing style.\n\nUnambiguity\n\nEspecially in Machine Learning you will come across words and phrases that might have a different meanings depending on it\u2019s context. Or even words which refer to different concepts depending on which person you will ask. This Ambiguity can arise in the crate or on a universal level in either case, you will provide an invaluable service to future readers and users, by making your words unambiguous by referencing to the object you a referencing towards\u200a\u2014\u200acontext alone might not always be sufficient.\n\nRust generates quite beautiful documentation pages, but slightly different Markdown structures might produce unexpected outcomes, which is why I will add images and suggestions for the practical implementation of the proposed documentation-communication guide. These structures can be thought of as the current best practices, which should be used as well for Leaf. I try to cover as many specific implementations as possible and will use examples directly from the Deep Learning Framework.", 
        "title": "Increasing Open-Source Engagement with Structural Communication Guidelines for Code Documentation"
    }
]