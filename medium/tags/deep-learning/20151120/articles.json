[
    {
        "url": "https://medium.com/jim-fleming/loading-a-tensorflow-graph-with-the-c-api-4caaff88463f?source=tag_archive---------0----------------", 
        "text": "Check out the related post: Loading TensorFlow graphs from Node.js (using the C API).\n\nThe current documentation around loading a graph with C++ is pretty sparse so I spent some time setting up a barebones example. In the TensorFlow repo there are more involved examples, such as building a graph in C++. However, the C++ API for constructing graphs is not as complete as the Python API. Many features (including automatic gradient computation) are not available from C++ yet. Another example in the repo demonstrates defining your own operations but most users will never need this. I imagine the most common use case for the C++ API is for loading pre-trained graphs to be standalone or embedded in other applications.\n\nBe aware, there are some caveats to this approach that I\u2019ll cover at the end.\n\nLet\u2019s start by creating a minimal TensorFlow graph and write it out as a protobuf file. Make sure to assign names to your inputs and operations so they\u2019re easier to assign when we execute the graph later. The node\u2019s do have default names but they aren\u2019t very useful: Variable_1 or Mul_3. Here\u2019s an example created with Jupyter:\n\nLet\u2019s create a new folder like tensorflow/tensorflow/<my project name> for your binary or library to live. I\u2019m going to call the project loader since it will be loading a graph.\n\nInside this project folder we\u2019ll create a new file called <my project name>.cc (e.g. loader.cc). If you\u2019re curious, the\u00a0.cc extension is essentially the same as\u00a0.cpp but is preferred by Google\u2019s code guidelines.\n\nInside loader.cc we\u2019re going to do a few things:\n\nNow we create a BUILD file for our project. This tells Bazel what to compile. Inside we want to define a cc_binary for our program. You can also use the linkshared option on the binary to produce a shared library or the cc_library rule if you\u2019re going to link it using Bazel.\n\nYou could also call bazel run\u00a0:loader to run the executable directly, however the working directory for bazel run is buried in a temporary folder and ReadBinaryProto looks in the current working directory for relative paths.\n\nAnd that should be all we need to do to compile and run C++ code for TensorFlow.\n\nThe last thing to cover are the caveats I mentioned:\n\nHopefully someone can shed some light on these last points so we can begin to embed TensorFlow graphs in applications. If you are that person, message me on Twitter or email. If you\u2019d like help deploying TensorFlow in production, I do consulting.", 
        "title": "Loading a TensorFlow graph with the C++ API \u2013 Jim Fleming \u2013"
    }
]