import requests
import json
url = 'http://poqaa.com/api/crawledWebpage/'
data = {
    "url": "https://deeplearning4j.org/gettingstarted", 
    "content": "This page builds on the instructions in the Quick Start Guide, and provides additional details and some troubleshooting steps. Seriously, go and read that page first before you proceed with this. It\u2019s the easy way to start with DL4J.\n\nThis is a multistep install. We highly recommend you join our Gitter Live Chat if you have questions or feedback, so we can walk you through it. If you\u2019re feeling anti-social or brashly independent, you\u2019re still invited to lurk and learn. In addition, if you are utterly new to deep learning, we\u2019ve got a road map of what to learn when you\u2019re starting out.\n\nAfter following the steps in the Quick Start Guide, please read the following:\n\nThis section provides a more comprehensive version of the steps contained in the quickstart guide.\n\nIn IntelliJ, it is simply sufficient to import the examples as described in the quickstart guide. In order to use the example in Eclipse, an additional step is required.\n\nAfter running a , run the following command in your command line:\n\nThis will create an Eclipse project that you can then import.\n\nAfter many years using Eclipse, we recommend IntelliJ, which has a similar interface. Eclipse\u2019s monolithic architecture has a tendency to cause strange errors in our code and others\u2019.\n\nIf you use Eclipse, you will need to install the Maven plugin for Eclipse: eclipse.org/m2e/.\n\nMichael Depies has written this guide to installing Deeplearning4j on Eclipse.\n\nIf you just want to get the examples running within Eclipse and without using command line at all you can also directly checkout the project from Eclipse\u2019s built-in Source Control Management (SCM):\n\nYou might get some errors in the pom.xml validator, ignore those for now.\n\nFind the file called XorExample.java in the org.deeplearning4j.examples.feedforward.xor packege in the src/main/java folder of the dl4j-examples project. Right-click and \u201cRun as Java-Application\u201d:\n\nYou should see an output like this:\n\nAs of 0.9.0 (or 0.8.1-SNAPSHOT), Deeplearning4j has a new native model zoo that can be accessed and instantiated directly from DL4J. Gone are the days of copying model configs from Github. The model zoo also includes pretrained weights for different datasets that are downloaded automatically and checked for integrity. \ud83d\ude80\n\nSetting up a pretrained model with weights trained on ImageNet are as easy as:\n\nLearn more about the new zoo here.\n\nnote When building or rebuilding from source please see Building Locally for complete instructions.\n\nIf you are working in a managed environment like Databricks, Domino or Sense.io, you\u2019ll need to take an additional step. After you\u2019ve followed the local setup above, just run\n\nin the command line from within the examples directory. Then you can upload the JAR file to the managed environment you\u2019ve chosen.\n\nNeural net weights are initialized randomly, which means the model begins learning from a different position in the weight space each time, which may lead it to different local optima. Users seeking reproducible results will need to use the same random weights, which they must initialize before the model is created. They can reinitialize with the same random weight using the following method:\n\nOur Scala version is here This is a port of keras to scala (a work in progress).\n\nIf you install Deeplearning4j on an AWS server with a Linux OS, you may want to use the command line to run your first examples, rather than relying on an IDE. In that case, run the git clones and mvn clean installs according to the instruction above. With the installs completed, you can run an actual example with one line of code in the command line. The line will vary depending on the repo version and the specific example you choose.\n\nAnd here is a concrete example, to show you roughly what your command should look like:\n\nThat is, there are two wild cards that will change as we update and you go through the examples:\n\nTo make changes to the examples from the command line and run that changed file, you could, for example, tweak MLPBackpropIrisExample in src/main/java/org/deeplearning4j/multilayer and then maven-build the examples again.\n\nTo make best use of your hardware see this page for CPU optimizations.\n\nTo make best use of your GPU\u2019s, see this page to configure our data processing Library ND4J for GPU\u2019s.\n\nIn order to get started building neural nets, checkout the Neural Nets Overview for more information.\n\nTake a look at the MNIST tutorial to get running quickly, and check out our guide for restricted Boltzmann machines to understand the basic mechanics of deep-belief networks.\n\nFollow the ND4J Getting Started instructions to start a new project and include necessary POM dependencies.\n\nFor people just getting started with deep learning, the following tutorials and videos provide an easy entrance to the fundamental ideas of deep neural networks:", 
    "title": "Full Installation of Deeplearning4j - Deeplearning4j: Open-source, Distributed Deep Learning for the JVM"
}

response = requests.post(url, data=json.dumps(data), headers=HEADERS)
